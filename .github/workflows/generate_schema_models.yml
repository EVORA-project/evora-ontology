name: CI - Build schema models from last metadata file version

on:
  repository_dispatch:
  workflow_dispatch:
      inputs:
          version:
              description: 'Google Sheet metadata file version asking for Sync'
              required: false
              type: string
          commitMessage:
              description: 'User commit message explaining latest modifications to the metadata'
              required: false
              type: string

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      DOCKER_IMAGE: evoratools/schemasheets:0.4.0_stable

    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.WORKFLOW_GIT_ACCESS_TOKEN }}

      - name: Create required paths if not exist
        run: mkdir -p models models/owl

      - name: update metadata version
        if: ${{ inputs.version != ''}}
        run: echo ${{ inputs.version }} > metadata_version

      - name: Create LinkML schema from the project s googlesheet of metadata
        run: |
          docker run --rm -v $(pwd):/workdir -u $(id -u):$(id -g) $DOCKER_IMAGE \
          sheets2linkml --gsheet-id 1zcyNKuhkpH-0FqEGSt6UwHAiSYzsUUSkHYcDOYz67zI \
          --name EVORA Prefixes Schema CompleteList ClassesDetails PropertiesDetails PropertiesDomains AllowedValues \
          -o models/evora_schema.yaml

      - uses: actions/upload-artifact@v4
        with:
          name: evora-schema.yaml
          path: models/evora_schema.yaml
          compression-level: 9 # maximum compression

      # Using independant generators of interest to benefit from initial configuration compared to project generator

      # Generate owl ahead of project generation to avoid inclusion of linkml datatypes in owl and keep artifact
      - name: Generate project owl ttl file with LinkML
        run: |
          docker run --rm -v $(pwd):/workdir -u $(id -u):$(id -g) $DOCKER_IMAGE \
          linkml generate owl --no-use-native-uris --ontology-uri-suffix evorao.owl.ttl models/evora_schema.yaml > models/owl/evora_ontology.owl.ttl

      - uses: actions/upload-artifact@v4
        with:
          name: evora-ontology.owl.ttl
          path: models/owl/evora_ontology.owl.ttl
          compression-level: 9 # maximum compression

      # Generate docs ahead of project generation to benefit from initial generator configuration, avoid linkml datatypes inclusion and keep artifacts
      - name: Generate project doc files with LinkML
        run: |
          rm -rf models/docs/*
          docker run --rm -v $(pwd):/workdir -u $(id -u):$(id -g) $DOCKER_IMAGE \
          linkml generate doc -d models/docs models/evora_schema.yaml


      - uses: actions/upload-artifact@v4
        with:
          name: evora-schema-docs
          path: models/docs/
          compression-level: 9 # maximum compression

      # Generate the other project subsidiary models using independant generators without keeping artifacts
      - name: Generate subsidiary project models with LinkML independant generators
        run: |
          SUBPATH='models/subsidiary_models'
          mkdir -p $SUBPATH $SUBPATH/excel $SUBPATH/graphql $SUBPATH/jsonld $SUBPATH/sqlschema \
                   $SUBPATH/prefixmap $SUBPATH/pydantic $SUBPATH/rdf $SUBPATH/shex \
                   $SUBPATH/sqlalchemy $SUBPATH/go $SUBPATH/java $SUBPATH/jsonschema \
                   $SUBPATH/protobuf $SUBPATH/python $SUBPATH/shacl $SUBPATH/sparql
          docker run --rm -v $(pwd):/workdir -u $(id -u):$(id -g) $DOCKER_IMAGE \
          linkml generate jsonld-context models/evora_schema.yaml > models/subsidiary_models/jsonld/evora_schema.context.jsonld
          docker run --rm -v $(pwd):/workdir -u $(id -u):$(id -g) $DOCKER_IMAGE \
          linkml generate jsonld models/evora_schema.yaml > models/subsidiary_models/jsonld/evora_schema.jsonld
          docker run --rm -v $(pwd):/workdir -u $(id -u):$(id -g) $DOCKER_IMAGE \
          linkml generate jsonld-context models/evora_schema.yaml > models/subsidiary_models/jsonschema/evora_schema.schema.json
          docker run --rm -v $(pwd):/workdir -u $(id -u):$(id -g) $DOCKER_IMAGE \
          linkml generate python models/evora_schema.yaml > models/subsidiary_models/python/evora_schema.py
          docker run --rm -v $(pwd):/workdir -u $(id -u):$(id -g) $DOCKER_IMAGE \
          linkml generate excel -o models/subsidiary_models/excel/evora_schema.xlsx models/evora_schema.yaml
          docker run --rm -v $(pwd):/workdir -u $(id -u):$(id -g) $DOCKER_IMAGE \
          linkml generate graphql models/evora_schema.yaml > models/subsidiary_models/graphql/evora_schema.graphql
          docker run --rm -v $(pwd):/workdir -u $(id -u):$(id -g) $DOCKER_IMAGE \
          linkml generate prefix-map -o models/subsidiary_models/prefixmap/evora_schema_prefixes.yaml models/evora_schema.yaml
          docker run --rm -v $(pwd):/workdir -u $(id -u):$(id -g) $DOCKER_IMAGE \
          linkml generate proto models/evora_schema.yaml > models/subsidiary_models/protobuf/evora_schema.proto
          docker run --rm -v $(pwd):/workdir -u $(id -u):$(id -g) $DOCKER_IMAGE \
          linkml generate shacl models/evora_schema.yaml > models/subsidiary_models/shacl/evora_schema.shacl.ttl
          docker run --rm -v $(pwd):/workdir -u $(id -u):$(id -g) $DOCKER_IMAGE \
          linkml generate shex models/evora_schema.yaml > models/subsidiary_models/shex/evora_schema.shex
          docker run --rm -v $(pwd):/workdir -u $(id -u):$(id -g) $DOCKER_IMAGE \
          linkml generate sqltables models/evora_schema.yaml > models/subsidiary_models/sqlschema/evora_schema.sql
          docker run --rm -v $(pwd):/workdir -u $(id -u):$(id -g) $DOCKER_IMAGE \
          linkml generate golang --log_level ERROR models/evora_schema.yaml > models/subsidiary_models/go/evora_schema.go
          rm -f models/subsidiary_models/java/*
          docker run --rm -v $(pwd):/workdir -u $(id -u):$(id -g) $DOCKER_IMAGE \
          linkml generate java --output-directory models/subsidiary_models/java/  models/evora_schema.yaml
          docker run --rm -v $(pwd):/workdir -u $(id -u):$(id -g) $DOCKER_IMAGE \
          linkml generate rdf -f xml --metadata --useuris models/evora_schema.yaml > models/subsidiary_models/rdf/evora_schema.rdf
          rm -f models/subsidiary_models/sparql/*
          docker run --rm -v $(pwd):/workdir -u $(id -u):$(id -g) $DOCKER_IMAGE \
          linkml generate sparql -d models/subsidiary_models/sparql/ models/evora_schema.yaml
          docker run --rm -v $(pwd):/workdir -u $(id -u):$(id -g) $DOCKER_IMAGE \
          linkml generate sqla models/evora_schema.yaml > models/subsidiary_models/sqlalchemy/evora_schema.sqla
          docker run --rm -v $(pwd):/workdir -u $(id -u):$(id -g) $DOCKER_IMAGE \
          linkml generate pydantic --meta AUTO models/evora_schema.yaml > models/subsidiary_models/pydantic/evora_schema.py



      - name: GIT commit and push all changed files
        env:
          CI_COMMIT_MESSAGE: "CI Build: Synchronisation of the project's models with the google sheet metadata version  ${{ inputs.version}}"
          USER_COMMIT_MESSAGE: ${{inputs.commitMessage}}
          CI_COMMIT_AUTHOR: GithubAction CI
        run: |
          git config --global user.name "${{ env.CI_COMMIT_AUTHOR }}"
          git config --global user.email "username@users.noreply.github.com"
          git add -A
          git commit -m "${{ env.CI_COMMIT_MESSAGE }}" -m "${{ env.USER_COMMIT_MESSAGE }}"
          git push

