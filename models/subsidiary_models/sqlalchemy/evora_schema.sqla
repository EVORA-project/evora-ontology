
from sqlalchemy import Column, Index, Table, ForeignKey
from sqlalchemy.orm import relationship
from sqlalchemy.sql.sqltypes import *
from sqlalchemy.orm import declarative_base
from sqlalchemy.ext.associationproxy import association_proxy

Base = declarative_base()
metadata = Base.metadata


class Resource(Base):
    """
    Resource published or curated by a single agent
    """
    __tablename__ = 'Resource'

    id = Column(Integer(), primary_key=True, autoincrement=True , nullable=False )
    dateIssued = Column(DateTime())
    dateModified = Column(DateTime())
    
    
    keyword_rel = relationship( "ResourceKeyword" )
    keyword = association_proxy("keyword_rel", "keyword",
                                  creator=lambda x_: ResourceKeyword(keyword=x_))
    

    def __repr__(self):
        return f"Resource(id={self.id},dateIssued={self.dateIssued},dateModified={self.dateModified},)"



    


class ResourceKeyword(Base):
    """
    
    """
    __tablename__ = 'Resource_keyword'

    Resource_id = Column(Integer(), ForeignKey('Resource.id'), primary_key=True)
    keyword = Column(Text(), primary_key=True)
    

    def __repr__(self):
        return f"Resource_keyword(Resource_id={self.Resource_id},keyword={self.keyword},)"



    


class DatasetKeyword(Base):
    """
    
    """
    __tablename__ = 'Dataset_keyword'

    Dataset_id = Column(Integer(), ForeignKey('Dataset.id'), primary_key=True)
    keyword = Column(Text(), primary_key=True)
    

    def __repr__(self):
        return f"Dataset_keyword(Dataset_id={self.Dataset_id},keyword={self.keyword},)"



    


class DataServiceServesDataset(Base):
    """
    
    """
    __tablename__ = 'DataService_servesDataset'

    DataService_id = Column(Integer(), ForeignKey('DataService.id'), primary_key=True)
    servesDataset_id = Column(Integer(), ForeignKey('Dataset.id'), primary_key=True)
    

    def __repr__(self):
        return f"DataService_servesDataset(DataService_id={self.DataService_id},servesDataset_id={self.servesDataset_id},)"



    


class DataServiceKeyword(Base):
    """
    
    """
    __tablename__ = 'DataService_keyword'

    DataService_id = Column(Integer(), ForeignKey('DataService.id'), primary_key=True)
    keyword = Column(Text(), primary_key=True)
    

    def __repr__(self):
        return f"DataService_keyword(DataService_id={self.DataService_id},keyword={self.keyword},)"



    


class VersionResource(Base):
    """
    
    """
    __tablename__ = 'Version_resource'

    Version_id = Column(Integer(), ForeignKey('Version.id'), primary_key=True)
    resource_id = Column(Integer(), ForeignKey('Resource.id'), primary_key=True)
    

    def __repr__(self):
        return f"Version_resource(Version_id={self.Version_id},resource_id={self.resource_id},)"



    


class VersionKeyword(Base):
    """
    
    """
    __tablename__ = 'Version_keyword'

    Version_id = Column(Integer(), ForeignKey('Version.id'), primary_key=True)
    keyword = Column(Text(), primary_key=True)
    

    def __repr__(self):
        return f"Version_keyword(Version_id={self.Version_id},keyword={self.keyword},)"



    


class CatalogueKeyword(Base):
    """
    
    """
    __tablename__ = 'Catalogue_keyword'

    Catalogue_id = Column(Integer(), ForeignKey('Catalogue.id'), primary_key=True)
    keyword = Column(Text(), primary_key=True)
    

    def __repr__(self):
        return f"Catalogue_keyword(Catalogue_id={self.Catalogue_id},keyword={self.keyword},)"



    


class TaxonomyTaxon(Base):
    """
    
    """
    __tablename__ = 'Taxonomy_taxon'

    Taxonomy_id = Column(Integer(), ForeignKey('Taxonomy.id'), primary_key=True)
    taxon_id = Column(Integer(), ForeignKey('Taxon.id'), primary_key=True)
    

    def __repr__(self):
        return f"Taxonomy_taxon(Taxonomy_id={self.Taxonomy_id},taxon_id={self.taxon_id},)"



    


class TaxonomyRank(Base):
    """
    
    """
    __tablename__ = 'Taxonomy_rank'

    Taxonomy_id = Column(Integer(), ForeignKey('Taxonomy.id'), primary_key=True)
    rank_id = Column(Integer(), ForeignKey('TaxonomicRank.id'), primary_key=True)
    

    def __repr__(self):
        return f"Taxonomy_rank(Taxonomy_id={self.Taxonomy_id},rank_id={self.rank_id},)"



    


class TaxonomyKeyword(Base):
    """
    
    """
    __tablename__ = 'Taxonomy_keyword'

    Taxonomy_id = Column(Integer(), ForeignKey('Taxonomy.id'), primary_key=True)
    keyword = Column(Text(), primary_key=True)
    

    def __repr__(self):
        return f"Taxonomy_keyword(Taxonomy_id={self.Taxonomy_id},keyword={self.keyword},)"



    


class DataProviderProvidedEntityType(Base):
    """
    
    """
    __tablename__ = 'DataProvider_providedEntityType'

    DataProvider_id = Column(Integer(), ForeignKey('DataProvider.id'), primary_key=True)
    providedEntityType = Column(Text(), primary_key=True, nullable=False )
    

    def __repr__(self):
        return f"DataProvider_providedEntityType(DataProvider_id={self.DataProvider_id},providedEntityType={self.providedEntityType},)"



    


class DataProviderServesDataset(Base):
    """
    
    """
    __tablename__ = 'DataProvider_servesDataset'

    DataProvider_id = Column(Integer(), ForeignKey('DataProvider.id'), primary_key=True)
    servesDataset_id = Column(Integer(), ForeignKey('Dataset.id'), primary_key=True)
    

    def __repr__(self):
        return f"DataProvider_servesDataset(DataProvider_id={self.DataProvider_id},servesDataset_id={self.servesDataset_id},)"



    


class DataProviderKeyword(Base):
    """
    
    """
    __tablename__ = 'DataProvider_keyword'

    DataProvider_id = Column(Integer(), ForeignKey('DataProvider.id'), primary_key=True)
    keyword = Column(Text(), primary_key=True)
    

    def __repr__(self):
        return f"DataProvider_keyword(DataProvider_id={self.DataProvider_id},keyword={self.keyword},)"



    


class PathogenIdentificationHostType(Base):
    """
    
    """
    __tablename__ = 'PathogenIdentification_hostType'

    PathogenIdentification_id = Column(Integer(), ForeignKey('PathogenIdentification.id'), primary_key=True)
    hostType = Column(Text(), primary_key=True)
    

    def __repr__(self):
        return f"PathogenIdentification_hostType(PathogenIdentification_id={self.PathogenIdentification_id},hostType={self.hostType},)"



    


class PathogenIdentificationKeyword(Base):
    """
    
    """
    __tablename__ = 'PathogenIdentification_keyword'

    PathogenIdentification_id = Column(Integer(), ForeignKey('PathogenIdentification.id'), primary_key=True)
    keyword = Column(Text(), primary_key=True)
    

    def __repr__(self):
        return f"PathogenIdentification_keyword(PathogenIdentification_id={self.PathogenIdentification_id},keyword={self.keyword},)"



    


class PublicationKeyword(Base):
    """
    
    """
    __tablename__ = 'Publication_keyword'

    Publication_id = Column(Integer(), ForeignKey('Publication.id'), primary_key=True)
    keyword = Column(Text(), primary_key=True)
    

    def __repr__(self):
        return f"Publication_keyword(Publication_id={self.Publication_id},keyword={self.keyword},)"



    


class VocabularyTerm(Base):
    """
    
    """
    __tablename__ = 'Vocabulary_term'

    Vocabulary_id = Column(Integer(), ForeignKey('Vocabulary.id'), primary_key=True)
    term_id = Column(Integer(), ForeignKey('Term.id'), primary_key=True)
    

    def __repr__(self):
        return f"Vocabulary_term(Vocabulary_id={self.Vocabulary_id},term_id={self.term_id},)"



    


class VocabularyKeyword(Base):
    """
    
    """
    __tablename__ = 'Vocabulary_keyword'

    Vocabulary_id = Column(Integer(), ForeignKey('Vocabulary.id'), primary_key=True)
    keyword = Column(Text(), primary_key=True)
    

    def __repr__(self):
        return f"Vocabulary_keyword(Vocabulary_id={self.Vocabulary_id},keyword={self.keyword},)"



    


class TermKeyword(Base):
    """
    
    """
    __tablename__ = 'Term_keyword'

    Term_id = Column(Integer(), ForeignKey('Term.id'), primary_key=True)
    keyword = Column(Text(), primary_key=True)
    

    def __repr__(self):
        return f"Term_keyword(Term_id={self.Term_id},keyword={self.keyword},)"



    


class CommonNameAlternateName(Base):
    """
    
    """
    __tablename__ = 'CommonName_alternateName'

    CommonName_id = Column(Integer(), ForeignKey('CommonName.id'), primary_key=True)
    alternateName_id = Column(Integer(), ForeignKey('AlternateName.id'), primary_key=True)
    

    def __repr__(self):
        return f"CommonName_alternateName(CommonName_id={self.CommonName_id},alternateName_id={self.alternateName_id},)"



    


class CommonNameSourceOfInformation(Base):
    """
    
    """
    __tablename__ = 'CommonName_sourceOfInformation'

    CommonName_id = Column(Integer(), ForeignKey('CommonName.id'), primary_key=True)
    sourceOfInformation = Column(Text(), primary_key=True)
    

    def __repr__(self):
        return f"CommonName_sourceOfInformation(CommonName_id={self.CommonName_id},sourceOfInformation={self.sourceOfInformation},)"



    


class CommonNameKeyword(Base):
    """
    
    """
    __tablename__ = 'CommonName_keyword'

    CommonName_id = Column(Integer(), ForeignKey('CommonName.id'), primary_key=True)
    keyword = Column(Text(), primary_key=True)
    

    def __repr__(self):
        return f"CommonName_keyword(CommonName_id={self.CommonName_id},keyword={self.keyword},)"



    


class VirusNameAlternateName(Base):
    """
    
    """
    __tablename__ = 'VirusName_alternateName'

    VirusName_id = Column(Integer(), ForeignKey('VirusName.id'), primary_key=True)
    alternateName_id = Column(Integer(), ForeignKey('AlternateName.id'), primary_key=True)
    

    def __repr__(self):
        return f"VirusName_alternateName(VirusName_id={self.VirusName_id},alternateName_id={self.alternateName_id},)"



    


class VirusNameSourceOfInformation(Base):
    """
    
    """
    __tablename__ = 'VirusName_sourceOfInformation'

    VirusName_id = Column(Integer(), ForeignKey('VirusName.id'), primary_key=True)
    sourceOfInformation = Column(Text(), primary_key=True)
    

    def __repr__(self):
        return f"VirusName_sourceOfInformation(VirusName_id={self.VirusName_id},sourceOfInformation={self.sourceOfInformation},)"



    


class VirusNameKeyword(Base):
    """
    
    """
    __tablename__ = 'VirusName_keyword'

    VirusName_id = Column(Integer(), ForeignKey('VirusName.id'), primary_key=True)
    keyword = Column(Text(), primary_key=True)
    

    def __repr__(self):
        return f"VirusName_keyword(VirusName_id={self.VirusName_id},keyword={self.keyword},)"



    


class AlternateNameAlternateName(Base):
    """
    
    """
    __tablename__ = 'AlternateName_alternateName'

    AlternateName_id = Column(Integer(), ForeignKey('AlternateName.id'), primary_key=True)
    alternateName_id = Column(Integer(), ForeignKey('AlternateName.id'), primary_key=True)
    

    def __repr__(self):
        return f"AlternateName_alternateName(AlternateName_id={self.AlternateName_id},alternateName_id={self.alternateName_id},)"



    


class AlternateNameSourceOfInformation(Base):
    """
    
    """
    __tablename__ = 'AlternateName_sourceOfInformation'

    AlternateName_id = Column(Integer(), ForeignKey('AlternateName.id'), primary_key=True)
    sourceOfInformation = Column(Text(), primary_key=True)
    

    def __repr__(self):
        return f"AlternateName_sourceOfInformation(AlternateName_id={self.AlternateName_id},sourceOfInformation={self.sourceOfInformation},)"



    


class AlternateNameKeyword(Base):
    """
    
    """
    __tablename__ = 'AlternateName_keyword'

    AlternateName_id = Column(Integer(), ForeignKey('AlternateName.id'), primary_key=True)
    keyword = Column(Text(), primary_key=True)
    

    def __repr__(self):
        return f"AlternateName_keyword(AlternateName_id={self.AlternateName_id},keyword={self.keyword},)"



    


class RiskGroupKeyword(Base):
    """
    
    """
    __tablename__ = 'RiskGroup_keyword'

    RiskGroup_id = Column(Integer(), ForeignKey('RiskGroup.id'), primary_key=True)
    keyword = Column(Text(), primary_key=True)
    

    def __repr__(self):
        return f"RiskGroup_keyword(RiskGroup_id={self.RiskGroup_id},keyword={self.keyword},)"



    


class DoiKeyword(Base):
    """
    
    """
    __tablename__ = 'Doi_keyword'

    Doi_id = Column(Integer(), ForeignKey('Doi.id'), primary_key=True)
    keyword = Column(Text(), primary_key=True)
    

    def __repr__(self):
        return f"Doi_keyword(Doi_id={self.Doi_id},keyword={self.keyword},)"



    


class JournalKeyword(Base):
    """
    
    """
    __tablename__ = 'Journal_keyword'

    Journal_id = Column(Integer(), ForeignKey('Journal.id'), primary_key=True)
    keyword = Column(Text(), primary_key=True)
    

    def __repr__(self):
        return f"Journal_keyword(Journal_id={self.Journal_id},keyword={self.keyword},)"



    


class PdbReferenceKeyword(Base):
    """
    
    """
    __tablename__ = 'PdbReference_keyword'

    PdbReference_id = Column(Integer(), ForeignKey('PdbReference.id'), primary_key=True)
    keyword = Column(Text(), primary_key=True)
    

    def __repr__(self):
        return f"PdbReference_keyword(PdbReference_id={self.PdbReference_id},keyword={self.keyword},)"



    


class KeywordKeyword(Base):
    """
    
    """
    __tablename__ = 'Keyword_keyword'

    Keyword_id = Column(Integer(), ForeignKey('Keyword.id'), primary_key=True)
    keyword = Column(Text(), primary_key=True)
    

    def __repr__(self):
        return f"Keyword_keyword(Keyword_id={self.Keyword_id},keyword={self.keyword},)"



    


class TagSequenceKeyword(Base):
    """
    
    """
    __tablename__ = 'TagSequence_keyword'

    TagSequence_id = Column(Integer(), ForeignKey('TagSequence.id'), primary_key=True)
    keyword = Column(Text(), primary_key=True)
    

    def __repr__(self):
        return f"TagSequence_keyword(TagSequence_id={self.TagSequence_id},keyword={self.keyword},)"



    


class SpecialFeatureKeyword(Base):
    """
    
    """
    __tablename__ = 'SpecialFeature_keyword'

    SpecialFeature_id = Column(Integer(), ForeignKey('SpecialFeature.id'), primary_key=True)
    keyword = Column(Text(), primary_key=True)
    

    def __repr__(self):
        return f"SpecialFeature_keyword(SpecialFeature_id={self.SpecialFeature_id},keyword={self.keyword},)"



    


class ExpressionVectorKeyword(Base):
    """
    
    """
    __tablename__ = 'ExpressionVector_keyword'

    ExpressionVector_id = Column(Integer(), ForeignKey('ExpressionVector.id'), primary_key=True)
    keyword = Column(Text(), primary_key=True)
    

    def __repr__(self):
        return f"ExpressionVector_keyword(ExpressionVector_id={self.ExpressionVector_id},keyword={self.keyword},)"



    


class PlasmidSelectionKeyword(Base):
    """
    
    """
    __tablename__ = 'PlasmidSelection_keyword'

    PlasmidSelection_id = Column(Integer(), ForeignKey('PlasmidSelection.id'), primary_key=True)
    keyword = Column(Text(), primary_key=True)
    

    def __repr__(self):
        return f"PlasmidSelection_keyword(PlasmidSelection_id={self.PlasmidSelection_id},keyword={self.keyword},)"



    


class PropagationHostKeyword(Base):
    """
    
    """
    __tablename__ = 'PropagationHost_keyword'

    PropagationHost_id = Column(Integer(), ForeignKey('PropagationHost.id'), primary_key=True)
    keyword = Column(Text(), primary_key=True)
    

    def __repr__(self):
        return f"PropagationHost_keyword(PropagationHost_id={self.PropagationHost_id},keyword={self.keyword},)"



    


class TransmissionMethodKeyword(Base):
    """
    
    """
    __tablename__ = 'TransmissionMethod_keyword'

    TransmissionMethod_id = Column(Integer(), ForeignKey('TransmissionMethod.id'), primary_key=True)
    keyword = Column(Text(), primary_key=True)
    

    def __repr__(self):
        return f"TransmissionMethod_keyword(TransmissionMethod_id={self.TransmissionMethod_id},keyword={self.keyword},)"



    


class ProductionCellLineKeyword(Base):
    """
    
    """
    __tablename__ = 'ProductionCellLine_keyword'

    ProductionCellLine_id = Column(Integer(), ForeignKey('ProductionCellLine.id'), primary_key=True)
    keyword = Column(Text(), primary_key=True)
    

    def __repr__(self):
        return f"ProductionCellLine_keyword(ProductionCellLine_id={self.ProductionCellLine_id},keyword={self.keyword},)"



    


class ProductCategoryKeyword(Base):
    """
    
    """
    __tablename__ = 'ProductCategory_keyword'

    ProductCategory_id = Column(Integer(), ForeignKey('ProductCategory.id'), primary_key=True)
    keyword = Column(Text(), primary_key=True)
    

    def __repr__(self):
        return f"ProductCategory_keyword(ProductCategory_id={self.ProductCategory_id},keyword={self.keyword},)"



    


class IsolationHostKeyword(Base):
    """
    
    """
    __tablename__ = 'IsolationHost_keyword'

    IsolationHost_id = Column(Integer(), ForeignKey('IsolationHost.id'), primary_key=True)
    keyword = Column(Text(), primary_key=True)
    

    def __repr__(self):
        return f"IsolationHost_keyword(IsolationHost_id={self.IsolationHost_id},keyword={self.keyword},)"



    


class GeographicalOriginKeyword(Base):
    """
    
    """
    __tablename__ = 'GeographicalOrigin_keyword'

    GeographicalOrigin_id = Column(Integer(), ForeignKey('GeographicalOrigin.id'), primary_key=True)
    keyword = Column(Text(), primary_key=True)
    

    def __repr__(self):
        return f"GeographicalOrigin_keyword(GeographicalOrigin_id={self.GeographicalOrigin_id},keyword={self.keyword},)"



    


class IplcOriginKeyword(Base):
    """
    
    """
    __tablename__ = 'IplcOrigin_keyword'

    IplcOrigin_id = Column(Integer(), ForeignKey('IplcOrigin.id'), primary_key=True)
    keyword = Column(Text(), primary_key=True)
    

    def __repr__(self):
        return f"IplcOrigin_keyword(IplcOrigin_id={self.IplcOrigin_id},keyword={self.keyword},)"



    


class CountryKeyword(Base):
    """
    
    """
    __tablename__ = 'Country_keyword'

    Country_id = Column(Integer(), ForeignKey('Country.id'), primary_key=True)
    keyword = Column(Text(), primary_key=True)
    

    def __repr__(self):
        return f"Country_keyword(Country_id={self.Country_id},keyword={self.keyword},)"



    


class IataClassificationKeyword(Base):
    """
    
    """
    __tablename__ = 'IataClassification_keyword'

    IataClassification_id = Column(Integer(), ForeignKey('IataClassification.id'), primary_key=True)
    keyword = Column(Text(), primary_key=True)
    

    def __repr__(self):
        return f"IataClassification_keyword(IataClassification_id={self.IataClassification_id},keyword={self.keyword},)"



    


class VariantAlternateName(Base):
    """
    
    """
    __tablename__ = 'Variant_alternateName'

    Variant_id = Column(Integer(), ForeignKey('Variant.id'), primary_key=True)
    alternateName_id = Column(Integer(), ForeignKey('AlternateName.id'), primary_key=True)
    

    def __repr__(self):
        return f"Variant_alternateName(Variant_id={self.Variant_id},alternateName_id={self.alternateName_id},)"



    


class VariantSourceOfInformation(Base):
    """
    
    """
    __tablename__ = 'Variant_sourceOfInformation'

    Variant_id = Column(Integer(), ForeignKey('Variant.id'), primary_key=True)
    sourceOfInformation = Column(Text(), primary_key=True)
    

    def __repr__(self):
        return f"Variant_sourceOfInformation(Variant_id={self.Variant_id},sourceOfInformation={self.sourceOfInformation},)"



    


class VariantKeyword(Base):
    """
    
    """
    __tablename__ = 'Variant_keyword'

    Variant_id = Column(Integer(), ForeignKey('Variant.id'), primary_key=True)
    keyword = Column(Text(), primary_key=True)
    

    def __repr__(self):
        return f"Variant_keyword(Variant_id={self.Variant_id},keyword={self.keyword},)"



    


class TaxonomicRankTaxonomy(Base):
    """
    
    """
    __tablename__ = 'TaxonomicRank_taxonomy'

    TaxonomicRank_id = Column(Integer(), ForeignKey('TaxonomicRank.id'), primary_key=True)
    taxonomy_id = Column(Integer(), ForeignKey('Taxonomy.id'), primary_key=True)
    

    def __repr__(self):
        return f"TaxonomicRank_taxonomy(TaxonomicRank_id={self.TaxonomicRank_id},taxonomy_id={self.taxonomy_id},)"



    


class TaxonomicRankKeyword(Base):
    """
    
    """
    __tablename__ = 'TaxonomicRank_keyword'

    TaxonomicRank_id = Column(Integer(), ForeignKey('TaxonomicRank.id'), primary_key=True)
    keyword = Column(Text(), primary_key=True)
    

    def __repr__(self):
        return f"TaxonomicRank_keyword(TaxonomicRank_id={self.TaxonomicRank_id},keyword={self.keyword},)"



    


class TaxonTaxonomy(Base):
    """
    
    """
    __tablename__ = 'Taxon_taxonomy'

    Taxon_id = Column(Integer(), ForeignKey('Taxon.id'), primary_key=True)
    taxonomy_id = Column(Integer(), ForeignKey('Taxonomy.id'), primary_key=True)
    

    def __repr__(self):
        return f"Taxon_taxonomy(Taxon_id={self.Taxon_id},taxonomy_id={self.taxonomy_id},)"



    


class TaxonPreviouslyKnownAs(Base):
    """
    
    """
    __tablename__ = 'Taxon_previouslyKnownAs'

    Taxon_id = Column(Integer(), ForeignKey('Taxon.id'), primary_key=True)
    previouslyKnownAs_id = Column(Integer(), ForeignKey('Taxon.id'), primary_key=True)
    

    def __repr__(self):
        return f"Taxon_previouslyKnownAs(Taxon_id={self.Taxon_id},previouslyKnownAs_id={self.previouslyKnownAs_id},)"



    


class TaxonExternalEquivalentTaxon(Base):
    """
    
    """
    __tablename__ = 'Taxon_externalEquivalentTaxon'

    Taxon_id = Column(Integer(), ForeignKey('Taxon.id'), primary_key=True)
    externalEquivalentTaxon_id = Column(Integer(), ForeignKey('Taxon.id'), primary_key=True)
    

    def __repr__(self):
        return f"Taxon_externalEquivalentTaxon(Taxon_id={self.Taxon_id},externalEquivalentTaxon_id={self.externalEquivalentTaxon_id},)"



    


class TaxonKeyword(Base):
    """
    
    """
    __tablename__ = 'Taxon_keyword'

    Taxon_id = Column(Integer(), ForeignKey('Taxon.id'), primary_key=True)
    keyword = Column(Text(), primary_key=True)
    

    def __repr__(self):
        return f"Taxon_keyword(Taxon_id={self.Taxon_id},keyword={self.keyword},)"



    


class ExternalRelatedReferenceKeyword(Base):
    """
    
    """
    __tablename__ = 'ExternalRelatedReference_keyword'

    ExternalRelatedReference_id = Column(Integer(), ForeignKey('ExternalRelatedReference.id'), primary_key=True)
    keyword = Column(Text(), primary_key=True)
    

    def __repr__(self):
        return f"ExternalRelatedReference_keyword(ExternalRelatedReference_id={self.ExternalRelatedReference_id},keyword={self.keyword},)"



    


class SequenceSequenceReference(Base):
    """
    
    """
    __tablename__ = 'Sequence_sequenceReference'

    Sequence_id = Column(Integer(), ForeignKey('Sequence.id'), primary_key=True)
    sequenceReference_id = Column(Integer(), ForeignKey('SequenceReference.id'), primary_key=True)
    

    def __repr__(self):
        return f"Sequence_sequenceReference(Sequence_id={self.Sequence_id},sequenceReference_id={self.sequenceReference_id},)"



    


class SequenceKeyword(Base):
    """
    
    """
    __tablename__ = 'Sequence_keyword'

    Sequence_id = Column(Integer(), ForeignKey('Sequence.id'), primary_key=True)
    keyword = Column(Text(), primary_key=True)
    

    def __repr__(self):
        return f"Sequence_keyword(Sequence_id={self.Sequence_id},keyword={self.keyword},)"



    


class SequenceReferenceKeyword(Base):
    """
    
    """
    __tablename__ = 'SequenceReference_keyword'

    SequenceReference_id = Column(Integer(), ForeignKey('SequenceReference.id'), primary_key=True)
    keyword = Column(Text(), primary_key=True)
    

    def __repr__(self):
        return f"SequenceReference_keyword(SequenceReference_id={self.SequenceReference_id},keyword={self.keyword},)"



    


class PersonOrOrganizationKeyword(Base):
    """
    
    """
    __tablename__ = 'PersonOrOrganization_keyword'

    PersonOrOrganization_id = Column(Integer(), ForeignKey('PersonOrOrganization.id'), primary_key=True)
    keyword = Column(Text(), primary_key=True)
    

    def __repr__(self):
        return f"PersonOrOrganization_keyword(PersonOrOrganization_id={self.PersonOrOrganization_id},keyword={self.keyword},)"



    


class PersonKeyword(Base):
    """
    
    """
    __tablename__ = 'Person_keyword'

    Person_id = Column(Integer(), ForeignKey('Person.id'), primary_key=True)
    keyword = Column(Text(), primary_key=True)
    

    def __repr__(self):
        return f"Person_keyword(Person_id={self.Person_id},keyword={self.keyword},)"



    


class OrganizationAlternateName(Base):
    """
    
    """
    __tablename__ = 'Organization_alternateName'

    Organization_id = Column(Integer(), ForeignKey('Organization.id'), primary_key=True)
    alternateName_id = Column(Integer(), ForeignKey('AlternateName.id'), primary_key=True)
    

    def __repr__(self):
        return f"Organization_alternateName(Organization_id={self.Organization_id},alternateName_id={self.alternateName_id},)"



    


class OrganizationKeyword(Base):
    """
    
    """
    __tablename__ = 'Organization_keyword'

    Organization_id = Column(Integer(), ForeignKey('Organization.id'), primary_key=True)
    keyword = Column(Text(), primary_key=True)
    

    def __repr__(self):
        return f"Organization_keyword(Organization_id={self.Organization_id},keyword={self.keyword},)"



    


class ReasearchInfrastructureAlternateName(Base):
    """
    
    """
    __tablename__ = 'ReasearchInfrastructure_alternateName'

    ReasearchInfrastructure_id = Column(Integer(), ForeignKey('ReasearchInfrastructure.id'), primary_key=True)
    alternateName_id = Column(Integer(), ForeignKey('AlternateName.id'), primary_key=True)
    

    def __repr__(self):
        return f"ReasearchInfrastructure_alternateName(ReasearchInfrastructure_id={self.ReasearchInfrastructure_id},alternateName_id={self.alternateName_id},)"



    


class ReasearchInfrastructureKeyword(Base):
    """
    
    """
    __tablename__ = 'ReasearchInfrastructure_keyword'

    ReasearchInfrastructure_id = Column(Integer(), ForeignKey('ReasearchInfrastructure.id'), primary_key=True)
    keyword = Column(Text(), primary_key=True)
    

    def __repr__(self):
        return f"ReasearchInfrastructure_keyword(ReasearchInfrastructure_id={self.ReasearchInfrastructure_id},keyword={self.keyword},)"



    


class ProviderMemberOfRi(Base):
    """
    
    """
    __tablename__ = 'Provider_memberOfRi'

    Provider_id = Column(Integer(), ForeignKey('Provider.id'), primary_key=True)
    memberOfRi_id = Column(Integer(), ForeignKey('ReasearchInfrastructure.id'), primary_key=True)
    

    def __repr__(self):
        return f"Provider_memberOfRi(Provider_id={self.Provider_id},memberOfRi_id={self.memberOfRi_id},)"



    


class ProviderAlternateName(Base):
    """
    
    """
    __tablename__ = 'Provider_alternateName'

    Provider_id = Column(Integer(), ForeignKey('Provider.id'), primary_key=True)
    alternateName_id = Column(Integer(), ForeignKey('AlternateName.id'), primary_key=True)
    

    def __repr__(self):
        return f"Provider_alternateName(Provider_id={self.Provider_id},alternateName_id={self.alternateName_id},)"



    


class ProviderKeyword(Base):
    """
    
    """
    __tablename__ = 'Provider_keyword'

    Provider_id = Column(Integer(), ForeignKey('Provider.id'), primary_key=True)
    keyword = Column(Text(), primary_key=True)
    

    def __repr__(self):
        return f"Provider_keyword(Provider_id={self.Provider_id},keyword={self.keyword},)"



    


class OriginatorKeyword(Base):
    """
    
    """
    __tablename__ = 'Originator_keyword'

    Originator_id = Column(Integer(), ForeignKey('Originator.id'), primary_key=True)
    keyword = Column(Text(), primary_key=True)
    

    def __repr__(self):
        return f"Originator_keyword(Originator_id={self.Originator_id},keyword={self.keyword},)"



    


class BiologicalMaterialOriginBiologicalPartOrigin(Base):
    """
    
    """
    __tablename__ = 'BiologicalMaterialOrigin_biologicalPartOrigin'

    BiologicalMaterialOrigin_id = Column(Integer(), ForeignKey('BiologicalMaterialOrigin.id'), primary_key=True)
    biologicalPartOrigin_id = Column(Integer(), ForeignKey('BiologicalPartOrigin.id'), primary_key=True, nullable=False )
    

    def __repr__(self):
        return f"BiologicalMaterialOrigin_biologicalPartOrigin(BiologicalMaterialOrigin_id={self.BiologicalMaterialOrigin_id},biologicalPartOrigin_id={self.biologicalPartOrigin_id},)"



    


class BiologicalMaterialOriginKeyword(Base):
    """
    
    """
    __tablename__ = 'BiologicalMaterialOrigin_keyword'

    BiologicalMaterialOrigin_id = Column(Integer(), ForeignKey('BiologicalMaterialOrigin.id'), primary_key=True)
    keyword = Column(Text(), primary_key=True)
    

    def __repr__(self):
        return f"BiologicalMaterialOrigin_keyword(BiologicalMaterialOrigin_id={self.BiologicalMaterialOrigin_id},keyword={self.keyword},)"



    


class BiologicalPartOriginKeyword(Base):
    """
    
    """
    __tablename__ = 'BiologicalPartOrigin_keyword'

    BiologicalPartOrigin_id = Column(Integer(), ForeignKey('BiologicalPartOrigin.id'), primary_key=True)
    keyword = Column(Text(), primary_key=True)
    

    def __repr__(self):
        return f"BiologicalPartOrigin_keyword(BiologicalPartOrigin_id={self.BiologicalPartOrigin_id},keyword={self.keyword},)"



    


class NaturalPartOriginKeyword(Base):
    """
    
    """
    __tablename__ = 'NaturalPartOrigin_keyword'

    NaturalPartOrigin_id = Column(Integer(), ForeignKey('NaturalPartOrigin.id'), primary_key=True)
    keyword = Column(Text(), primary_key=True)
    

    def __repr__(self):
        return f"NaturalPartOrigin_keyword(NaturalPartOrigin_id={self.NaturalPartOrigin_id},keyword={self.keyword},)"



    


class SyntheticPartOriginKeyword(Base):
    """
    
    """
    __tablename__ = 'SyntheticPartOrigin_keyword'

    SyntheticPartOrigin_id = Column(Integer(), ForeignKey('SyntheticPartOrigin.id'), primary_key=True)
    keyword = Column(Text(), primary_key=True)
    

    def __repr__(self):
        return f"SyntheticPartOrigin_keyword(SyntheticPartOrigin_id={self.SyntheticPartOrigin_id},keyword={self.keyword},)"



    


class RecombinantPartIdentificationSequence(Base):
    """
    
    """
    __tablename__ = 'RecombinantPartIdentification_sequence'

    RecombinantPartIdentification_id = Column(Integer(), ForeignKey('RecombinantPartIdentification.id'), primary_key=True)
    sequence_id = Column(Integer(), ForeignKey('Sequence.id'), primary_key=True, nullable=False )
    

    def __repr__(self):
        return f"RecombinantPartIdentification_sequence(RecombinantPartIdentification_id={self.RecombinantPartIdentification_id},sequence_id={self.sequence_id},)"



    


class RecombinantPartIdentificationKeyword(Base):
    """
    
    """
    __tablename__ = 'RecombinantPartIdentification_keyword'

    RecombinantPartIdentification_id = Column(Integer(), ForeignKey('RecombinantPartIdentification.id'), primary_key=True)
    keyword = Column(Text(), primary_key=True)
    

    def __repr__(self):
        return f"RecombinantPartIdentification_keyword(RecombinantPartIdentification_id={self.RecombinantPartIdentification_id},keyword={self.keyword},)"



    


class CollectionCollectionItem(Base):
    """
    
    """
    __tablename__ = 'Collection_collectionItem'

    Collection_id = Column(Integer(), ForeignKey('Collection.id'), primary_key=True)
    collectionItem_id = Column(Integer(), ForeignKey('ProductOrService.id'), primary_key=True)
    

    def __repr__(self):
        return f"Collection_collectionItem(Collection_id={self.Collection_id},collectionItem_id={self.collectionItem_id},)"



    


class CollectionKeyword(Base):
    """
    
    """
    __tablename__ = 'Collection_keyword'

    Collection_id = Column(Integer(), ForeignKey('Collection.id'), primary_key=True)
    keyword = Column(Text(), primary_key=True)
    

    def __repr__(self):
        return f"Collection_keyword(Collection_id={self.Collection_id},keyword={self.keyword},)"



    


class ProductOrServiceAdditionalCategory(Base):
    """
    
    """
    __tablename__ = 'ProductOrService_additionalCategory'

    ProductOrService_id = Column(Integer(), ForeignKey('ProductOrService.id'), primary_key=True)
    additionalCategory_id = Column(Integer(), ForeignKey('ProductCategory.id'), primary_key=True)
    

    def __repr__(self):
        return f"ProductOrService_additionalCategory(ProductOrService_id={self.ProductOrService_id},additionalCategory_id={self.additionalCategory_id},)"



    


class ProductOrServicePathogenIdentification(Base):
    """
    
    """
    __tablename__ = 'ProductOrService_pathogenIdentification'

    ProductOrService_id = Column(Integer(), ForeignKey('ProductOrService.id'), primary_key=True)
    pathogenIdentification_id = Column(Integer(), ForeignKey('PathogenIdentification.id'), primary_key=True, nullable=False )
    

    def __repr__(self):
        return f"ProductOrService_pathogenIdentification(ProductOrService_id={self.ProductOrService_id},pathogenIdentification_id={self.pathogenIdentification_id},)"



    


class ProductOrServiceDoi(Base):
    """
    
    """
    __tablename__ = 'ProductOrService_doi'

    ProductOrService_id = Column(Integer(), ForeignKey('ProductOrService.id'), primary_key=True)
    doi_id = Column(Integer(), ForeignKey('Doi.id'), primary_key=True)
    

    def __repr__(self):
        return f"ProductOrService_doi(ProductOrService_id={self.ProductOrService_id},doi_id={self.doi_id},)"



    


class ProductOrServiceCollection(Base):
    """
    
    """
    __tablename__ = 'ProductOrService_collection'

    ProductOrService_id = Column(Integer(), ForeignKey('ProductOrService.id'), primary_key=True)
    collection_id = Column(Integer(), ForeignKey('Collection.id'), primary_key=True, nullable=False )
    

    def __repr__(self):
        return f"ProductOrService_collection(ProductOrService_id={self.ProductOrService_id},collection_id={self.collection_id},)"



    


class ProductOrServiceKeywords(Base):
    """
    
    """
    __tablename__ = 'ProductOrService_keywords'

    ProductOrService_id = Column(Integer(), ForeignKey('ProductOrService.id'), primary_key=True)
    keywords_id = Column(Integer(), ForeignKey('Keyword.id'), primary_key=True, nullable=False )
    

    def __repr__(self):
        return f"ProductOrService_keywords(ProductOrService_id={self.ProductOrService_id},keywords_id={self.keywords_id},)"



    


class ProductOrServiceComplementaryDocument(Base):
    """
    
    """
    __tablename__ = 'ProductOrService_complementaryDocument'

    ProductOrService_id = Column(Integer(), ForeignKey('ProductOrService.id'), primary_key=True)
    complementaryDocument_id = Column(Integer(), ForeignKey('Document.id'), primary_key=True)
    

    def __repr__(self):
        return f"ProductOrService_complementaryDocument(ProductOrService_id={self.ProductOrService_id},complementaryDocument_id={self.complementaryDocument_id},)"



    


class ProductOrServiceProductPicture(Base):
    """
    
    """
    __tablename__ = 'ProductOrService_productPicture'

    ProductOrService_id = Column(Integer(), ForeignKey('ProductOrService.id'), primary_key=True)
    productPicture_id = Column(Integer(), ForeignKey('Image.id'), primary_key=True)
    

    def __repr__(self):
        return f"ProductOrService_productPicture(ProductOrService_id={self.ProductOrService_id},productPicture_id={self.productPicture_id},)"



    


class ProductOrServiceExternalRelatedReference(Base):
    """
    
    """
    __tablename__ = 'ProductOrService_externalRelatedReference'

    ProductOrService_id = Column(Integer(), ForeignKey('ProductOrService.id'), primary_key=True)
    externalRelatedReference_id = Column(Integer(), ForeignKey('ExternalRelatedReference.id'), primary_key=True)
    

    def __repr__(self):
        return f"ProductOrService_externalRelatedReference(ProductOrService_id={self.ProductOrService_id},externalRelatedReference_id={self.externalRelatedReference_id},)"



    


class ProductOrServiceCertification(Base):
    """
    
    """
    __tablename__ = 'ProductOrService_certification'

    ProductOrService_id = Column(Integer(), ForeignKey('ProductOrService.id'), primary_key=True)
    certification_id = Column(Integer(), ForeignKey('Certification.id'), primary_key=True)
    

    def __repr__(self):
        return f"ProductOrService_certification(ProductOrService_id={self.ProductOrService_id},certification_id={self.certification_id},)"



    


class ProductOrServiceKeyword(Base):
    """
    
    """
    __tablename__ = 'ProductOrService_keyword'

    ProductOrService_id = Column(Integer(), ForeignKey('ProductOrService.id'), primary_key=True)
    keyword = Column(Text(), primary_key=True)
    

    def __repr__(self):
        return f"ProductOrService_keyword(ProductOrService_id={self.ProductOrService_id},keyword={self.keyword},)"



    


class ServiceAdditionalCategory(Base):
    """
    
    """
    __tablename__ = 'Service_additionalCategory'

    Service_id = Column(Integer(), ForeignKey('Service.id'), primary_key=True)
    additionalCategory_id = Column(Integer(), ForeignKey('ProductCategory.id'), primary_key=True)
    

    def __repr__(self):
        return f"Service_additionalCategory(Service_id={self.Service_id},additionalCategory_id={self.additionalCategory_id},)"



    


class ServicePathogenIdentification(Base):
    """
    
    """
    __tablename__ = 'Service_pathogenIdentification'

    Service_id = Column(Integer(), ForeignKey('Service.id'), primary_key=True)
    pathogenIdentification_id = Column(Integer(), ForeignKey('PathogenIdentification.id'), primary_key=True, nullable=False )
    

    def __repr__(self):
        return f"Service_pathogenIdentification(Service_id={self.Service_id},pathogenIdentification_id={self.pathogenIdentification_id},)"



    


class ServiceDoi(Base):
    """
    
    """
    __tablename__ = 'Service_doi'

    Service_id = Column(Integer(), ForeignKey('Service.id'), primary_key=True)
    doi_id = Column(Integer(), ForeignKey('Doi.id'), primary_key=True)
    

    def __repr__(self):
        return f"Service_doi(Service_id={self.Service_id},doi_id={self.doi_id},)"



    


class ServiceCollection(Base):
    """
    
    """
    __tablename__ = 'Service_collection'

    Service_id = Column(Integer(), ForeignKey('Service.id'), primary_key=True)
    collection_id = Column(Integer(), ForeignKey('Collection.id'), primary_key=True, nullable=False )
    

    def __repr__(self):
        return f"Service_collection(Service_id={self.Service_id},collection_id={self.collection_id},)"



    


class ServiceKeywords(Base):
    """
    
    """
    __tablename__ = 'Service_keywords'

    Service_id = Column(Integer(), ForeignKey('Service.id'), primary_key=True)
    keywords_id = Column(Integer(), ForeignKey('Keyword.id'), primary_key=True, nullable=False )
    

    def __repr__(self):
        return f"Service_keywords(Service_id={self.Service_id},keywords_id={self.keywords_id},)"



    


class ServiceComplementaryDocument(Base):
    """
    
    """
    __tablename__ = 'Service_complementaryDocument'

    Service_id = Column(Integer(), ForeignKey('Service.id'), primary_key=True)
    complementaryDocument_id = Column(Integer(), ForeignKey('Document.id'), primary_key=True)
    

    def __repr__(self):
        return f"Service_complementaryDocument(Service_id={self.Service_id},complementaryDocument_id={self.complementaryDocument_id},)"



    


class ServiceProductPicture(Base):
    """
    
    """
    __tablename__ = 'Service_productPicture'

    Service_id = Column(Integer(), ForeignKey('Service.id'), primary_key=True)
    productPicture_id = Column(Integer(), ForeignKey('Image.id'), primary_key=True)
    

    def __repr__(self):
        return f"Service_productPicture(Service_id={self.Service_id},productPicture_id={self.productPicture_id},)"



    


class ServiceExternalRelatedReference(Base):
    """
    
    """
    __tablename__ = 'Service_externalRelatedReference'

    Service_id = Column(Integer(), ForeignKey('Service.id'), primary_key=True)
    externalRelatedReference_id = Column(Integer(), ForeignKey('ExternalRelatedReference.id'), primary_key=True)
    

    def __repr__(self):
        return f"Service_externalRelatedReference(Service_id={self.Service_id},externalRelatedReference_id={self.externalRelatedReference_id},)"



    


class ServiceCertification(Base):
    """
    
    """
    __tablename__ = 'Service_certification'

    Service_id = Column(Integer(), ForeignKey('Service.id'), primary_key=True)
    certification_id = Column(Integer(), ForeignKey('Certification.id'), primary_key=True)
    

    def __repr__(self):
        return f"Service_certification(Service_id={self.Service_id},certification_id={self.certification_id},)"



    


class ServiceKeyword(Base):
    """
    
    """
    __tablename__ = 'Service_keyword'

    Service_id = Column(Integer(), ForeignKey('Service.id'), primary_key=True)
    keyword = Column(Text(), primary_key=True)
    

    def __repr__(self):
        return f"Service_keyword(Service_id={self.Service_id},keyword={self.keyword},)"



    


class ProductAdditionalCategory(Base):
    """
    
    """
    __tablename__ = 'Product_additionalCategory'

    Product_id = Column(Integer(), ForeignKey('Product.id'), primary_key=True)
    additionalCategory_id = Column(Integer(), ForeignKey('ProductCategory.id'), primary_key=True)
    

    def __repr__(self):
        return f"Product_additionalCategory(Product_id={self.Product_id},additionalCategory_id={self.additionalCategory_id},)"



    


class ProductPathogenIdentification(Base):
    """
    
    """
    __tablename__ = 'Product_pathogenIdentification'

    Product_id = Column(Integer(), ForeignKey('Product.id'), primary_key=True)
    pathogenIdentification_id = Column(Integer(), ForeignKey('PathogenIdentification.id'), primary_key=True, nullable=False )
    

    def __repr__(self):
        return f"Product_pathogenIdentification(Product_id={self.Product_id},pathogenIdentification_id={self.pathogenIdentification_id},)"



    


class ProductDoi(Base):
    """
    
    """
    __tablename__ = 'Product_doi'

    Product_id = Column(Integer(), ForeignKey('Product.id'), primary_key=True)
    doi_id = Column(Integer(), ForeignKey('Doi.id'), primary_key=True)
    

    def __repr__(self):
        return f"Product_doi(Product_id={self.Product_id},doi_id={self.doi_id},)"



    


class ProductCollection(Base):
    """
    
    """
    __tablename__ = 'Product_collection'

    Product_id = Column(Integer(), ForeignKey('Product.id'), primary_key=True)
    collection_id = Column(Integer(), ForeignKey('Collection.id'), primary_key=True, nullable=False )
    

    def __repr__(self):
        return f"Product_collection(Product_id={self.Product_id},collection_id={self.collection_id},)"



    


class ProductKeywords(Base):
    """
    
    """
    __tablename__ = 'Product_keywords'

    Product_id = Column(Integer(), ForeignKey('Product.id'), primary_key=True)
    keywords_id = Column(Integer(), ForeignKey('Keyword.id'), primary_key=True, nullable=False )
    

    def __repr__(self):
        return f"Product_keywords(Product_id={self.Product_id},keywords_id={self.keywords_id},)"



    


class ProductComplementaryDocument(Base):
    """
    
    """
    __tablename__ = 'Product_complementaryDocument'

    Product_id = Column(Integer(), ForeignKey('Product.id'), primary_key=True)
    complementaryDocument_id = Column(Integer(), ForeignKey('Document.id'), primary_key=True)
    

    def __repr__(self):
        return f"Product_complementaryDocument(Product_id={self.Product_id},complementaryDocument_id={self.complementaryDocument_id},)"



    


class ProductProductPicture(Base):
    """
    
    """
    __tablename__ = 'Product_productPicture'

    Product_id = Column(Integer(), ForeignKey('Product.id'), primary_key=True)
    productPicture_id = Column(Integer(), ForeignKey('Image.id'), primary_key=True)
    

    def __repr__(self):
        return f"Product_productPicture(Product_id={self.Product_id},productPicture_id={self.productPicture_id},)"



    


class ProductExternalRelatedReference(Base):
    """
    
    """
    __tablename__ = 'Product_externalRelatedReference'

    Product_id = Column(Integer(), ForeignKey('Product.id'), primary_key=True)
    externalRelatedReference_id = Column(Integer(), ForeignKey('ExternalRelatedReference.id'), primary_key=True)
    

    def __repr__(self):
        return f"Product_externalRelatedReference(Product_id={self.Product_id},externalRelatedReference_id={self.externalRelatedReference_id},)"



    


class ProductCertification(Base):
    """
    
    """
    __tablename__ = 'Product_certification'

    Product_id = Column(Integer(), ForeignKey('Product.id'), primary_key=True)
    certification_id = Column(Integer(), ForeignKey('Certification.id'), primary_key=True)
    

    def __repr__(self):
        return f"Product_certification(Product_id={self.Product_id},certification_id={self.certification_id},)"



    


class ProductKeyword(Base):
    """
    
    """
    __tablename__ = 'Product_keyword'

    Product_id = Column(Integer(), ForeignKey('Product.id'), primary_key=True)
    keyword = Column(Text(), primary_key=True)
    

    def __repr__(self):
        return f"Product_keyword(Product_id={self.Product_id},keyword={self.keyword},)"



    


class AntibodySequenceReference(Base):
    """
    
    """
    __tablename__ = 'Antibody_sequenceReference'

    Antibody_id = Column(Integer(), ForeignKey('Antibody.id'), primary_key=True)
    sequenceReference_id = Column(Integer(), ForeignKey('SequenceReference.id'), primary_key=True)
    

    def __repr__(self):
        return f"Antibody_sequenceReference(Antibody_id={self.Antibody_id},sequenceReference_id={self.sequenceReference_id},)"



    


class AntibodyAdditionalCategory(Base):
    """
    
    """
    __tablename__ = 'Antibody_additionalCategory'

    Antibody_id = Column(Integer(), ForeignKey('Antibody.id'), primary_key=True)
    additionalCategory_id = Column(Integer(), ForeignKey('ProductCategory.id'), primary_key=True)
    

    def __repr__(self):
        return f"Antibody_additionalCategory(Antibody_id={self.Antibody_id},additionalCategory_id={self.additionalCategory_id},)"



    


class AntibodyPathogenIdentification(Base):
    """
    
    """
    __tablename__ = 'Antibody_pathogenIdentification'

    Antibody_id = Column(Integer(), ForeignKey('Antibody.id'), primary_key=True)
    pathogenIdentification_id = Column(Integer(), ForeignKey('PathogenIdentification.id'), primary_key=True, nullable=False )
    

    def __repr__(self):
        return f"Antibody_pathogenIdentification(Antibody_id={self.Antibody_id},pathogenIdentification_id={self.pathogenIdentification_id},)"



    


class AntibodyDoi(Base):
    """
    
    """
    __tablename__ = 'Antibody_doi'

    Antibody_id = Column(Integer(), ForeignKey('Antibody.id'), primary_key=True)
    doi_id = Column(Integer(), ForeignKey('Doi.id'), primary_key=True)
    

    def __repr__(self):
        return f"Antibody_doi(Antibody_id={self.Antibody_id},doi_id={self.doi_id},)"



    


class AntibodyCollection(Base):
    """
    
    """
    __tablename__ = 'Antibody_collection'

    Antibody_id = Column(Integer(), ForeignKey('Antibody.id'), primary_key=True)
    collection_id = Column(Integer(), ForeignKey('Collection.id'), primary_key=True, nullable=False )
    

    def __repr__(self):
        return f"Antibody_collection(Antibody_id={self.Antibody_id},collection_id={self.collection_id},)"



    


class AntibodyKeywords(Base):
    """
    
    """
    __tablename__ = 'Antibody_keywords'

    Antibody_id = Column(Integer(), ForeignKey('Antibody.id'), primary_key=True)
    keywords_id = Column(Integer(), ForeignKey('Keyword.id'), primary_key=True, nullable=False )
    

    def __repr__(self):
        return f"Antibody_keywords(Antibody_id={self.Antibody_id},keywords_id={self.keywords_id},)"



    


class AntibodyComplementaryDocument(Base):
    """
    
    """
    __tablename__ = 'Antibody_complementaryDocument'

    Antibody_id = Column(Integer(), ForeignKey('Antibody.id'), primary_key=True)
    complementaryDocument_id = Column(Integer(), ForeignKey('Document.id'), primary_key=True)
    

    def __repr__(self):
        return f"Antibody_complementaryDocument(Antibody_id={self.Antibody_id},complementaryDocument_id={self.complementaryDocument_id},)"



    


class AntibodyProductPicture(Base):
    """
    
    """
    __tablename__ = 'Antibody_productPicture'

    Antibody_id = Column(Integer(), ForeignKey('Antibody.id'), primary_key=True)
    productPicture_id = Column(Integer(), ForeignKey('Image.id'), primary_key=True)
    

    def __repr__(self):
        return f"Antibody_productPicture(Antibody_id={self.Antibody_id},productPicture_id={self.productPicture_id},)"



    


class AntibodyExternalRelatedReference(Base):
    """
    
    """
    __tablename__ = 'Antibody_externalRelatedReference'

    Antibody_id = Column(Integer(), ForeignKey('Antibody.id'), primary_key=True)
    externalRelatedReference_id = Column(Integer(), ForeignKey('ExternalRelatedReference.id'), primary_key=True)
    

    def __repr__(self):
        return f"Antibody_externalRelatedReference(Antibody_id={self.Antibody_id},externalRelatedReference_id={self.externalRelatedReference_id},)"



    


class AntibodyCertification(Base):
    """
    
    """
    __tablename__ = 'Antibody_certification'

    Antibody_id = Column(Integer(), ForeignKey('Antibody.id'), primary_key=True)
    certification_id = Column(Integer(), ForeignKey('Certification.id'), primary_key=True)
    

    def __repr__(self):
        return f"Antibody_certification(Antibody_id={self.Antibody_id},certification_id={self.certification_id},)"



    


class AntibodyKeyword(Base):
    """
    
    """
    __tablename__ = 'Antibody_keyword'

    Antibody_id = Column(Integer(), ForeignKey('Antibody.id'), primary_key=True)
    keyword = Column(Text(), primary_key=True)
    

    def __repr__(self):
        return f"Antibody_keyword(Antibody_id={self.Antibody_id},keyword={self.keyword},)"



    


class HybridomaSequenceReference(Base):
    """
    
    """
    __tablename__ = 'Hybridoma_sequenceReference'

    Hybridoma_id = Column(Integer(), ForeignKey('Hybridoma.id'), primary_key=True)
    sequenceReference_id = Column(Integer(), ForeignKey('SequenceReference.id'), primary_key=True)
    

    def __repr__(self):
        return f"Hybridoma_sequenceReference(Hybridoma_id={self.Hybridoma_id},sequenceReference_id={self.sequenceReference_id},)"



    


class HybridomaAdditionalCategory(Base):
    """
    
    """
    __tablename__ = 'Hybridoma_additionalCategory'

    Hybridoma_id = Column(Integer(), ForeignKey('Hybridoma.id'), primary_key=True)
    additionalCategory_id = Column(Integer(), ForeignKey('ProductCategory.id'), primary_key=True)
    

    def __repr__(self):
        return f"Hybridoma_additionalCategory(Hybridoma_id={self.Hybridoma_id},additionalCategory_id={self.additionalCategory_id},)"



    


class HybridomaPathogenIdentification(Base):
    """
    
    """
    __tablename__ = 'Hybridoma_pathogenIdentification'

    Hybridoma_id = Column(Integer(), ForeignKey('Hybridoma.id'), primary_key=True)
    pathogenIdentification_id = Column(Integer(), ForeignKey('PathogenIdentification.id'), primary_key=True, nullable=False )
    

    def __repr__(self):
        return f"Hybridoma_pathogenIdentification(Hybridoma_id={self.Hybridoma_id},pathogenIdentification_id={self.pathogenIdentification_id},)"



    


class HybridomaDoi(Base):
    """
    
    """
    __tablename__ = 'Hybridoma_doi'

    Hybridoma_id = Column(Integer(), ForeignKey('Hybridoma.id'), primary_key=True)
    doi_id = Column(Integer(), ForeignKey('Doi.id'), primary_key=True)
    

    def __repr__(self):
        return f"Hybridoma_doi(Hybridoma_id={self.Hybridoma_id},doi_id={self.doi_id},)"



    


class HybridomaCollection(Base):
    """
    
    """
    __tablename__ = 'Hybridoma_collection'

    Hybridoma_id = Column(Integer(), ForeignKey('Hybridoma.id'), primary_key=True)
    collection_id = Column(Integer(), ForeignKey('Collection.id'), primary_key=True, nullable=False )
    

    def __repr__(self):
        return f"Hybridoma_collection(Hybridoma_id={self.Hybridoma_id},collection_id={self.collection_id},)"



    


class HybridomaKeywords(Base):
    """
    
    """
    __tablename__ = 'Hybridoma_keywords'

    Hybridoma_id = Column(Integer(), ForeignKey('Hybridoma.id'), primary_key=True)
    keywords_id = Column(Integer(), ForeignKey('Keyword.id'), primary_key=True, nullable=False )
    

    def __repr__(self):
        return f"Hybridoma_keywords(Hybridoma_id={self.Hybridoma_id},keywords_id={self.keywords_id},)"



    


class HybridomaComplementaryDocument(Base):
    """
    
    """
    __tablename__ = 'Hybridoma_complementaryDocument'

    Hybridoma_id = Column(Integer(), ForeignKey('Hybridoma.id'), primary_key=True)
    complementaryDocument_id = Column(Integer(), ForeignKey('Document.id'), primary_key=True)
    

    def __repr__(self):
        return f"Hybridoma_complementaryDocument(Hybridoma_id={self.Hybridoma_id},complementaryDocument_id={self.complementaryDocument_id},)"



    


class HybridomaProductPicture(Base):
    """
    
    """
    __tablename__ = 'Hybridoma_productPicture'

    Hybridoma_id = Column(Integer(), ForeignKey('Hybridoma.id'), primary_key=True)
    productPicture_id = Column(Integer(), ForeignKey('Image.id'), primary_key=True)
    

    def __repr__(self):
        return f"Hybridoma_productPicture(Hybridoma_id={self.Hybridoma_id},productPicture_id={self.productPicture_id},)"



    


class HybridomaExternalRelatedReference(Base):
    """
    
    """
    __tablename__ = 'Hybridoma_externalRelatedReference'

    Hybridoma_id = Column(Integer(), ForeignKey('Hybridoma.id'), primary_key=True)
    externalRelatedReference_id = Column(Integer(), ForeignKey('ExternalRelatedReference.id'), primary_key=True)
    

    def __repr__(self):
        return f"Hybridoma_externalRelatedReference(Hybridoma_id={self.Hybridoma_id},externalRelatedReference_id={self.externalRelatedReference_id},)"



    


class HybridomaCertification(Base):
    """
    
    """
    __tablename__ = 'Hybridoma_certification'

    Hybridoma_id = Column(Integer(), ForeignKey('Hybridoma.id'), primary_key=True)
    certification_id = Column(Integer(), ForeignKey('Certification.id'), primary_key=True)
    

    def __repr__(self):
        return f"Hybridoma_certification(Hybridoma_id={self.Hybridoma_id},certification_id={self.certification_id},)"



    


class HybridomaKeyword(Base):
    """
    
    """
    __tablename__ = 'Hybridoma_keyword'

    Hybridoma_id = Column(Integer(), ForeignKey('Hybridoma.id'), primary_key=True)
    keyword = Column(Text(), primary_key=True)
    

    def __repr__(self):
        return f"Hybridoma_keyword(Hybridoma_id={self.Hybridoma_id},keyword={self.keyword},)"



    


class ProteinSequence(Base):
    """
    
    """
    __tablename__ = 'Protein_sequence'

    Protein_id = Column(Integer(), ForeignKey('Protein.id'), primary_key=True)
    sequence_id = Column(Integer(), ForeignKey('Sequence.id'), primary_key=True, nullable=False )
    

    def __repr__(self):
        return f"Protein_sequence(Protein_id={self.Protein_id},sequence_id={self.sequence_id},)"



    


class ProteinRelatedPdb(Base):
    """
    
    """
    __tablename__ = 'Protein_relatedPdb'

    Protein_id = Column(Integer(), ForeignKey('Protein.id'), primary_key=True)
    relatedPdb_id = Column(Integer(), ForeignKey('PdbReference.id'), primary_key=True)
    

    def __repr__(self):
        return f"Protein_relatedPdb(Protein_id={self.Protein_id},relatedPdb_id={self.relatedPdb_id},)"



    


class ProteinSpecialFeature(Base):
    """
    
    """
    __tablename__ = 'Protein_specialFeature'

    Protein_id = Column(Integer(), ForeignKey('Protein.id'), primary_key=True)
    specialFeature_id = Column(Integer(), ForeignKey('SpecialFeature.id'), primary_key=True)
    

    def __repr__(self):
        return f"Protein_specialFeature(Protein_id={self.Protein_id},specialFeature_id={self.specialFeature_id},)"



    


class ProteinTagSequence(Base):
    """
    
    """
    __tablename__ = 'Protein_tagSequence'

    Protein_id = Column(Integer(), ForeignKey('Protein.id'), primary_key=True)
    tagSequence_id = Column(Integer(), ForeignKey('TagSequence.id'), primary_key=True)
    

    def __repr__(self):
        return f"Protein_tagSequence(Protein_id={self.Protein_id},tagSequence_id={self.tagSequence_id},)"



    


class ProteinDomain(Base):
    """
    
    """
    __tablename__ = 'Protein_domain'

    Protein_id = Column(Integer(), ForeignKey('Protein.id'), primary_key=True)
    domain = Column(Text(), primary_key=True)
    

    def __repr__(self):
        return f"Protein_domain(Protein_id={self.Protein_id},domain={self.domain},)"



    


class ProteinExpressedAs(Base):
    """
    
    """
    __tablename__ = 'Protein_expressedAs'

    Protein_id = Column(Integer(), ForeignKey('Protein.id'), primary_key=True)
    expressedAs = Column(Text(), primary_key=True)
    

    def __repr__(self):
        return f"Protein_expressedAs(Protein_id={self.Protein_id},expressedAs={self.expressedAs},)"



    


class ProteinInclusionBodiesType(Base):
    """
    
    """
    __tablename__ = 'Protein_inclusionBodiesType'

    Protein_id = Column(Integer(), ForeignKey('Protein.id'), primary_key=True)
    inclusionBodiesType = Column(Text(), primary_key=True)
    

    def __repr__(self):
        return f"Protein_inclusionBodiesType(Protein_id={self.Protein_id},inclusionBodiesType={self.inclusionBodiesType},)"



    


class ProteinExpressionSystem(Base):
    """
    
    """
    __tablename__ = 'Protein_expressionSystem'

    Protein_id = Column(Integer(), ForeignKey('Protein.id'), primary_key=True)
    expressionSystem = Column(Text(), primary_key=True)
    

    def __repr__(self):
        return f"Protein_expressionSystem(Protein_id={self.Protein_id},expressionSystem={self.expressionSystem},)"



    


class ProteinFunctionalCharacterization(Base):
    """
    
    """
    __tablename__ = 'Protein_functionalCharacterization'

    Protein_id = Column(Integer(), ForeignKey('Protein.id'), primary_key=True)
    functionalCharacterization = Column(Text(), primary_key=True)
    

    def __repr__(self):
        return f"Protein_functionalCharacterization(Protein_id={self.Protein_id},functionalCharacterization={self.functionalCharacterization},)"



    


class ProteinFunctionalAndTechnicalDescription(Base):
    """
    
    """
    __tablename__ = 'Protein_functionalAndTechnicalDescription'

    Protein_id = Column(Integer(), ForeignKey('Protein.id'), primary_key=True)
    functionalAndTechnicalDescription = Column(Text(), primary_key=True)
    

    def __repr__(self):
        return f"Protein_functionalAndTechnicalDescription(Protein_id={self.Protein_id},functionalAndTechnicalDescription={self.functionalAndTechnicalDescription},)"



    


class ProteinProteinPurification(Base):
    """
    
    """
    __tablename__ = 'Protein_proteinPurification'

    Protein_id = Column(Integer(), ForeignKey('Protein.id'), primary_key=True)
    proteinPurification = Column(Text(), primary_key=True)
    

    def __repr__(self):
        return f"Protein_proteinPurification(Protein_id={self.Protein_id},proteinPurification={self.proteinPurification},)"



    


class ProteinTagStatusOfTheSolubilizedProtein(Base):
    """
    
    """
    __tablename__ = 'Protein_tagStatusOfTheSolubilizedProtein'

    Protein_id = Column(Integer(), ForeignKey('Protein.id'), primary_key=True)
    tagStatusOfTheSolubilizedProtein = Column(Text(), primary_key=True)
    

    def __repr__(self):
        return f"Protein_tagStatusOfTheSolubilizedProtein(Protein_id={self.Protein_id},tagStatusOfTheSolubilizedProtein={self.tagStatusOfTheSolubilizedProtein},)"



    


class ProteinTypeOfFunctionalCharacterization(Base):
    """
    
    """
    __tablename__ = 'Protein_typeOfFunctionalCharacterization'

    Protein_id = Column(Integer(), ForeignKey('Protein.id'), primary_key=True)
    typeOfFunctionalCharacterization = Column(Text(), primary_key=True)
    

    def __repr__(self):
        return f"Protein_typeOfFunctionalCharacterization(Protein_id={self.Protein_id},typeOfFunctionalCharacterization={self.typeOfFunctionalCharacterization},)"



    


class ProteinAdditionalCategory(Base):
    """
    
    """
    __tablename__ = 'Protein_additionalCategory'

    Protein_id = Column(Integer(), ForeignKey('Protein.id'), primary_key=True)
    additionalCategory_id = Column(Integer(), ForeignKey('ProductCategory.id'), primary_key=True)
    

    def __repr__(self):
        return f"Protein_additionalCategory(Protein_id={self.Protein_id},additionalCategory_id={self.additionalCategory_id},)"



    


class ProteinPathogenIdentification(Base):
    """
    
    """
    __tablename__ = 'Protein_pathogenIdentification'

    Protein_id = Column(Integer(), ForeignKey('Protein.id'), primary_key=True)
    pathogenIdentification_id = Column(Integer(), ForeignKey('PathogenIdentification.id'), primary_key=True, nullable=False )
    

    def __repr__(self):
        return f"Protein_pathogenIdentification(Protein_id={self.Protein_id},pathogenIdentification_id={self.pathogenIdentification_id},)"



    


class ProteinDoi(Base):
    """
    
    """
    __tablename__ = 'Protein_doi'

    Protein_id = Column(Integer(), ForeignKey('Protein.id'), primary_key=True)
    doi_id = Column(Integer(), ForeignKey('Doi.id'), primary_key=True)
    

    def __repr__(self):
        return f"Protein_doi(Protein_id={self.Protein_id},doi_id={self.doi_id},)"



    


class ProteinCollection(Base):
    """
    
    """
    __tablename__ = 'Protein_collection'

    Protein_id = Column(Integer(), ForeignKey('Protein.id'), primary_key=True)
    collection_id = Column(Integer(), ForeignKey('Collection.id'), primary_key=True, nullable=False )
    

    def __repr__(self):
        return f"Protein_collection(Protein_id={self.Protein_id},collection_id={self.collection_id},)"



    


class ProteinKeywords(Base):
    """
    
    """
    __tablename__ = 'Protein_keywords'

    Protein_id = Column(Integer(), ForeignKey('Protein.id'), primary_key=True)
    keywords_id = Column(Integer(), ForeignKey('Keyword.id'), primary_key=True, nullable=False )
    

    def __repr__(self):
        return f"Protein_keywords(Protein_id={self.Protein_id},keywords_id={self.keywords_id},)"



    


class ProteinComplementaryDocument(Base):
    """
    
    """
    __tablename__ = 'Protein_complementaryDocument'

    Protein_id = Column(Integer(), ForeignKey('Protein.id'), primary_key=True)
    complementaryDocument_id = Column(Integer(), ForeignKey('Document.id'), primary_key=True)
    

    def __repr__(self):
        return f"Protein_complementaryDocument(Protein_id={self.Protein_id},complementaryDocument_id={self.complementaryDocument_id},)"



    


class ProteinProductPicture(Base):
    """
    
    """
    __tablename__ = 'Protein_productPicture'

    Protein_id = Column(Integer(), ForeignKey('Protein.id'), primary_key=True)
    productPicture_id = Column(Integer(), ForeignKey('Image.id'), primary_key=True)
    

    def __repr__(self):
        return f"Protein_productPicture(Protein_id={self.Protein_id},productPicture_id={self.productPicture_id},)"



    


class ProteinExternalRelatedReference(Base):
    """
    
    """
    __tablename__ = 'Protein_externalRelatedReference'

    Protein_id = Column(Integer(), ForeignKey('Protein.id'), primary_key=True)
    externalRelatedReference_id = Column(Integer(), ForeignKey('ExternalRelatedReference.id'), primary_key=True)
    

    def __repr__(self):
        return f"Protein_externalRelatedReference(Protein_id={self.Protein_id},externalRelatedReference_id={self.externalRelatedReference_id},)"



    


class ProteinCertification(Base):
    """
    
    """
    __tablename__ = 'Protein_certification'

    Protein_id = Column(Integer(), ForeignKey('Protein.id'), primary_key=True)
    certification_id = Column(Integer(), ForeignKey('Certification.id'), primary_key=True)
    

    def __repr__(self):
        return f"Protein_certification(Protein_id={self.Protein_id},certification_id={self.certification_id},)"



    


class ProteinKeyword(Base):
    """
    
    """
    __tablename__ = 'Protein_keyword'

    Protein_id = Column(Integer(), ForeignKey('Protein.id'), primary_key=True)
    keyword = Column(Text(), primary_key=True)
    

    def __repr__(self):
        return f"Protein_keyword(Protein_id={self.Protein_id},keyword={self.keyword},)"



    


class NucleicAcidGenBankFileOfTheConstruct(Base):
    """
    
    """
    __tablename__ = 'NucleicAcid_genBankFileOfTheConstruct'

    NucleicAcid_id = Column(Integer(), ForeignKey('NucleicAcid.id'), primary_key=True)
    genBankFileOfTheConstruct_id = Column(Integer(), ForeignKey('Data.id'), primary_key=True)
    

    def __repr__(self):
        return f"NucleicAcid_genBankFileOfTheConstruct(NucleicAcid_id={self.NucleicAcid_id},genBankFileOfTheConstruct_id={self.genBankFileOfTheConstruct_id},)"



    


class NucleicAcidSequence(Base):
    """
    
    """
    __tablename__ = 'NucleicAcid_sequence'

    NucleicAcid_id = Column(Integer(), ForeignKey('NucleicAcid.id'), primary_key=True)
    sequence_id = Column(Integer(), ForeignKey('Sequence.id'), primary_key=True, nullable=False )
    

    def __repr__(self):
        return f"NucleicAcid_sequence(NucleicAcid_id={self.NucleicAcid_id},sequence_id={self.sequence_id},)"



    


class NucleicAcidPlasmidSelection(Base):
    """
    
    """
    __tablename__ = 'NucleicAcid_plasmidSelection'

    NucleicAcid_id = Column(Integer(), ForeignKey('NucleicAcid.id'), primary_key=True)
    plasmidSelection_id = Column(Integer(), ForeignKey('PlasmidSelection.id'), primary_key=True)
    

    def __repr__(self):
        return f"NucleicAcid_plasmidSelection(NucleicAcid_id={self.NucleicAcid_id},plasmidSelection_id={self.plasmidSelection_id},)"



    


class NucleicAcidAdditionalCategory(Base):
    """
    
    """
    __tablename__ = 'NucleicAcid_additionalCategory'

    NucleicAcid_id = Column(Integer(), ForeignKey('NucleicAcid.id'), primary_key=True)
    additionalCategory_id = Column(Integer(), ForeignKey('ProductCategory.id'), primary_key=True)
    

    def __repr__(self):
        return f"NucleicAcid_additionalCategory(NucleicAcid_id={self.NucleicAcid_id},additionalCategory_id={self.additionalCategory_id},)"



    


class NucleicAcidPathogenIdentification(Base):
    """
    
    """
    __tablename__ = 'NucleicAcid_pathogenIdentification'

    NucleicAcid_id = Column(Integer(), ForeignKey('NucleicAcid.id'), primary_key=True)
    pathogenIdentification_id = Column(Integer(), ForeignKey('PathogenIdentification.id'), primary_key=True, nullable=False )
    

    def __repr__(self):
        return f"NucleicAcid_pathogenIdentification(NucleicAcid_id={self.NucleicAcid_id},pathogenIdentification_id={self.pathogenIdentification_id},)"



    


class NucleicAcidDoi(Base):
    """
    
    """
    __tablename__ = 'NucleicAcid_doi'

    NucleicAcid_id = Column(Integer(), ForeignKey('NucleicAcid.id'), primary_key=True)
    doi_id = Column(Integer(), ForeignKey('Doi.id'), primary_key=True)
    

    def __repr__(self):
        return f"NucleicAcid_doi(NucleicAcid_id={self.NucleicAcid_id},doi_id={self.doi_id},)"



    


class NucleicAcidCollection(Base):
    """
    
    """
    __tablename__ = 'NucleicAcid_collection'

    NucleicAcid_id = Column(Integer(), ForeignKey('NucleicAcid.id'), primary_key=True)
    collection_id = Column(Integer(), ForeignKey('Collection.id'), primary_key=True, nullable=False )
    

    def __repr__(self):
        return f"NucleicAcid_collection(NucleicAcid_id={self.NucleicAcid_id},collection_id={self.collection_id},)"



    


class NucleicAcidKeywords(Base):
    """
    
    """
    __tablename__ = 'NucleicAcid_keywords'

    NucleicAcid_id = Column(Integer(), ForeignKey('NucleicAcid.id'), primary_key=True)
    keywords_id = Column(Integer(), ForeignKey('Keyword.id'), primary_key=True, nullable=False )
    

    def __repr__(self):
        return f"NucleicAcid_keywords(NucleicAcid_id={self.NucleicAcid_id},keywords_id={self.keywords_id},)"



    


class NucleicAcidComplementaryDocument(Base):
    """
    
    """
    __tablename__ = 'NucleicAcid_complementaryDocument'

    NucleicAcid_id = Column(Integer(), ForeignKey('NucleicAcid.id'), primary_key=True)
    complementaryDocument_id = Column(Integer(), ForeignKey('Document.id'), primary_key=True)
    

    def __repr__(self):
        return f"NucleicAcid_complementaryDocument(NucleicAcid_id={self.NucleicAcid_id},complementaryDocument_id={self.complementaryDocument_id},)"



    


class NucleicAcidProductPicture(Base):
    """
    
    """
    __tablename__ = 'NucleicAcid_productPicture'

    NucleicAcid_id = Column(Integer(), ForeignKey('NucleicAcid.id'), primary_key=True)
    productPicture_id = Column(Integer(), ForeignKey('Image.id'), primary_key=True)
    

    def __repr__(self):
        return f"NucleicAcid_productPicture(NucleicAcid_id={self.NucleicAcid_id},productPicture_id={self.productPicture_id},)"



    


class NucleicAcidExternalRelatedReference(Base):
    """
    
    """
    __tablename__ = 'NucleicAcid_externalRelatedReference'

    NucleicAcid_id = Column(Integer(), ForeignKey('NucleicAcid.id'), primary_key=True)
    externalRelatedReference_id = Column(Integer(), ForeignKey('ExternalRelatedReference.id'), primary_key=True)
    

    def __repr__(self):
        return f"NucleicAcid_externalRelatedReference(NucleicAcid_id={self.NucleicAcid_id},externalRelatedReference_id={self.externalRelatedReference_id},)"



    


class NucleicAcidCertification(Base):
    """
    
    """
    __tablename__ = 'NucleicAcid_certification'

    NucleicAcid_id = Column(Integer(), ForeignKey('NucleicAcid.id'), primary_key=True)
    certification_id = Column(Integer(), ForeignKey('Certification.id'), primary_key=True)
    

    def __repr__(self):
        return f"NucleicAcid_certification(NucleicAcid_id={self.NucleicAcid_id},certification_id={self.certification_id},)"



    


class NucleicAcidKeyword(Base):
    """
    
    """
    __tablename__ = 'NucleicAcid_keyword'

    NucleicAcid_id = Column(Integer(), ForeignKey('NucleicAcid.id'), primary_key=True)
    keyword = Column(Text(), primary_key=True)
    

    def __repr__(self):
        return f"NucleicAcid_keyword(NucleicAcid_id={self.NucleicAcid_id},keyword={self.keyword},)"



    


class DetectionKitStandardOperatingProcedureFile(Base):
    """
    
    """
    __tablename__ = 'DetectionKit_standardOperatingProcedureFile'

    DetectionKit_id = Column(Integer(), ForeignKey('DetectionKit.id'), primary_key=True)
    standardOperatingProcedureFile_id = Column(Integer(), ForeignKey('File.id'), primary_key=True)
    

    def __repr__(self):
        return f"DetectionKit_standardOperatingProcedureFile(DetectionKit_id={self.DetectionKit_id},standardOperatingProcedureFile_id={self.standardOperatingProcedureFile_id},)"



    


class DetectionKitAdditionalCategory(Base):
    """
    
    """
    __tablename__ = 'DetectionKit_additionalCategory'

    DetectionKit_id = Column(Integer(), ForeignKey('DetectionKit.id'), primary_key=True)
    additionalCategory_id = Column(Integer(), ForeignKey('ProductCategory.id'), primary_key=True)
    

    def __repr__(self):
        return f"DetectionKit_additionalCategory(DetectionKit_id={self.DetectionKit_id},additionalCategory_id={self.additionalCategory_id},)"



    


class DetectionKitPathogenIdentification(Base):
    """
    
    """
    __tablename__ = 'DetectionKit_pathogenIdentification'

    DetectionKit_id = Column(Integer(), ForeignKey('DetectionKit.id'), primary_key=True)
    pathogenIdentification_id = Column(Integer(), ForeignKey('PathogenIdentification.id'), primary_key=True, nullable=False )
    

    def __repr__(self):
        return f"DetectionKit_pathogenIdentification(DetectionKit_id={self.DetectionKit_id},pathogenIdentification_id={self.pathogenIdentification_id},)"



    


class DetectionKitDoi(Base):
    """
    
    """
    __tablename__ = 'DetectionKit_doi'

    DetectionKit_id = Column(Integer(), ForeignKey('DetectionKit.id'), primary_key=True)
    doi_id = Column(Integer(), ForeignKey('Doi.id'), primary_key=True)
    

    def __repr__(self):
        return f"DetectionKit_doi(DetectionKit_id={self.DetectionKit_id},doi_id={self.doi_id},)"



    


class DetectionKitCollection(Base):
    """
    
    """
    __tablename__ = 'DetectionKit_collection'

    DetectionKit_id = Column(Integer(), ForeignKey('DetectionKit.id'), primary_key=True)
    collection_id = Column(Integer(), ForeignKey('Collection.id'), primary_key=True, nullable=False )
    

    def __repr__(self):
        return f"DetectionKit_collection(DetectionKit_id={self.DetectionKit_id},collection_id={self.collection_id},)"



    


class DetectionKitKeywords(Base):
    """
    
    """
    __tablename__ = 'DetectionKit_keywords'

    DetectionKit_id = Column(Integer(), ForeignKey('DetectionKit.id'), primary_key=True)
    keywords_id = Column(Integer(), ForeignKey('Keyword.id'), primary_key=True, nullable=False )
    

    def __repr__(self):
        return f"DetectionKit_keywords(DetectionKit_id={self.DetectionKit_id},keywords_id={self.keywords_id},)"



    


class DetectionKitComplementaryDocument(Base):
    """
    
    """
    __tablename__ = 'DetectionKit_complementaryDocument'

    DetectionKit_id = Column(Integer(), ForeignKey('DetectionKit.id'), primary_key=True)
    complementaryDocument_id = Column(Integer(), ForeignKey('Document.id'), primary_key=True)
    

    def __repr__(self):
        return f"DetectionKit_complementaryDocument(DetectionKit_id={self.DetectionKit_id},complementaryDocument_id={self.complementaryDocument_id},)"



    


class DetectionKitProductPicture(Base):
    """
    
    """
    __tablename__ = 'DetectionKit_productPicture'

    DetectionKit_id = Column(Integer(), ForeignKey('DetectionKit.id'), primary_key=True)
    productPicture_id = Column(Integer(), ForeignKey('Image.id'), primary_key=True)
    

    def __repr__(self):
        return f"DetectionKit_productPicture(DetectionKit_id={self.DetectionKit_id},productPicture_id={self.productPicture_id},)"



    


class DetectionKitExternalRelatedReference(Base):
    """
    
    """
    __tablename__ = 'DetectionKit_externalRelatedReference'

    DetectionKit_id = Column(Integer(), ForeignKey('DetectionKit.id'), primary_key=True)
    externalRelatedReference_id = Column(Integer(), ForeignKey('ExternalRelatedReference.id'), primary_key=True)
    

    def __repr__(self):
        return f"DetectionKit_externalRelatedReference(DetectionKit_id={self.DetectionKit_id},externalRelatedReference_id={self.externalRelatedReference_id},)"



    


class DetectionKitCertification(Base):
    """
    
    """
    __tablename__ = 'DetectionKit_certification'

    DetectionKit_id = Column(Integer(), ForeignKey('DetectionKit.id'), primary_key=True)
    certification_id = Column(Integer(), ForeignKey('Certification.id'), primary_key=True)
    

    def __repr__(self):
        return f"DetectionKit_certification(DetectionKit_id={self.DetectionKit_id},certification_id={self.certification_id},)"



    


class DetectionKitKeyword(Base):
    """
    
    """
    __tablename__ = 'DetectionKit_keyword'

    DetectionKit_id = Column(Integer(), ForeignKey('DetectionKit.id'), primary_key=True)
    keyword = Column(Text(), primary_key=True)
    

    def __repr__(self):
        return f"DetectionKit_keyword(DetectionKit_id={self.DetectionKit_id},keyword={self.keyword},)"



    


class BundleItemsOfTheBundle(Base):
    """
    
    """
    __tablename__ = 'Bundle_itemsOfTheBundle'

    Bundle_id = Column(Integer(), ForeignKey('Bundle.id'), primary_key=True)
    itemsOfTheBundle_id = Column(Integer(), ForeignKey('Product.id'), primary_key=True, nullable=False )
    

    def __repr__(self):
        return f"Bundle_itemsOfTheBundle(Bundle_id={self.Bundle_id},itemsOfTheBundle_id={self.itemsOfTheBundle_id},)"



    


class BundleAdditionalCategory(Base):
    """
    
    """
    __tablename__ = 'Bundle_additionalCategory'

    Bundle_id = Column(Integer(), ForeignKey('Bundle.id'), primary_key=True)
    additionalCategory_id = Column(Integer(), ForeignKey('ProductCategory.id'), primary_key=True)
    

    def __repr__(self):
        return f"Bundle_additionalCategory(Bundle_id={self.Bundle_id},additionalCategory_id={self.additionalCategory_id},)"



    


class BundlePathogenIdentification(Base):
    """
    
    """
    __tablename__ = 'Bundle_pathogenIdentification'

    Bundle_id = Column(Integer(), ForeignKey('Bundle.id'), primary_key=True)
    pathogenIdentification_id = Column(Integer(), ForeignKey('PathogenIdentification.id'), primary_key=True, nullable=False )
    

    def __repr__(self):
        return f"Bundle_pathogenIdentification(Bundle_id={self.Bundle_id},pathogenIdentification_id={self.pathogenIdentification_id},)"



    


class BundleDoi(Base):
    """
    
    """
    __tablename__ = 'Bundle_doi'

    Bundle_id = Column(Integer(), ForeignKey('Bundle.id'), primary_key=True)
    doi_id = Column(Integer(), ForeignKey('Doi.id'), primary_key=True)
    

    def __repr__(self):
        return f"Bundle_doi(Bundle_id={self.Bundle_id},doi_id={self.doi_id},)"



    


class BundleCollection(Base):
    """
    
    """
    __tablename__ = 'Bundle_collection'

    Bundle_id = Column(Integer(), ForeignKey('Bundle.id'), primary_key=True)
    collection_id = Column(Integer(), ForeignKey('Collection.id'), primary_key=True, nullable=False )
    

    def __repr__(self):
        return f"Bundle_collection(Bundle_id={self.Bundle_id},collection_id={self.collection_id},)"



    


class BundleKeywords(Base):
    """
    
    """
    __tablename__ = 'Bundle_keywords'

    Bundle_id = Column(Integer(), ForeignKey('Bundle.id'), primary_key=True)
    keywords_id = Column(Integer(), ForeignKey('Keyword.id'), primary_key=True, nullable=False )
    

    def __repr__(self):
        return f"Bundle_keywords(Bundle_id={self.Bundle_id},keywords_id={self.keywords_id},)"



    


class BundleComplementaryDocument(Base):
    """
    
    """
    __tablename__ = 'Bundle_complementaryDocument'

    Bundle_id = Column(Integer(), ForeignKey('Bundle.id'), primary_key=True)
    complementaryDocument_id = Column(Integer(), ForeignKey('Document.id'), primary_key=True)
    

    def __repr__(self):
        return f"Bundle_complementaryDocument(Bundle_id={self.Bundle_id},complementaryDocument_id={self.complementaryDocument_id},)"



    


class BundleProductPicture(Base):
    """
    
    """
    __tablename__ = 'Bundle_productPicture'

    Bundle_id = Column(Integer(), ForeignKey('Bundle.id'), primary_key=True)
    productPicture_id = Column(Integer(), ForeignKey('Image.id'), primary_key=True)
    

    def __repr__(self):
        return f"Bundle_productPicture(Bundle_id={self.Bundle_id},productPicture_id={self.productPicture_id},)"



    


class BundleExternalRelatedReference(Base):
    """
    
    """
    __tablename__ = 'Bundle_externalRelatedReference'

    Bundle_id = Column(Integer(), ForeignKey('Bundle.id'), primary_key=True)
    externalRelatedReference_id = Column(Integer(), ForeignKey('ExternalRelatedReference.id'), primary_key=True)
    

    def __repr__(self):
        return f"Bundle_externalRelatedReference(Bundle_id={self.Bundle_id},externalRelatedReference_id={self.externalRelatedReference_id},)"



    


class BundleCertification(Base):
    """
    
    """
    __tablename__ = 'Bundle_certification'

    Bundle_id = Column(Integer(), ForeignKey('Bundle.id'), primary_key=True)
    certification_id = Column(Integer(), ForeignKey('Certification.id'), primary_key=True)
    

    def __repr__(self):
        return f"Bundle_certification(Bundle_id={self.Bundle_id},certification_id={self.certification_id},)"



    


class BundleKeyword(Base):
    """
    
    """
    __tablename__ = 'Bundle_keyword'

    Bundle_id = Column(Integer(), ForeignKey('Bundle.id'), primary_key=True)
    keyword = Column(Text(), primary_key=True)
    

    def __repr__(self):
        return f"Bundle_keyword(Bundle_id={self.Bundle_id},keyword={self.keyword},)"



    


class PathogenSuspectedEpidemiologicalOrigin(Base):
    """
    
    """
    __tablename__ = 'Pathogen_suspectedEpidemiologicalOrigin'

    Pathogen_id = Column(Integer(), ForeignKey('Pathogen.id'), primary_key=True)
    suspectedEpidemiologicalOrigin_id = Column(Integer(), ForeignKey('GeographicalOrigin.id'), primary_key=True)
    

    def __repr__(self):
        return f"Pathogen_suspectedEpidemiologicalOrigin(Pathogen_id={self.Pathogen_id},suspectedEpidemiologicalOrigin_id={self.suspectedEpidemiologicalOrigin_id},)"



    


class PathogenIsolationHost(Base):
    """
    
    """
    __tablename__ = 'Pathogen_isolationHost'

    Pathogen_id = Column(Integer(), ForeignKey('Pathogen.id'), primary_key=True)
    isolationHost_id = Column(Integer(), ForeignKey('IsolationHost.id'), primary_key=True)
    

    def __repr__(self):
        return f"Pathogen_isolationHost(Pathogen_id={self.Pathogen_id},isolationHost_id={self.isolationHost_id},)"



    


class PathogenProductionCellLine(Base):
    """
    
    """
    __tablename__ = 'Pathogen_productionCellLine'

    Pathogen_id = Column(Integer(), ForeignKey('Pathogen.id'), primary_key=True)
    productionCellLine_id = Column(Integer(), ForeignKey('ProductionCellLine.id'), primary_key=True)
    

    def __repr__(self):
        return f"Pathogen_productionCellLine(Pathogen_id={self.Pathogen_id},productionCellLine_id={self.productionCellLine_id},)"



    


class PathogenPropagationHost(Base):
    """
    
    """
    __tablename__ = 'Pathogen_propagationHost'

    Pathogen_id = Column(Integer(), ForeignKey('Pathogen.id'), primary_key=True)
    propagationHost_id = Column(Integer(), ForeignKey('PropagationHost.id'), primary_key=True)
    

    def __repr__(self):
        return f"Pathogen_propagationHost(Pathogen_id={self.Pathogen_id},propagationHost_id={self.propagationHost_id},)"



    


class PathogenTransmissionMethod(Base):
    """
    
    """
    __tablename__ = 'Pathogen_transmissionMethod'

    Pathogen_id = Column(Integer(), ForeignKey('Pathogen.id'), primary_key=True)
    transmissionMethod_id = Column(Integer(), ForeignKey('TransmissionMethod.id'), primary_key=True)
    

    def __repr__(self):
        return f"Pathogen_transmissionMethod(Pathogen_id={self.Pathogen_id},transmissionMethod_id={self.transmissionMethod_id},)"



    


class PathogenSequence(Base):
    """
    
    """
    __tablename__ = 'Pathogen_sequence'

    Pathogen_id = Column(Integer(), ForeignKey('Pathogen.id'), primary_key=True)
    sequence_id = Column(Integer(), ForeignKey('Sequence.id'), primary_key=True, nullable=False )
    

    def __repr__(self):
        return f"Pathogen_sequence(Pathogen_id={self.Pathogen_id},sequence_id={self.sequence_id},)"



    


class PathogenAdditionalCategory(Base):
    """
    
    """
    __tablename__ = 'Pathogen_additionalCategory'

    Pathogen_id = Column(Integer(), ForeignKey('Pathogen.id'), primary_key=True)
    additionalCategory_id = Column(Integer(), ForeignKey('ProductCategory.id'), primary_key=True)
    

    def __repr__(self):
        return f"Pathogen_additionalCategory(Pathogen_id={self.Pathogen_id},additionalCategory_id={self.additionalCategory_id},)"



    


class PathogenPathogenIdentification(Base):
    """
    
    """
    __tablename__ = 'Pathogen_pathogenIdentification'

    Pathogen_id = Column(Integer(), ForeignKey('Pathogen.id'), primary_key=True)
    pathogenIdentification_id = Column(Integer(), ForeignKey('PathogenIdentification.id'), primary_key=True, nullable=False )
    

    def __repr__(self):
        return f"Pathogen_pathogenIdentification(Pathogen_id={self.Pathogen_id},pathogenIdentification_id={self.pathogenIdentification_id},)"



    


class PathogenDoi(Base):
    """
    
    """
    __tablename__ = 'Pathogen_doi'

    Pathogen_id = Column(Integer(), ForeignKey('Pathogen.id'), primary_key=True)
    doi_id = Column(Integer(), ForeignKey('Doi.id'), primary_key=True)
    

    def __repr__(self):
        return f"Pathogen_doi(Pathogen_id={self.Pathogen_id},doi_id={self.doi_id},)"



    


class PathogenCollection(Base):
    """
    
    """
    __tablename__ = 'Pathogen_collection'

    Pathogen_id = Column(Integer(), ForeignKey('Pathogen.id'), primary_key=True)
    collection_id = Column(Integer(), ForeignKey('Collection.id'), primary_key=True, nullable=False )
    

    def __repr__(self):
        return f"Pathogen_collection(Pathogen_id={self.Pathogen_id},collection_id={self.collection_id},)"



    


class PathogenKeywords(Base):
    """
    
    """
    __tablename__ = 'Pathogen_keywords'

    Pathogen_id = Column(Integer(), ForeignKey('Pathogen.id'), primary_key=True)
    keywords_id = Column(Integer(), ForeignKey('Keyword.id'), primary_key=True, nullable=False )
    

    def __repr__(self):
        return f"Pathogen_keywords(Pathogen_id={self.Pathogen_id},keywords_id={self.keywords_id},)"



    


class PathogenComplementaryDocument(Base):
    """
    
    """
    __tablename__ = 'Pathogen_complementaryDocument'

    Pathogen_id = Column(Integer(), ForeignKey('Pathogen.id'), primary_key=True)
    complementaryDocument_id = Column(Integer(), ForeignKey('Document.id'), primary_key=True)
    

    def __repr__(self):
        return f"Pathogen_complementaryDocument(Pathogen_id={self.Pathogen_id},complementaryDocument_id={self.complementaryDocument_id},)"



    


class PathogenProductPicture(Base):
    """
    
    """
    __tablename__ = 'Pathogen_productPicture'

    Pathogen_id = Column(Integer(), ForeignKey('Pathogen.id'), primary_key=True)
    productPicture_id = Column(Integer(), ForeignKey('Image.id'), primary_key=True)
    

    def __repr__(self):
        return f"Pathogen_productPicture(Pathogen_id={self.Pathogen_id},productPicture_id={self.productPicture_id},)"



    


class PathogenExternalRelatedReference(Base):
    """
    
    """
    __tablename__ = 'Pathogen_externalRelatedReference'

    Pathogen_id = Column(Integer(), ForeignKey('Pathogen.id'), primary_key=True)
    externalRelatedReference_id = Column(Integer(), ForeignKey('ExternalRelatedReference.id'), primary_key=True)
    

    def __repr__(self):
        return f"Pathogen_externalRelatedReference(Pathogen_id={self.Pathogen_id},externalRelatedReference_id={self.externalRelatedReference_id},)"



    


class PathogenCertification(Base):
    """
    
    """
    __tablename__ = 'Pathogen_certification'

    Pathogen_id = Column(Integer(), ForeignKey('Pathogen.id'), primary_key=True)
    certification_id = Column(Integer(), ForeignKey('Certification.id'), primary_key=True)
    

    def __repr__(self):
        return f"Pathogen_certification(Pathogen_id={self.Pathogen_id},certification_id={self.certification_id},)"



    


class PathogenKeyword(Base):
    """
    
    """
    __tablename__ = 'Pathogen_keyword'

    Pathogen_id = Column(Integer(), ForeignKey('Pathogen.id'), primary_key=True)
    keyword = Column(Text(), primary_key=True)
    

    def __repr__(self):
        return f"Pathogen_keyword(Pathogen_id={self.Pathogen_id},keyword={self.keyword},)"



    


class VirusCoInfectingViruses(Base):
    """
    
    """
    __tablename__ = 'Virus_coInfectingViruses'

    Virus_id = Column(Integer(), ForeignKey('Virus.id'), primary_key=True)
    coInfectingViruses_id = Column(Integer(), ForeignKey('VirusName.id'), primary_key=True)
    

    def __repr__(self):
        return f"Virus_coInfectingViruses(Virus_id={self.Virus_id},coInfectingViruses_id={self.coInfectingViruses_id},)"



    


class VirusSuspectedEpidemiologicalOrigin(Base):
    """
    
    """
    __tablename__ = 'Virus_suspectedEpidemiologicalOrigin'

    Virus_id = Column(Integer(), ForeignKey('Virus.id'), primary_key=True)
    suspectedEpidemiologicalOrigin_id = Column(Integer(), ForeignKey('GeographicalOrigin.id'), primary_key=True)
    

    def __repr__(self):
        return f"Virus_suspectedEpidemiologicalOrigin(Virus_id={self.Virus_id},suspectedEpidemiologicalOrigin_id={self.suspectedEpidemiologicalOrigin_id},)"



    


class VirusIsolationHost(Base):
    """
    
    """
    __tablename__ = 'Virus_isolationHost'

    Virus_id = Column(Integer(), ForeignKey('Virus.id'), primary_key=True)
    isolationHost_id = Column(Integer(), ForeignKey('IsolationHost.id'), primary_key=True)
    

    def __repr__(self):
        return f"Virus_isolationHost(Virus_id={self.Virus_id},isolationHost_id={self.isolationHost_id},)"



    


class VirusProductionCellLine(Base):
    """
    
    """
    __tablename__ = 'Virus_productionCellLine'

    Virus_id = Column(Integer(), ForeignKey('Virus.id'), primary_key=True)
    productionCellLine_id = Column(Integer(), ForeignKey('ProductionCellLine.id'), primary_key=True)
    

    def __repr__(self):
        return f"Virus_productionCellLine(Virus_id={self.Virus_id},productionCellLine_id={self.productionCellLine_id},)"



    


class VirusPropagationHost(Base):
    """
    
    """
    __tablename__ = 'Virus_propagationHost'

    Virus_id = Column(Integer(), ForeignKey('Virus.id'), primary_key=True)
    propagationHost_id = Column(Integer(), ForeignKey('PropagationHost.id'), primary_key=True)
    

    def __repr__(self):
        return f"Virus_propagationHost(Virus_id={self.Virus_id},propagationHost_id={self.propagationHost_id},)"



    


class VirusTransmissionMethod(Base):
    """
    
    """
    __tablename__ = 'Virus_transmissionMethod'

    Virus_id = Column(Integer(), ForeignKey('Virus.id'), primary_key=True)
    transmissionMethod_id = Column(Integer(), ForeignKey('TransmissionMethod.id'), primary_key=True)
    

    def __repr__(self):
        return f"Virus_transmissionMethod(Virus_id={self.Virus_id},transmissionMethod_id={self.transmissionMethod_id},)"



    


class VirusSequence(Base):
    """
    
    """
    __tablename__ = 'Virus_sequence'

    Virus_id = Column(Integer(), ForeignKey('Virus.id'), primary_key=True)
    sequence_id = Column(Integer(), ForeignKey('Sequence.id'), primary_key=True, nullable=False )
    

    def __repr__(self):
        return f"Virus_sequence(Virus_id={self.Virus_id},sequence_id={self.sequence_id},)"



    


class VirusAdditionalCategory(Base):
    """
    
    """
    __tablename__ = 'Virus_additionalCategory'

    Virus_id = Column(Integer(), ForeignKey('Virus.id'), primary_key=True)
    additionalCategory_id = Column(Integer(), ForeignKey('ProductCategory.id'), primary_key=True)
    

    def __repr__(self):
        return f"Virus_additionalCategory(Virus_id={self.Virus_id},additionalCategory_id={self.additionalCategory_id},)"



    


class VirusPathogenIdentification(Base):
    """
    
    """
    __tablename__ = 'Virus_pathogenIdentification'

    Virus_id = Column(Integer(), ForeignKey('Virus.id'), primary_key=True)
    pathogenIdentification_id = Column(Integer(), ForeignKey('PathogenIdentification.id'), primary_key=True, nullable=False )
    

    def __repr__(self):
        return f"Virus_pathogenIdentification(Virus_id={self.Virus_id},pathogenIdentification_id={self.pathogenIdentification_id},)"



    


class VirusDoi(Base):
    """
    
    """
    __tablename__ = 'Virus_doi'

    Virus_id = Column(Integer(), ForeignKey('Virus.id'), primary_key=True)
    doi_id = Column(Integer(), ForeignKey('Doi.id'), primary_key=True)
    

    def __repr__(self):
        return f"Virus_doi(Virus_id={self.Virus_id},doi_id={self.doi_id},)"



    


class VirusCollection(Base):
    """
    
    """
    __tablename__ = 'Virus_collection'

    Virus_id = Column(Integer(), ForeignKey('Virus.id'), primary_key=True)
    collection_id = Column(Integer(), ForeignKey('Collection.id'), primary_key=True, nullable=False )
    

    def __repr__(self):
        return f"Virus_collection(Virus_id={self.Virus_id},collection_id={self.collection_id},)"



    


class VirusKeywords(Base):
    """
    
    """
    __tablename__ = 'Virus_keywords'

    Virus_id = Column(Integer(), ForeignKey('Virus.id'), primary_key=True)
    keywords_id = Column(Integer(), ForeignKey('Keyword.id'), primary_key=True, nullable=False )
    

    def __repr__(self):
        return f"Virus_keywords(Virus_id={self.Virus_id},keywords_id={self.keywords_id},)"



    


class VirusComplementaryDocument(Base):
    """
    
    """
    __tablename__ = 'Virus_complementaryDocument'

    Virus_id = Column(Integer(), ForeignKey('Virus.id'), primary_key=True)
    complementaryDocument_id = Column(Integer(), ForeignKey('Document.id'), primary_key=True)
    

    def __repr__(self):
        return f"Virus_complementaryDocument(Virus_id={self.Virus_id},complementaryDocument_id={self.complementaryDocument_id},)"



    


class VirusProductPicture(Base):
    """
    
    """
    __tablename__ = 'Virus_productPicture'

    Virus_id = Column(Integer(), ForeignKey('Virus.id'), primary_key=True)
    productPicture_id = Column(Integer(), ForeignKey('Image.id'), primary_key=True)
    

    def __repr__(self):
        return f"Virus_productPicture(Virus_id={self.Virus_id},productPicture_id={self.productPicture_id},)"



    


class VirusExternalRelatedReference(Base):
    """
    
    """
    __tablename__ = 'Virus_externalRelatedReference'

    Virus_id = Column(Integer(), ForeignKey('Virus.id'), primary_key=True)
    externalRelatedReference_id = Column(Integer(), ForeignKey('ExternalRelatedReference.id'), primary_key=True)
    

    def __repr__(self):
        return f"Virus_externalRelatedReference(Virus_id={self.Virus_id},externalRelatedReference_id={self.externalRelatedReference_id},)"



    


class VirusCertification(Base):
    """
    
    """
    __tablename__ = 'Virus_certification'

    Virus_id = Column(Integer(), ForeignKey('Virus.id'), primary_key=True)
    certification_id = Column(Integer(), ForeignKey('Certification.id'), primary_key=True)
    

    def __repr__(self):
        return f"Virus_certification(Virus_id={self.Virus_id},certification_id={self.certification_id},)"



    


class VirusKeyword(Base):
    """
    
    """
    __tablename__ = 'Virus_keyword'

    Virus_id = Column(Integer(), ForeignKey('Virus.id'), primary_key=True)
    keyword = Column(Text(), primary_key=True)
    

    def __repr__(self):
        return f"Virus_keyword(Virus_id={self.Virus_id},keyword={self.keyword},)"



    


class BacteriumSuspectedEpidemiologicalOrigin(Base):
    """
    
    """
    __tablename__ = 'Bacterium_suspectedEpidemiologicalOrigin'

    Bacterium_id = Column(Integer(), ForeignKey('Bacterium.id'), primary_key=True)
    suspectedEpidemiologicalOrigin_id = Column(Integer(), ForeignKey('GeographicalOrigin.id'), primary_key=True)
    

    def __repr__(self):
        return f"Bacterium_suspectedEpidemiologicalOrigin(Bacterium_id={self.Bacterium_id},suspectedEpidemiologicalOrigin_id={self.suspectedEpidemiologicalOrigin_id},)"



    


class BacteriumIsolationHost(Base):
    """
    
    """
    __tablename__ = 'Bacterium_isolationHost'

    Bacterium_id = Column(Integer(), ForeignKey('Bacterium.id'), primary_key=True)
    isolationHost_id = Column(Integer(), ForeignKey('IsolationHost.id'), primary_key=True)
    

    def __repr__(self):
        return f"Bacterium_isolationHost(Bacterium_id={self.Bacterium_id},isolationHost_id={self.isolationHost_id},)"



    


class BacteriumProductionCellLine(Base):
    """
    
    """
    __tablename__ = 'Bacterium_productionCellLine'

    Bacterium_id = Column(Integer(), ForeignKey('Bacterium.id'), primary_key=True)
    productionCellLine_id = Column(Integer(), ForeignKey('ProductionCellLine.id'), primary_key=True)
    

    def __repr__(self):
        return f"Bacterium_productionCellLine(Bacterium_id={self.Bacterium_id},productionCellLine_id={self.productionCellLine_id},)"



    


class BacteriumPropagationHost(Base):
    """
    
    """
    __tablename__ = 'Bacterium_propagationHost'

    Bacterium_id = Column(Integer(), ForeignKey('Bacterium.id'), primary_key=True)
    propagationHost_id = Column(Integer(), ForeignKey('PropagationHost.id'), primary_key=True)
    

    def __repr__(self):
        return f"Bacterium_propagationHost(Bacterium_id={self.Bacterium_id},propagationHost_id={self.propagationHost_id},)"



    


class BacteriumTransmissionMethod(Base):
    """
    
    """
    __tablename__ = 'Bacterium_transmissionMethod'

    Bacterium_id = Column(Integer(), ForeignKey('Bacterium.id'), primary_key=True)
    transmissionMethod_id = Column(Integer(), ForeignKey('TransmissionMethod.id'), primary_key=True)
    

    def __repr__(self):
        return f"Bacterium_transmissionMethod(Bacterium_id={self.Bacterium_id},transmissionMethod_id={self.transmissionMethod_id},)"



    


class BacteriumSequence(Base):
    """
    
    """
    __tablename__ = 'Bacterium_sequence'

    Bacterium_id = Column(Integer(), ForeignKey('Bacterium.id'), primary_key=True)
    sequence_id = Column(Integer(), ForeignKey('Sequence.id'), primary_key=True, nullable=False )
    

    def __repr__(self):
        return f"Bacterium_sequence(Bacterium_id={self.Bacterium_id},sequence_id={self.sequence_id},)"



    


class BacteriumAdditionalCategory(Base):
    """
    
    """
    __tablename__ = 'Bacterium_additionalCategory'

    Bacterium_id = Column(Integer(), ForeignKey('Bacterium.id'), primary_key=True)
    additionalCategory_id = Column(Integer(), ForeignKey('ProductCategory.id'), primary_key=True)
    

    def __repr__(self):
        return f"Bacterium_additionalCategory(Bacterium_id={self.Bacterium_id},additionalCategory_id={self.additionalCategory_id},)"



    


class BacteriumPathogenIdentification(Base):
    """
    
    """
    __tablename__ = 'Bacterium_pathogenIdentification'

    Bacterium_id = Column(Integer(), ForeignKey('Bacterium.id'), primary_key=True)
    pathogenIdentification_id = Column(Integer(), ForeignKey('PathogenIdentification.id'), primary_key=True, nullable=False )
    

    def __repr__(self):
        return f"Bacterium_pathogenIdentification(Bacterium_id={self.Bacterium_id},pathogenIdentification_id={self.pathogenIdentification_id},)"



    


class BacteriumDoi(Base):
    """
    
    """
    __tablename__ = 'Bacterium_doi'

    Bacterium_id = Column(Integer(), ForeignKey('Bacterium.id'), primary_key=True)
    doi_id = Column(Integer(), ForeignKey('Doi.id'), primary_key=True)
    

    def __repr__(self):
        return f"Bacterium_doi(Bacterium_id={self.Bacterium_id},doi_id={self.doi_id},)"



    


class BacteriumCollection(Base):
    """
    
    """
    __tablename__ = 'Bacterium_collection'

    Bacterium_id = Column(Integer(), ForeignKey('Bacterium.id'), primary_key=True)
    collection_id = Column(Integer(), ForeignKey('Collection.id'), primary_key=True, nullable=False )
    

    def __repr__(self):
        return f"Bacterium_collection(Bacterium_id={self.Bacterium_id},collection_id={self.collection_id},)"



    


class BacteriumKeywords(Base):
    """
    
    """
    __tablename__ = 'Bacterium_keywords'

    Bacterium_id = Column(Integer(), ForeignKey('Bacterium.id'), primary_key=True)
    keywords_id = Column(Integer(), ForeignKey('Keyword.id'), primary_key=True, nullable=False )
    

    def __repr__(self):
        return f"Bacterium_keywords(Bacterium_id={self.Bacterium_id},keywords_id={self.keywords_id},)"



    


class BacteriumComplementaryDocument(Base):
    """
    
    """
    __tablename__ = 'Bacterium_complementaryDocument'

    Bacterium_id = Column(Integer(), ForeignKey('Bacterium.id'), primary_key=True)
    complementaryDocument_id = Column(Integer(), ForeignKey('Document.id'), primary_key=True)
    

    def __repr__(self):
        return f"Bacterium_complementaryDocument(Bacterium_id={self.Bacterium_id},complementaryDocument_id={self.complementaryDocument_id},)"



    


class BacteriumProductPicture(Base):
    """
    
    """
    __tablename__ = 'Bacterium_productPicture'

    Bacterium_id = Column(Integer(), ForeignKey('Bacterium.id'), primary_key=True)
    productPicture_id = Column(Integer(), ForeignKey('Image.id'), primary_key=True)
    

    def __repr__(self):
        return f"Bacterium_productPicture(Bacterium_id={self.Bacterium_id},productPicture_id={self.productPicture_id},)"



    


class BacteriumExternalRelatedReference(Base):
    """
    
    """
    __tablename__ = 'Bacterium_externalRelatedReference'

    Bacterium_id = Column(Integer(), ForeignKey('Bacterium.id'), primary_key=True)
    externalRelatedReference_id = Column(Integer(), ForeignKey('ExternalRelatedReference.id'), primary_key=True)
    

    def __repr__(self):
        return f"Bacterium_externalRelatedReference(Bacterium_id={self.Bacterium_id},externalRelatedReference_id={self.externalRelatedReference_id},)"



    


class BacteriumCertification(Base):
    """
    
    """
    __tablename__ = 'Bacterium_certification'

    Bacterium_id = Column(Integer(), ForeignKey('Bacterium.id'), primary_key=True)
    certification_id = Column(Integer(), ForeignKey('Certification.id'), primary_key=True)
    

    def __repr__(self):
        return f"Bacterium_certification(Bacterium_id={self.Bacterium_id},certification_id={self.certification_id},)"



    


class BacteriumKeyword(Base):
    """
    
    """
    __tablename__ = 'Bacterium_keyword'

    Bacterium_id = Column(Integer(), ForeignKey('Bacterium.id'), primary_key=True)
    keyword = Column(Text(), primary_key=True)
    

    def __repr__(self):
        return f"Bacterium_keyword(Bacterium_id={self.Bacterium_id},keyword={self.keyword},)"



    


class FungusSuspectedEpidemiologicalOrigin(Base):
    """
    
    """
    __tablename__ = 'Fungus_suspectedEpidemiologicalOrigin'

    Fungus_id = Column(Integer(), ForeignKey('Fungus.id'), primary_key=True)
    suspectedEpidemiologicalOrigin_id = Column(Integer(), ForeignKey('GeographicalOrigin.id'), primary_key=True)
    

    def __repr__(self):
        return f"Fungus_suspectedEpidemiologicalOrigin(Fungus_id={self.Fungus_id},suspectedEpidemiologicalOrigin_id={self.suspectedEpidemiologicalOrigin_id},)"



    


class FungusIsolationHost(Base):
    """
    
    """
    __tablename__ = 'Fungus_isolationHost'

    Fungus_id = Column(Integer(), ForeignKey('Fungus.id'), primary_key=True)
    isolationHost_id = Column(Integer(), ForeignKey('IsolationHost.id'), primary_key=True)
    

    def __repr__(self):
        return f"Fungus_isolationHost(Fungus_id={self.Fungus_id},isolationHost_id={self.isolationHost_id},)"



    


class FungusProductionCellLine(Base):
    """
    
    """
    __tablename__ = 'Fungus_productionCellLine'

    Fungus_id = Column(Integer(), ForeignKey('Fungus.id'), primary_key=True)
    productionCellLine_id = Column(Integer(), ForeignKey('ProductionCellLine.id'), primary_key=True)
    

    def __repr__(self):
        return f"Fungus_productionCellLine(Fungus_id={self.Fungus_id},productionCellLine_id={self.productionCellLine_id},)"



    


class FungusPropagationHost(Base):
    """
    
    """
    __tablename__ = 'Fungus_propagationHost'

    Fungus_id = Column(Integer(), ForeignKey('Fungus.id'), primary_key=True)
    propagationHost_id = Column(Integer(), ForeignKey('PropagationHost.id'), primary_key=True)
    

    def __repr__(self):
        return f"Fungus_propagationHost(Fungus_id={self.Fungus_id},propagationHost_id={self.propagationHost_id},)"



    


class FungusTransmissionMethod(Base):
    """
    
    """
    __tablename__ = 'Fungus_transmissionMethod'

    Fungus_id = Column(Integer(), ForeignKey('Fungus.id'), primary_key=True)
    transmissionMethod_id = Column(Integer(), ForeignKey('TransmissionMethod.id'), primary_key=True)
    

    def __repr__(self):
        return f"Fungus_transmissionMethod(Fungus_id={self.Fungus_id},transmissionMethod_id={self.transmissionMethod_id},)"



    


class FungusSequence(Base):
    """
    
    """
    __tablename__ = 'Fungus_sequence'

    Fungus_id = Column(Integer(), ForeignKey('Fungus.id'), primary_key=True)
    sequence_id = Column(Integer(), ForeignKey('Sequence.id'), primary_key=True, nullable=False )
    

    def __repr__(self):
        return f"Fungus_sequence(Fungus_id={self.Fungus_id},sequence_id={self.sequence_id},)"



    


class FungusAdditionalCategory(Base):
    """
    
    """
    __tablename__ = 'Fungus_additionalCategory'

    Fungus_id = Column(Integer(), ForeignKey('Fungus.id'), primary_key=True)
    additionalCategory_id = Column(Integer(), ForeignKey('ProductCategory.id'), primary_key=True)
    

    def __repr__(self):
        return f"Fungus_additionalCategory(Fungus_id={self.Fungus_id},additionalCategory_id={self.additionalCategory_id},)"



    


class FungusPathogenIdentification(Base):
    """
    
    """
    __tablename__ = 'Fungus_pathogenIdentification'

    Fungus_id = Column(Integer(), ForeignKey('Fungus.id'), primary_key=True)
    pathogenIdentification_id = Column(Integer(), ForeignKey('PathogenIdentification.id'), primary_key=True, nullable=False )
    

    def __repr__(self):
        return f"Fungus_pathogenIdentification(Fungus_id={self.Fungus_id},pathogenIdentification_id={self.pathogenIdentification_id},)"



    


class FungusDoi(Base):
    """
    
    """
    __tablename__ = 'Fungus_doi'

    Fungus_id = Column(Integer(), ForeignKey('Fungus.id'), primary_key=True)
    doi_id = Column(Integer(), ForeignKey('Doi.id'), primary_key=True)
    

    def __repr__(self):
        return f"Fungus_doi(Fungus_id={self.Fungus_id},doi_id={self.doi_id},)"



    


class FungusCollection(Base):
    """
    
    """
    __tablename__ = 'Fungus_collection'

    Fungus_id = Column(Integer(), ForeignKey('Fungus.id'), primary_key=True)
    collection_id = Column(Integer(), ForeignKey('Collection.id'), primary_key=True, nullable=False )
    

    def __repr__(self):
        return f"Fungus_collection(Fungus_id={self.Fungus_id},collection_id={self.collection_id},)"



    


class FungusKeywords(Base):
    """
    
    """
    __tablename__ = 'Fungus_keywords'

    Fungus_id = Column(Integer(), ForeignKey('Fungus.id'), primary_key=True)
    keywords_id = Column(Integer(), ForeignKey('Keyword.id'), primary_key=True, nullable=False )
    

    def __repr__(self):
        return f"Fungus_keywords(Fungus_id={self.Fungus_id},keywords_id={self.keywords_id},)"



    


class FungusComplementaryDocument(Base):
    """
    
    """
    __tablename__ = 'Fungus_complementaryDocument'

    Fungus_id = Column(Integer(), ForeignKey('Fungus.id'), primary_key=True)
    complementaryDocument_id = Column(Integer(), ForeignKey('Document.id'), primary_key=True)
    

    def __repr__(self):
        return f"Fungus_complementaryDocument(Fungus_id={self.Fungus_id},complementaryDocument_id={self.complementaryDocument_id},)"



    


class FungusProductPicture(Base):
    """
    
    """
    __tablename__ = 'Fungus_productPicture'

    Fungus_id = Column(Integer(), ForeignKey('Fungus.id'), primary_key=True)
    productPicture_id = Column(Integer(), ForeignKey('Image.id'), primary_key=True)
    

    def __repr__(self):
        return f"Fungus_productPicture(Fungus_id={self.Fungus_id},productPicture_id={self.productPicture_id},)"



    


class FungusExternalRelatedReference(Base):
    """
    
    """
    __tablename__ = 'Fungus_externalRelatedReference'

    Fungus_id = Column(Integer(), ForeignKey('Fungus.id'), primary_key=True)
    externalRelatedReference_id = Column(Integer(), ForeignKey('ExternalRelatedReference.id'), primary_key=True)
    

    def __repr__(self):
        return f"Fungus_externalRelatedReference(Fungus_id={self.Fungus_id},externalRelatedReference_id={self.externalRelatedReference_id},)"



    


class FungusCertification(Base):
    """
    
    """
    __tablename__ = 'Fungus_certification'

    Fungus_id = Column(Integer(), ForeignKey('Fungus.id'), primary_key=True)
    certification_id = Column(Integer(), ForeignKey('Certification.id'), primary_key=True)
    

    def __repr__(self):
        return f"Fungus_certification(Fungus_id={self.Fungus_id},certification_id={self.certification_id},)"



    


class FungusKeyword(Base):
    """
    
    """
    __tablename__ = 'Fungus_keyword'

    Fungus_id = Column(Integer(), ForeignKey('Fungus.id'), primary_key=True)
    keyword = Column(Text(), primary_key=True)
    

    def __repr__(self):
        return f"Fungus_keyword(Fungus_id={self.Fungus_id},keyword={self.keyword},)"



    


class ProtozoanSuspectedEpidemiologicalOrigin(Base):
    """
    
    """
    __tablename__ = 'Protozoan_suspectedEpidemiologicalOrigin'

    Protozoan_id = Column(Integer(), ForeignKey('Protozoan.id'), primary_key=True)
    suspectedEpidemiologicalOrigin_id = Column(Integer(), ForeignKey('GeographicalOrigin.id'), primary_key=True)
    

    def __repr__(self):
        return f"Protozoan_suspectedEpidemiologicalOrigin(Protozoan_id={self.Protozoan_id},suspectedEpidemiologicalOrigin_id={self.suspectedEpidemiologicalOrigin_id},)"



    


class ProtozoanIsolationHost(Base):
    """
    
    """
    __tablename__ = 'Protozoan_isolationHost'

    Protozoan_id = Column(Integer(), ForeignKey('Protozoan.id'), primary_key=True)
    isolationHost_id = Column(Integer(), ForeignKey('IsolationHost.id'), primary_key=True)
    

    def __repr__(self):
        return f"Protozoan_isolationHost(Protozoan_id={self.Protozoan_id},isolationHost_id={self.isolationHost_id},)"



    


class ProtozoanProductionCellLine(Base):
    """
    
    """
    __tablename__ = 'Protozoan_productionCellLine'

    Protozoan_id = Column(Integer(), ForeignKey('Protozoan.id'), primary_key=True)
    productionCellLine_id = Column(Integer(), ForeignKey('ProductionCellLine.id'), primary_key=True)
    

    def __repr__(self):
        return f"Protozoan_productionCellLine(Protozoan_id={self.Protozoan_id},productionCellLine_id={self.productionCellLine_id},)"



    


class ProtozoanPropagationHost(Base):
    """
    
    """
    __tablename__ = 'Protozoan_propagationHost'

    Protozoan_id = Column(Integer(), ForeignKey('Protozoan.id'), primary_key=True)
    propagationHost_id = Column(Integer(), ForeignKey('PropagationHost.id'), primary_key=True)
    

    def __repr__(self):
        return f"Protozoan_propagationHost(Protozoan_id={self.Protozoan_id},propagationHost_id={self.propagationHost_id},)"



    


class ProtozoanTransmissionMethod(Base):
    """
    
    """
    __tablename__ = 'Protozoan_transmissionMethod'

    Protozoan_id = Column(Integer(), ForeignKey('Protozoan.id'), primary_key=True)
    transmissionMethod_id = Column(Integer(), ForeignKey('TransmissionMethod.id'), primary_key=True)
    

    def __repr__(self):
        return f"Protozoan_transmissionMethod(Protozoan_id={self.Protozoan_id},transmissionMethod_id={self.transmissionMethod_id},)"



    


class ProtozoanSequence(Base):
    """
    
    """
    __tablename__ = 'Protozoan_sequence'

    Protozoan_id = Column(Integer(), ForeignKey('Protozoan.id'), primary_key=True)
    sequence_id = Column(Integer(), ForeignKey('Sequence.id'), primary_key=True, nullable=False )
    

    def __repr__(self):
        return f"Protozoan_sequence(Protozoan_id={self.Protozoan_id},sequence_id={self.sequence_id},)"



    


class ProtozoanAdditionalCategory(Base):
    """
    
    """
    __tablename__ = 'Protozoan_additionalCategory'

    Protozoan_id = Column(Integer(), ForeignKey('Protozoan.id'), primary_key=True)
    additionalCategory_id = Column(Integer(), ForeignKey('ProductCategory.id'), primary_key=True)
    

    def __repr__(self):
        return f"Protozoan_additionalCategory(Protozoan_id={self.Protozoan_id},additionalCategory_id={self.additionalCategory_id},)"



    


class ProtozoanPathogenIdentification(Base):
    """
    
    """
    __tablename__ = 'Protozoan_pathogenIdentification'

    Protozoan_id = Column(Integer(), ForeignKey('Protozoan.id'), primary_key=True)
    pathogenIdentification_id = Column(Integer(), ForeignKey('PathogenIdentification.id'), primary_key=True, nullable=False )
    

    def __repr__(self):
        return f"Protozoan_pathogenIdentification(Protozoan_id={self.Protozoan_id},pathogenIdentification_id={self.pathogenIdentification_id},)"



    


class ProtozoanDoi(Base):
    """
    
    """
    __tablename__ = 'Protozoan_doi'

    Protozoan_id = Column(Integer(), ForeignKey('Protozoan.id'), primary_key=True)
    doi_id = Column(Integer(), ForeignKey('Doi.id'), primary_key=True)
    

    def __repr__(self):
        return f"Protozoan_doi(Protozoan_id={self.Protozoan_id},doi_id={self.doi_id},)"



    


class ProtozoanCollection(Base):
    """
    
    """
    __tablename__ = 'Protozoan_collection'

    Protozoan_id = Column(Integer(), ForeignKey('Protozoan.id'), primary_key=True)
    collection_id = Column(Integer(), ForeignKey('Collection.id'), primary_key=True, nullable=False )
    

    def __repr__(self):
        return f"Protozoan_collection(Protozoan_id={self.Protozoan_id},collection_id={self.collection_id},)"



    


class ProtozoanKeywords(Base):
    """
    
    """
    __tablename__ = 'Protozoan_keywords'

    Protozoan_id = Column(Integer(), ForeignKey('Protozoan.id'), primary_key=True)
    keywords_id = Column(Integer(), ForeignKey('Keyword.id'), primary_key=True, nullable=False )
    

    def __repr__(self):
        return f"Protozoan_keywords(Protozoan_id={self.Protozoan_id},keywords_id={self.keywords_id},)"



    


class ProtozoanComplementaryDocument(Base):
    """
    
    """
    __tablename__ = 'Protozoan_complementaryDocument'

    Protozoan_id = Column(Integer(), ForeignKey('Protozoan.id'), primary_key=True)
    complementaryDocument_id = Column(Integer(), ForeignKey('Document.id'), primary_key=True)
    

    def __repr__(self):
        return f"Protozoan_complementaryDocument(Protozoan_id={self.Protozoan_id},complementaryDocument_id={self.complementaryDocument_id},)"



    


class ProtozoanProductPicture(Base):
    """
    
    """
    __tablename__ = 'Protozoan_productPicture'

    Protozoan_id = Column(Integer(), ForeignKey('Protozoan.id'), primary_key=True)
    productPicture_id = Column(Integer(), ForeignKey('Image.id'), primary_key=True)
    

    def __repr__(self):
        return f"Protozoan_productPicture(Protozoan_id={self.Protozoan_id},productPicture_id={self.productPicture_id},)"



    


class ProtozoanExternalRelatedReference(Base):
    """
    
    """
    __tablename__ = 'Protozoan_externalRelatedReference'

    Protozoan_id = Column(Integer(), ForeignKey('Protozoan.id'), primary_key=True)
    externalRelatedReference_id = Column(Integer(), ForeignKey('ExternalRelatedReference.id'), primary_key=True)
    

    def __repr__(self):
        return f"Protozoan_externalRelatedReference(Protozoan_id={self.Protozoan_id},externalRelatedReference_id={self.externalRelatedReference_id},)"



    


class ProtozoanCertification(Base):
    """
    
    """
    __tablename__ = 'Protozoan_certification'

    Protozoan_id = Column(Integer(), ForeignKey('Protozoan.id'), primary_key=True)
    certification_id = Column(Integer(), ForeignKey('Certification.id'), primary_key=True)
    

    def __repr__(self):
        return f"Protozoan_certification(Protozoan_id={self.Protozoan_id},certification_id={self.certification_id},)"



    


class ProtozoanKeyword(Base):
    """
    
    """
    __tablename__ = 'Protozoan_keyword'

    Protozoan_id = Column(Integer(), ForeignKey('Protozoan.id'), primary_key=True)
    keyword = Column(Text(), primary_key=True)
    

    def __repr__(self):
        return f"Protozoan_keyword(Protozoan_id={self.Protozoan_id},keyword={self.keyword},)"



    


class ViroidSuspectedEpidemiologicalOrigin(Base):
    """
    
    """
    __tablename__ = 'Viroid_suspectedEpidemiologicalOrigin'

    Viroid_id = Column(Integer(), ForeignKey('Viroid.id'), primary_key=True)
    suspectedEpidemiologicalOrigin_id = Column(Integer(), ForeignKey('GeographicalOrigin.id'), primary_key=True)
    

    def __repr__(self):
        return f"Viroid_suspectedEpidemiologicalOrigin(Viroid_id={self.Viroid_id},suspectedEpidemiologicalOrigin_id={self.suspectedEpidemiologicalOrigin_id},)"



    


class ViroidIsolationHost(Base):
    """
    
    """
    __tablename__ = 'Viroid_isolationHost'

    Viroid_id = Column(Integer(), ForeignKey('Viroid.id'), primary_key=True)
    isolationHost_id = Column(Integer(), ForeignKey('IsolationHost.id'), primary_key=True)
    

    def __repr__(self):
        return f"Viroid_isolationHost(Viroid_id={self.Viroid_id},isolationHost_id={self.isolationHost_id},)"



    


class ViroidProductionCellLine(Base):
    """
    
    """
    __tablename__ = 'Viroid_productionCellLine'

    Viroid_id = Column(Integer(), ForeignKey('Viroid.id'), primary_key=True)
    productionCellLine_id = Column(Integer(), ForeignKey('ProductionCellLine.id'), primary_key=True)
    

    def __repr__(self):
        return f"Viroid_productionCellLine(Viroid_id={self.Viroid_id},productionCellLine_id={self.productionCellLine_id},)"



    


class ViroidPropagationHost(Base):
    """
    
    """
    __tablename__ = 'Viroid_propagationHost'

    Viroid_id = Column(Integer(), ForeignKey('Viroid.id'), primary_key=True)
    propagationHost_id = Column(Integer(), ForeignKey('PropagationHost.id'), primary_key=True)
    

    def __repr__(self):
        return f"Viroid_propagationHost(Viroid_id={self.Viroid_id},propagationHost_id={self.propagationHost_id},)"



    


class ViroidTransmissionMethod(Base):
    """
    
    """
    __tablename__ = 'Viroid_transmissionMethod'

    Viroid_id = Column(Integer(), ForeignKey('Viroid.id'), primary_key=True)
    transmissionMethod_id = Column(Integer(), ForeignKey('TransmissionMethod.id'), primary_key=True)
    

    def __repr__(self):
        return f"Viroid_transmissionMethod(Viroid_id={self.Viroid_id},transmissionMethod_id={self.transmissionMethod_id},)"



    


class ViroidSequence(Base):
    """
    
    """
    __tablename__ = 'Viroid_sequence'

    Viroid_id = Column(Integer(), ForeignKey('Viroid.id'), primary_key=True)
    sequence_id = Column(Integer(), ForeignKey('Sequence.id'), primary_key=True, nullable=False )
    

    def __repr__(self):
        return f"Viroid_sequence(Viroid_id={self.Viroid_id},sequence_id={self.sequence_id},)"



    


class ViroidAdditionalCategory(Base):
    """
    
    """
    __tablename__ = 'Viroid_additionalCategory'

    Viroid_id = Column(Integer(), ForeignKey('Viroid.id'), primary_key=True)
    additionalCategory_id = Column(Integer(), ForeignKey('ProductCategory.id'), primary_key=True)
    

    def __repr__(self):
        return f"Viroid_additionalCategory(Viroid_id={self.Viroid_id},additionalCategory_id={self.additionalCategory_id},)"



    


class ViroidPathogenIdentification(Base):
    """
    
    """
    __tablename__ = 'Viroid_pathogenIdentification'

    Viroid_id = Column(Integer(), ForeignKey('Viroid.id'), primary_key=True)
    pathogenIdentification_id = Column(Integer(), ForeignKey('PathogenIdentification.id'), primary_key=True, nullable=False )
    

    def __repr__(self):
        return f"Viroid_pathogenIdentification(Viroid_id={self.Viroid_id},pathogenIdentification_id={self.pathogenIdentification_id},)"



    


class ViroidDoi(Base):
    """
    
    """
    __tablename__ = 'Viroid_doi'

    Viroid_id = Column(Integer(), ForeignKey('Viroid.id'), primary_key=True)
    doi_id = Column(Integer(), ForeignKey('Doi.id'), primary_key=True)
    

    def __repr__(self):
        return f"Viroid_doi(Viroid_id={self.Viroid_id},doi_id={self.doi_id},)"



    


class ViroidCollection(Base):
    """
    
    """
    __tablename__ = 'Viroid_collection'

    Viroid_id = Column(Integer(), ForeignKey('Viroid.id'), primary_key=True)
    collection_id = Column(Integer(), ForeignKey('Collection.id'), primary_key=True, nullable=False )
    

    def __repr__(self):
        return f"Viroid_collection(Viroid_id={self.Viroid_id},collection_id={self.collection_id},)"



    


class ViroidKeywords(Base):
    """
    
    """
    __tablename__ = 'Viroid_keywords'

    Viroid_id = Column(Integer(), ForeignKey('Viroid.id'), primary_key=True)
    keywords_id = Column(Integer(), ForeignKey('Keyword.id'), primary_key=True, nullable=False )
    

    def __repr__(self):
        return f"Viroid_keywords(Viroid_id={self.Viroid_id},keywords_id={self.keywords_id},)"



    


class ViroidComplementaryDocument(Base):
    """
    
    """
    __tablename__ = 'Viroid_complementaryDocument'

    Viroid_id = Column(Integer(), ForeignKey('Viroid.id'), primary_key=True)
    complementaryDocument_id = Column(Integer(), ForeignKey('Document.id'), primary_key=True)
    

    def __repr__(self):
        return f"Viroid_complementaryDocument(Viroid_id={self.Viroid_id},complementaryDocument_id={self.complementaryDocument_id},)"



    


class ViroidProductPicture(Base):
    """
    
    """
    __tablename__ = 'Viroid_productPicture'

    Viroid_id = Column(Integer(), ForeignKey('Viroid.id'), primary_key=True)
    productPicture_id = Column(Integer(), ForeignKey('Image.id'), primary_key=True)
    

    def __repr__(self):
        return f"Viroid_productPicture(Viroid_id={self.Viroid_id},productPicture_id={self.productPicture_id},)"



    


class ViroidExternalRelatedReference(Base):
    """
    
    """
    __tablename__ = 'Viroid_externalRelatedReference'

    Viroid_id = Column(Integer(), ForeignKey('Viroid.id'), primary_key=True)
    externalRelatedReference_id = Column(Integer(), ForeignKey('ExternalRelatedReference.id'), primary_key=True)
    

    def __repr__(self):
        return f"Viroid_externalRelatedReference(Viroid_id={self.Viroid_id},externalRelatedReference_id={self.externalRelatedReference_id},)"



    


class ViroidCertification(Base):
    """
    
    """
    __tablename__ = 'Viroid_certification'

    Viroid_id = Column(Integer(), ForeignKey('Viroid.id'), primary_key=True)
    certification_id = Column(Integer(), ForeignKey('Certification.id'), primary_key=True)
    

    def __repr__(self):
        return f"Viroid_certification(Viroid_id={self.Viroid_id},certification_id={self.certification_id},)"



    


class ViroidKeyword(Base):
    """
    
    """
    __tablename__ = 'Viroid_keyword'

    Viroid_id = Column(Integer(), ForeignKey('Viroid.id'), primary_key=True)
    keyword = Column(Text(), primary_key=True)
    

    def __repr__(self):
        return f"Viroid_keyword(Viroid_id={self.Viroid_id},keyword={self.keyword},)"



    


class PrionSuspectedEpidemiologicalOrigin(Base):
    """
    
    """
    __tablename__ = 'Prion_suspectedEpidemiologicalOrigin'

    Prion_id = Column(Integer(), ForeignKey('Prion.id'), primary_key=True)
    suspectedEpidemiologicalOrigin_id = Column(Integer(), ForeignKey('GeographicalOrigin.id'), primary_key=True)
    

    def __repr__(self):
        return f"Prion_suspectedEpidemiologicalOrigin(Prion_id={self.Prion_id},suspectedEpidemiologicalOrigin_id={self.suspectedEpidemiologicalOrigin_id},)"



    


class PrionIsolationHost(Base):
    """
    
    """
    __tablename__ = 'Prion_isolationHost'

    Prion_id = Column(Integer(), ForeignKey('Prion.id'), primary_key=True)
    isolationHost_id = Column(Integer(), ForeignKey('IsolationHost.id'), primary_key=True)
    

    def __repr__(self):
        return f"Prion_isolationHost(Prion_id={self.Prion_id},isolationHost_id={self.isolationHost_id},)"



    


class PrionProductionCellLine(Base):
    """
    
    """
    __tablename__ = 'Prion_productionCellLine'

    Prion_id = Column(Integer(), ForeignKey('Prion.id'), primary_key=True)
    productionCellLine_id = Column(Integer(), ForeignKey('ProductionCellLine.id'), primary_key=True)
    

    def __repr__(self):
        return f"Prion_productionCellLine(Prion_id={self.Prion_id},productionCellLine_id={self.productionCellLine_id},)"



    


class PrionPropagationHost(Base):
    """
    
    """
    __tablename__ = 'Prion_propagationHost'

    Prion_id = Column(Integer(), ForeignKey('Prion.id'), primary_key=True)
    propagationHost_id = Column(Integer(), ForeignKey('PropagationHost.id'), primary_key=True)
    

    def __repr__(self):
        return f"Prion_propagationHost(Prion_id={self.Prion_id},propagationHost_id={self.propagationHost_id},)"



    


class PrionTransmissionMethod(Base):
    """
    
    """
    __tablename__ = 'Prion_transmissionMethod'

    Prion_id = Column(Integer(), ForeignKey('Prion.id'), primary_key=True)
    transmissionMethod_id = Column(Integer(), ForeignKey('TransmissionMethod.id'), primary_key=True)
    

    def __repr__(self):
        return f"Prion_transmissionMethod(Prion_id={self.Prion_id},transmissionMethod_id={self.transmissionMethod_id},)"



    


class PrionSequence(Base):
    """
    
    """
    __tablename__ = 'Prion_sequence'

    Prion_id = Column(Integer(), ForeignKey('Prion.id'), primary_key=True)
    sequence_id = Column(Integer(), ForeignKey('Sequence.id'), primary_key=True, nullable=False )
    

    def __repr__(self):
        return f"Prion_sequence(Prion_id={self.Prion_id},sequence_id={self.sequence_id},)"



    


class PrionAdditionalCategory(Base):
    """
    
    """
    __tablename__ = 'Prion_additionalCategory'

    Prion_id = Column(Integer(), ForeignKey('Prion.id'), primary_key=True)
    additionalCategory_id = Column(Integer(), ForeignKey('ProductCategory.id'), primary_key=True)
    

    def __repr__(self):
        return f"Prion_additionalCategory(Prion_id={self.Prion_id},additionalCategory_id={self.additionalCategory_id},)"



    


class PrionPathogenIdentification(Base):
    """
    
    """
    __tablename__ = 'Prion_pathogenIdentification'

    Prion_id = Column(Integer(), ForeignKey('Prion.id'), primary_key=True)
    pathogenIdentification_id = Column(Integer(), ForeignKey('PathogenIdentification.id'), primary_key=True, nullable=False )
    

    def __repr__(self):
        return f"Prion_pathogenIdentification(Prion_id={self.Prion_id},pathogenIdentification_id={self.pathogenIdentification_id},)"



    


class PrionDoi(Base):
    """
    
    """
    __tablename__ = 'Prion_doi'

    Prion_id = Column(Integer(), ForeignKey('Prion.id'), primary_key=True)
    doi_id = Column(Integer(), ForeignKey('Doi.id'), primary_key=True)
    

    def __repr__(self):
        return f"Prion_doi(Prion_id={self.Prion_id},doi_id={self.doi_id},)"



    


class PrionCollection(Base):
    """
    
    """
    __tablename__ = 'Prion_collection'

    Prion_id = Column(Integer(), ForeignKey('Prion.id'), primary_key=True)
    collection_id = Column(Integer(), ForeignKey('Collection.id'), primary_key=True, nullable=False )
    

    def __repr__(self):
        return f"Prion_collection(Prion_id={self.Prion_id},collection_id={self.collection_id},)"



    


class PrionKeywords(Base):
    """
    
    """
    __tablename__ = 'Prion_keywords'

    Prion_id = Column(Integer(), ForeignKey('Prion.id'), primary_key=True)
    keywords_id = Column(Integer(), ForeignKey('Keyword.id'), primary_key=True, nullable=False )
    

    def __repr__(self):
        return f"Prion_keywords(Prion_id={self.Prion_id},keywords_id={self.keywords_id},)"



    


class PrionComplementaryDocument(Base):
    """
    
    """
    __tablename__ = 'Prion_complementaryDocument'

    Prion_id = Column(Integer(), ForeignKey('Prion.id'), primary_key=True)
    complementaryDocument_id = Column(Integer(), ForeignKey('Document.id'), primary_key=True)
    

    def __repr__(self):
        return f"Prion_complementaryDocument(Prion_id={self.Prion_id},complementaryDocument_id={self.complementaryDocument_id},)"



    


class PrionProductPicture(Base):
    """
    
    """
    __tablename__ = 'Prion_productPicture'

    Prion_id = Column(Integer(), ForeignKey('Prion.id'), primary_key=True)
    productPicture_id = Column(Integer(), ForeignKey('Image.id'), primary_key=True)
    

    def __repr__(self):
        return f"Prion_productPicture(Prion_id={self.Prion_id},productPicture_id={self.productPicture_id},)"



    


class PrionExternalRelatedReference(Base):
    """
    
    """
    __tablename__ = 'Prion_externalRelatedReference'

    Prion_id = Column(Integer(), ForeignKey('Prion.id'), primary_key=True)
    externalRelatedReference_id = Column(Integer(), ForeignKey('ExternalRelatedReference.id'), primary_key=True)
    

    def __repr__(self):
        return f"Prion_externalRelatedReference(Prion_id={self.Prion_id},externalRelatedReference_id={self.externalRelatedReference_id},)"



    


class PrionCertification(Base):
    """
    
    """
    __tablename__ = 'Prion_certification'

    Prion_id = Column(Integer(), ForeignKey('Prion.id'), primary_key=True)
    certification_id = Column(Integer(), ForeignKey('Certification.id'), primary_key=True)
    

    def __repr__(self):
        return f"Prion_certification(Prion_id={self.Prion_id},certification_id={self.certification_id},)"



    


class PrionKeyword(Base):
    """
    
    """
    __tablename__ = 'Prion_keyword'

    Prion_id = Column(Integer(), ForeignKey('Prion.id'), primary_key=True)
    keyword = Column(Text(), primary_key=True)
    

    def __repr__(self):
        return f"Prion_keyword(Prion_id={self.Prion_id},keyword={self.keyword},)"



    


class MaterialSafetyDataSheetKeyword(Base):
    """
    
    """
    __tablename__ = 'MaterialSafetyDataSheet_keyword'

    MaterialSafetyDataSheet_id = Column(Integer(), ForeignKey('MaterialSafetyDataSheet.id'), primary_key=True)
    keyword = Column(Text(), primary_key=True)
    

    def __repr__(self):
        return f"MaterialSafetyDataSheet_keyword(MaterialSafetyDataSheet_id={self.MaterialSafetyDataSheet_id},keyword={self.keyword},)"



    


class FileKeyword(Base):
    """
    
    """
    __tablename__ = 'File_keyword'

    File_id = Column(Integer(), ForeignKey('File.id'), primary_key=True)
    keyword = Column(Text(), primary_key=True)
    

    def __repr__(self):
        return f"File_keyword(File_id={self.File_id},keyword={self.keyword},)"



    


class DataKeyword(Base):
    """
    
    """
    __tablename__ = 'Data_keyword'

    Data_id = Column(Integer(), ForeignKey('Data.id'), primary_key=True)
    keyword = Column(Text(), primary_key=True)
    

    def __repr__(self):
        return f"Data_keyword(Data_id={self.Data_id},keyword={self.keyword},)"



    


class DocumentKeyword(Base):
    """
    
    """
    __tablename__ = 'Document_keyword'

    Document_id = Column(Integer(), ForeignKey('Document.id'), primary_key=True)
    keyword = Column(Text(), primary_key=True)
    

    def __repr__(self):
        return f"Document_keyword(Document_id={self.Document_id},keyword={self.keyword},)"



    


class AudioKeyword(Base):
    """
    
    """
    __tablename__ = 'Audio_keyword'

    Audio_id = Column(Integer(), ForeignKey('Audio.id'), primary_key=True)
    keyword = Column(Text(), primary_key=True)
    

    def __repr__(self):
        return f"Audio_keyword(Audio_id={self.Audio_id},keyword={self.keyword},)"



    


class VideoKeyword(Base):
    """
    
    """
    __tablename__ = 'Video_keyword'

    Video_id = Column(Integer(), ForeignKey('Video.id'), primary_key=True)
    keyword = Column(Text(), primary_key=True)
    

    def __repr__(self):
        return f"Video_keyword(Video_id={self.Video_id},keyword={self.keyword},)"



    


class ImageKeyword(Base):
    """
    
    """
    __tablename__ = 'Image_keyword'

    Image_id = Column(Integer(), ForeignKey('Image.id'), primary_key=True)
    keyword = Column(Text(), primary_key=True)
    

    def __repr__(self):
        return f"Image_keyword(Image_id={self.Image_id},keyword={self.keyword},)"



    


class ContactPointKeyword(Base):
    """
    
    """
    __tablename__ = 'ContactPoint_keyword'

    ContactPoint_id = Column(Integer(), ForeignKey('ContactPoint.id'), primary_key=True)
    keyword = Column(Text(), primary_key=True)
    

    def __repr__(self):
        return f"ContactPoint_keyword(ContactPoint_id={self.ContactPoint_id},keyword={self.keyword},)"



    


class LicenseKeyword(Base):
    """
    
    """
    __tablename__ = 'License_keyword'

    License_id = Column(Integer(), ForeignKey('License.id'), primary_key=True)
    keyword = Column(Text(), primary_key=True)
    

    def __repr__(self):
        return f"License_keyword(License_id={self.License_id},keyword={self.keyword},)"



    


class CertificationCertificationDocument(Base):
    """
    
    """
    __tablename__ = 'Certification_certificationDocument'

    Certification_id = Column(Integer(), ForeignKey('Certification.id'), primary_key=True)
    certificationDocument_id = Column(Integer(), ForeignKey('Document.id'), primary_key=True)
    

    def __repr__(self):
        return f"Certification_certificationDocument(Certification_id={self.Certification_id},certificationDocument_id={self.certificationDocument_id},)"



    


class CertificationKeyword(Base):
    """
    
    """
    __tablename__ = 'Certification_keyword'

    Certification_id = Column(Integer(), ForeignKey('Certification.id'), primary_key=True)
    keyword = Column(Text(), primary_key=True)
    

    def __repr__(self):
        return f"Certification_keyword(Certification_id={self.Certification_id},keyword={self.keyword},)"



    


class Dataset(Resource):
    """
    A collection of data, published or curated by a single agent, and available for access
    """
    __tablename__ = 'Dataset'

    id = Column(Integer(), primary_key=True, autoincrement=True , nullable=False )
    title = Column(Text(), nullable=False )
    description = Column(Text(), nullable=False )
    version = Column(Text())
    dateIssued = Column(DateTime())
    dateModified = Column(DateTime())
    
    
    keyword_rel = relationship( "DatasetKeyword" )
    keyword = association_proxy("keyword_rel", "keyword",
                                  creator=lambda x_: DatasetKeyword(keyword=x_))
    

    def __repr__(self):
        return f"Dataset(id={self.id},title={self.title},description={self.description},version={self.version},dateIssued={self.dateIssued},dateModified={self.dateModified},)"



    
    # Using concrete inheritance: see https://docs.sqlalchemy.org/en/14/orm/inheritance.html
    __mapper_args__ = {
        'concrete': True
    }
    


class DataService(Resource):
    """
    A collection of operations that provides access to one or more datasets or data processing functions
    """
    __tablename__ = 'DataService'

    id = Column(Integer(), primary_key=True, autoincrement=True , nullable=False )
    title = Column(Text(), nullable=False )
    description = Column(Text())
    endpointUrl = Column(Text(), nullable=False )
    dateIssued = Column(DateTime())
    dateModified = Column(DateTime())
    
    
    # ManyToMany
    servesDataset = relationship( "Dataset", secondary="DataService_servesDataset")
    
    
    keyword_rel = relationship( "DataServiceKeyword" )
    keyword = association_proxy("keyword_rel", "keyword",
                                  creator=lambda x_: DataServiceKeyword(keyword=x_))
    

    def __repr__(self):
        return f"DataService(id={self.id},title={self.title},description={self.description},endpointUrl={self.endpointUrl},dateIssued={self.dateIssued},dateModified={self.dateModified},)"



    
    # Using concrete inheritance: see https://docs.sqlalchemy.org/en/14/orm/inheritance.html
    __mapper_args__ = {
        'concrete': True
    }
    


class Version(Resource):
    """
    Numeric code assigned to identify a particular historical version of a work (e.g. software or technical standards)
    """
    __tablename__ = 'Version'

    id = Column(Integer(), primary_key=True, autoincrement=True , nullable=False )
    version = Column(Text(), nullable=False )
    versionOf = Column(Text(), nullable=False )
    dateIssued = Column(DateTime())
    dateModified = Column(DateTime())
    
    
    # ManyToMany
    resource = relationship( "Resource", secondary="Version_resource")
    
    
    keyword_rel = relationship( "VersionKeyword" )
    keyword = association_proxy("keyword_rel", "keyword",
                                  creator=lambda x_: VersionKeyword(keyword=x_))
    

    def __repr__(self):
        return f"Version(id={self.id},version={self.version},versionOf={self.versionOf},dateIssued={self.dateIssued},dateModified={self.dateModified},)"



    
    # Using concrete inheritance: see https://docs.sqlalchemy.org/en/14/orm/inheritance.html
    __mapper_args__ = {
        'concrete': True
    }
    


class PathogenIdentification(Resource):
    """
    A collection of distinguishing information that enables the differentiation of a pathogen from another
    """
    __tablename__ = 'PathogenIdentification'

    id = Column(Integer(), primary_key=True, autoincrement=True , nullable=False )
    pathogenType = Column(Text(), nullable=False )
    subspecies = Column(Text())
    strain = Column(Text())
    isolate = Column(Text())
    genotype = Column(Text())
    serotype = Column(Text())
    dateIssued = Column(DateTime())
    dateModified = Column(DateTime())
    taxon_id = Column(Integer(), ForeignKey('Taxon.id'), nullable=False )
    taxon = relationship("Taxon", uselist=False, foreign_keys=[taxon_id])
    pathogenName_id = Column(Integer(), ForeignKey('CommonName.id'), nullable=False )
    pathogenName = relationship("CommonName", uselist=False, foreign_keys=[pathogenName_id])
    variant_id = Column(Integer(), ForeignKey('Variant.id'))
    variant = relationship("Variant", uselist=False, foreign_keys=[variant_id])
    
    
    hostType_rel = relationship( "PathogenIdentificationHostType" )
    hostType = association_proxy("hostType_rel", "hostType",
                                  creator=lambda x_: PathogenIdentificationHostType(hostType=x_))
    
    
    keyword_rel = relationship( "PathogenIdentificationKeyword" )
    keyword = association_proxy("keyword_rel", "keyword",
                                  creator=lambda x_: PathogenIdentificationKeyword(keyword=x_))
    

    def __repr__(self):
        return f"PathogenIdentification(id={self.id},pathogenType={self.pathogenType},subspecies={self.subspecies},strain={self.strain},isolate={self.isolate},genotype={self.genotype},serotype={self.serotype},dateIssued={self.dateIssued},dateModified={self.dateModified},taxon_id={self.taxon_id},pathogenName_id={self.pathogenName_id},variant_id={self.variant_id},)"



    
    # Using concrete inheritance: see https://docs.sqlalchemy.org/en/14/orm/inheritance.html
    __mapper_args__ = {
        'concrete': True
    }
    


class Publication(Resource):
    """
    A scientific publication
    """
    __tablename__ = 'Publication'

    id = Column(Integer(), primary_key=True, autoincrement=True , nullable=False )
    title = Column(Text(), nullable=False )
    authors = Column(Text(), nullable=False )
    abstract = Column(Text(), nullable=False )
    dateIssued = Column(DateTime())
    dateModified = Column(DateTime())
    doi_id = Column(Integer(), ForeignKey('Doi.id'), nullable=False )
    doi = relationship("Doi", uselist=False, foreign_keys=[doi_id])
    journal_id = Column(Integer(), ForeignKey('Journal.id'))
    journal = relationship("Journal", uselist=False, foreign_keys=[journal_id])
    
    
    keyword_rel = relationship( "PublicationKeyword" )
    keyword = association_proxy("keyword_rel", "keyword",
                                  creator=lambda x_: PublicationKeyword(keyword=x_))
    

    def __repr__(self):
        return f"Publication(id={self.id},title={self.title},authors={self.authors},abstract={self.abstract},dateIssued={self.dateIssued},dateModified={self.dateModified},doi_id={self.doi_id},journal_id={self.journal_id},)"



    
    # Using concrete inheritance: see https://docs.sqlalchemy.org/en/14/orm/inheritance.html
    __mapper_args__ = {
        'concrete': True
    }
    


class Term(Resource):
    """
    Word or phrase from a specialized area of knowledge
    """
    __tablename__ = 'Term'

    id = Column(Integer(), primary_key=True, autoincrement=True , nullable=False )
    title = Column(Text(), nullable=False )
    description = Column(Text())
    weight = Column(Integer(), nullable=False )
    dateIssued = Column(DateTime())
    dateModified = Column(DateTime())
    inVocabulary_id = Column(Integer(), ForeignKey('Vocabulary.id'), nullable=False )
    inVocabulary = relationship("Vocabulary", uselist=False, foreign_keys=[inVocabulary_id])
    
    
    keyword_rel = relationship( "TermKeyword" )
    keyword = association_proxy("keyword_rel", "keyword",
                                  creator=lambda x_: TermKeyword(keyword=x_))
    

    def __repr__(self):
        return f"Term(id={self.id},title={self.title},description={self.description},weight={self.weight},dateIssued={self.dateIssued},dateModified={self.dateModified},inVocabulary_id={self.inVocabulary_id},)"



    
    # Using concrete inheritance: see https://docs.sqlalchemy.org/en/14/orm/inheritance.html
    __mapper_args__ = {
        'concrete': True
    }
    


class ExternalRelatedReference(Resource):
    """
    A reference that permits to retrieve an item from an external provider
    """
    __tablename__ = 'ExternalRelatedReference'

    id = Column(Integer(), primary_key=True, autoincrement=True , nullable=False )
    reference = Column(Text(), nullable=False )
    referenceLabel = Column(Text(), nullable=False )
    referenceProviderPrefix = Column(Text(), nullable=False )
    referenceProviderName = Column(Text(), nullable=False )
    dateIssued = Column(DateTime())
    dateModified = Column(DateTime())
    
    
    keyword_rel = relationship( "ExternalRelatedReferenceKeyword" )
    keyword = association_proxy("keyword_rel", "keyword",
                                  creator=lambda x_: ExternalRelatedReferenceKeyword(keyword=x_))
    

    def __repr__(self):
        return f"ExternalRelatedReference(id={self.id},reference={self.reference},referenceLabel={self.referenceLabel},referenceProviderPrefix={self.referenceProviderPrefix},referenceProviderName={self.referenceProviderName},dateIssued={self.dateIssued},dateModified={self.dateModified},)"



    
    # Using concrete inheritance: see https://docs.sqlalchemy.org/en/14/orm/inheritance.html
    __mapper_args__ = {
        'concrete': True
    }
    


class Sequence(Resource):
    """
    A nucleic acid or protein sequence information
    """
    __tablename__ = 'Sequence'

    id = Column(Integer(), primary_key=True, autoincrement=True , nullable=False )
    sequenceFasta = Column(Text())
    dateIssued = Column(DateTime())
    dateModified = Column(DateTime())
    
    
    # ManyToMany
    sequenceReference = relationship( "SequenceReference", secondary="Sequence_sequenceReference")
    
    
    keyword_rel = relationship( "SequenceKeyword" )
    keyword = association_proxy("keyword_rel", "keyword",
                                  creator=lambda x_: SequenceKeyword(keyword=x_))
    

    def __repr__(self):
        return f"Sequence(id={self.id},sequenceFasta={self.sequenceFasta},dateIssued={self.dateIssued},dateModified={self.dateModified},)"



    
    # Using concrete inheritance: see https://docs.sqlalchemy.org/en/14/orm/inheritance.html
    __mapper_args__ = {
        'concrete': True
    }
    


class SequenceReference(Resource):
    """
    A reference that permits to retrieve the sequence information from a sequence provider
    """
    __tablename__ = 'SequenceReference'

    id = Column(Integer(), primary_key=True, autoincrement=True , nullable=False )
    accessionNumber = Column(Text(), nullable=False )
    sequenceProvider = Column(Text(), nullable=False )
    dateIssued = Column(DateTime())
    dateModified = Column(DateTime())
    
    
    keyword_rel = relationship( "SequenceReferenceKeyword" )
    keyword = association_proxy("keyword_rel", "keyword",
                                  creator=lambda x_: SequenceReferenceKeyword(keyword=x_))
    

    def __repr__(self):
        return f"SequenceReference(id={self.id},accessionNumber={self.accessionNumber},sequenceProvider={self.sequenceProvider},dateIssued={self.dateIssued},dateModified={self.dateModified},)"



    
    # Using concrete inheritance: see https://docs.sqlalchemy.org/en/14/orm/inheritance.html
    __mapper_args__ = {
        'concrete': True
    }
    


class PersonOrOrganization(Resource):
    """
    A person or an organization
    """
    __tablename__ = 'PersonOrOrganization'

    id = Column(Integer(), primary_key=True, autoincrement=True , nullable=False )
    name = Column(Text(), nullable=False )
    description = Column(Text())
    homePage = Column(Text())
    dateIssued = Column(DateTime())
    dateModified = Column(DateTime())
    contactPoint_id = Column(Integer(), ForeignKey('ContactPoint.id'))
    contactPoint = relationship("ContactPoint", uselist=False, foreign_keys=[contactPoint_id])
    logo_id = Column(Integer(), ForeignKey('Image.id'))
    logo = relationship("Image", uselist=False, foreign_keys=[logo_id])
    
    
    keyword_rel = relationship( "PersonOrOrganizationKeyword" )
    keyword = association_proxy("keyword_rel", "keyword",
                                  creator=lambda x_: PersonOrOrganizationKeyword(keyword=x_))
    

    def __repr__(self):
        return f"PersonOrOrganization(id={self.id},name={self.name},description={self.description},homePage={self.homePage},dateIssued={self.dateIssued},dateModified={self.dateModified},contactPoint_id={self.contactPoint_id},logo_id={self.logo_id},)"



    
    # Using concrete inheritance: see https://docs.sqlalchemy.org/en/14/orm/inheritance.html
    __mapper_args__ = {
        'concrete': True
    }
    


class BiologicalMaterialOrigin(Resource):
    """
    Information about the origin of the biological material, compulsory for access, utilization, and benefit-sharing of genetic resources in compliance with the Nagoya Protocol
    """
    __tablename__ = 'BiologicalMaterialOrigin'

    id = Column(Integer(), primary_key=True, autoincrement=True , nullable=False )
    recombinantMaterial = Column(Boolean(), nullable=False )
    biologicalSourceType = Column(Boolean(), nullable=False )
    dateIssued = Column(DateTime())
    dateModified = Column(DateTime())
    
    
    # ManyToMany
    biologicalPartOrigin = relationship( "BiologicalPartOrigin", secondary="BiologicalMaterialOrigin_biologicalPartOrigin")
    
    
    keyword_rel = relationship( "BiologicalMaterialOriginKeyword" )
    keyword = association_proxy("keyword_rel", "keyword",
                                  creator=lambda x_: BiologicalMaterialOriginKeyword(keyword=x_))
    

    def __repr__(self):
        return f"BiologicalMaterialOrigin(id={self.id},recombinantMaterial={self.recombinantMaterial},biologicalSourceType={self.biologicalSourceType},dateIssued={self.dateIssued},dateModified={self.dateModified},)"



    
    # Using concrete inheritance: see https://docs.sqlalchemy.org/en/14/orm/inheritance.html
    __mapper_args__ = {
        'concrete': True
    }
    


class BiologicalPartOrigin(Resource):
    """
    Information on the origin of a unitary, cohesive part that is part of, or constitutes the biological material. It can be multiple parts in case of a recombinant biological material
    """
    __tablename__ = 'BiologicalPartOrigin'

    id = Column(Integer(), primary_key=True, autoincrement=True , nullable=False )
    accessToPhysicalGeneticResource = Column(Boolean(), nullable=False )
    dateIssued = Column(DateTime())
    dateModified = Column(DateTime())
    recombinantPartIdentification_id = Column(Integer(), ForeignKey('RecombinantPartIdentification.id'))
    recombinantPartIdentification = relationship("RecombinantPartIdentification", uselist=False, foreign_keys=[recombinantPartIdentification_id])
    
    
    keyword_rel = relationship( "BiologicalPartOriginKeyword" )
    keyword = association_proxy("keyword_rel", "keyword",
                                  creator=lambda x_: BiologicalPartOriginKeyword(keyword=x_))
    

    def __repr__(self):
        return f"BiologicalPartOrigin(id={self.id},accessToPhysicalGeneticResource={self.accessToPhysicalGeneticResource},dateIssued={self.dateIssued},dateModified={self.dateModified},recombinantPartIdentification_id={self.recombinantPartIdentification_id},)"



    
    # Using concrete inheritance: see https://docs.sqlalchemy.org/en/14/orm/inheritance.html
    __mapper_args__ = {
        'concrete': True
    }
    


class RecombinantPartIdentification(Resource):
    """
    Identification of a recombinant part
    """
    __tablename__ = 'RecombinantPartIdentification'

    id = Column(Integer(), primary_key=True, autoincrement=True , nullable=False )
    partIdentification = Column(Text(), nullable=False )
    dateIssued = Column(DateTime())
    dateModified = Column(DateTime())
    
    
    # ManyToMany
    sequence = relationship( "Sequence", secondary="RecombinantPartIdentification_sequence")
    
    
    keyword_rel = relationship( "RecombinantPartIdentificationKeyword" )
    keyword = association_proxy("keyword_rel", "keyword",
                                  creator=lambda x_: RecombinantPartIdentificationKeyword(keyword=x_))
    

    def __repr__(self):
        return f"RecombinantPartIdentification(id={self.id},partIdentification={self.partIdentification},dateIssued={self.dateIssued},dateModified={self.dateModified},)"



    
    # Using concrete inheritance: see https://docs.sqlalchemy.org/en/14/orm/inheritance.html
    __mapper_args__ = {
        'concrete': True
    }
    


class MaterialSafetyDataSheet(Resource):
    """
    A Material Safety Data Sheet (MSDS) or Safety Data Sheet (SDS) is a standardized document that contains crucial occupational safety and health information related to the product
    """
    __tablename__ = 'MaterialSafetyDataSheet'

    id = Column(Integer(), primary_key=True, autoincrement=True , nullable=False )
    physicalChemicalProperties = Column(Text())
    hazardsIdentification = Column(Text())
    firstAidMeasures = Column(Text())
    fireFightingMeasures = Column(Text())
    accidentalReleaseMeasures = Column(Text())
    handlingAndStorage = Column(Text())
    exposureControlsPersonalProtection = Column(Text())
    stabilityAndReactivity = Column(Text())
    toxicologicalInformation = Column(Text())
    ecologicalInformation = Column(Text())
    disposalConsiderations = Column(Text())
    transportInformation = Column(Text())
    regulatoryInformation = Column(Text())
    furtherInformation = Column(Text())
    dateIssued = Column(DateTime())
    dateModified = Column(DateTime())
    materialSafetyContact_id = Column(Integer(), ForeignKey('ContactPoint.id'), nullable=False )
    materialSafetyContact = relationship("ContactPoint", uselist=False, foreign_keys=[materialSafetyContact_id])
    
    
    keyword_rel = relationship( "MaterialSafetyDataSheetKeyword" )
    keyword = association_proxy("keyword_rel", "keyword",
                                  creator=lambda x_: MaterialSafetyDataSheetKeyword(keyword=x_))
    

    def __repr__(self):
        return f"MaterialSafetyDataSheet(id={self.id},physicalChemicalProperties={self.physicalChemicalProperties},hazardsIdentification={self.hazardsIdentification},firstAidMeasures={self.firstAidMeasures},fireFightingMeasures={self.fireFightingMeasures},accidentalReleaseMeasures={self.accidentalReleaseMeasures},handlingAndStorage={self.handlingAndStorage},exposureControlsPersonalProtection={self.exposureControlsPersonalProtection},stabilityAndReactivity={self.stabilityAndReactivity},toxicologicalInformation={self.toxicologicalInformation},ecologicalInformation={self.ecologicalInformation},disposalConsiderations={self.disposalConsiderations},transportInformation={self.transportInformation},regulatoryInformation={self.regulatoryInformation},furtherInformation={self.furtherInformation},dateIssued={self.dateIssued},dateModified={self.dateModified},materialSafetyContact_id={self.materialSafetyContact_id},)"



    
    # Using concrete inheritance: see https://docs.sqlalchemy.org/en/14/orm/inheritance.html
    __mapper_args__ = {
        'concrete': True
    }
    


class File(Resource):
    """
    Digital document or record stored in a specific format that contains data or information
    """
    __tablename__ = 'File'

    id = Column(Integer(), primary_key=True, autoincrement=True , nullable=False )
    name = Column(Text(), nullable=False )
    description = Column(Text())
    contentUrl = Column(Text(), nullable=False )
    format = Column(Text(), nullable=False )
    dateIssued = Column(DateTime())
    dateModified = Column(DateTime())
    license_id = Column(Integer(), ForeignKey('License.id'))
    license = relationship("License", uselist=False, foreign_keys=[license_id])
    
    
    keyword_rel = relationship( "FileKeyword" )
    keyword = association_proxy("keyword_rel", "keyword",
                                  creator=lambda x_: FileKeyword(keyword=x_))
    

    def __repr__(self):
        return f"File(id={self.id},name={self.name},description={self.description},contentUrl={self.contentUrl},format={self.format},dateIssued={self.dateIssued},dateModified={self.dateModified},license_id={self.license_id},)"



    
    # Using concrete inheritance: see https://docs.sqlalchemy.org/en/14/orm/inheritance.html
    __mapper_args__ = {
        'concrete': True
    }
    


class ContactPoint(Resource):
    """
    Entity serving as focal point of information
    """
    __tablename__ = 'ContactPoint'

    id = Column(Integer(), primary_key=True, autoincrement=True , nullable=False )
    name = Column(Text(), nullable=False )
    description = Column(Text())
    email = Column(Text())
    telephone = Column(Text())
    streetAddress = Column(Text())
    addressLocality = Column(Text())
    addressRegion = Column(Text())
    postalCode = Column(Text())
    orcidId = Column(Text())
    dateIssued = Column(DateTime())
    dateModified = Column(DateTime())
    addressCountry_id = Column(Integer(), ForeignKey('Country.id'))
    addressCountry = relationship("Country", uselist=False, foreign_keys=[addressCountry_id])
    
    
    keyword_rel = relationship( "ContactPointKeyword" )
    keyword = association_proxy("keyword_rel", "keyword",
                                  creator=lambda x_: ContactPointKeyword(keyword=x_))
    

    def __repr__(self):
        return f"ContactPoint(id={self.id},name={self.name},description={self.description},email={self.email},telephone={self.telephone},streetAddress={self.streetAddress},addressLocality={self.addressLocality},addressRegion={self.addressRegion},postalCode={self.postalCode},orcidId={self.orcidId},dateIssued={self.dateIssued},dateModified={self.dateModified},addressCountry_id={self.addressCountry_id},)"



    
    # Using concrete inheritance: see https://docs.sqlalchemy.org/en/14/orm/inheritance.html
    __mapper_args__ = {
        'concrete': True
    }
    


class License(Resource):
    """
    The legal terms and conditions under which the subject can be used, shared, or distributed, indicating any restrictions or permissions
    """
    __tablename__ = 'License'

    id = Column(Integer(), primary_key=True, autoincrement=True , nullable=False )
    title = Column(Text(), nullable=False )
    description = Column(Text())
    resourceUrl = Column(Text())
    licensingOrAttribution = Column(Text())
    dateIssued = Column(DateTime())
    dateModified = Column(DateTime())
    logo_id = Column(Integer(), ForeignKey('Image.id'))
    logo = relationship("Image", uselist=False, foreign_keys=[logo_id])
    
    
    keyword_rel = relationship( "LicenseKeyword" )
    keyword = association_proxy("keyword_rel", "keyword",
                                  creator=lambda x_: LicenseKeyword(keyword=x_))
    

    def __repr__(self):
        return f"License(id={self.id},title={self.title},description={self.description},resourceUrl={self.resourceUrl},licensingOrAttribution={self.licensingOrAttribution},dateIssued={self.dateIssued},dateModified={self.dateModified},logo_id={self.logo_id},)"



    
    # Using concrete inheritance: see https://docs.sqlalchemy.org/en/14/orm/inheritance.html
    __mapper_args__ = {
        'concrete': True
    }
    


class Certification(Resource):
    """
    Assurance given by an independent certification body that a product, service or system meets the requirements of a standard
    """
    __tablename__ = 'Certification'

    id = Column(Integer(), primary_key=True, autoincrement=True , nullable=False )
    title = Column(Text(), nullable=False )
    description = Column(Text())
    resourceUrl = Column(Text())
    dateIssued = Column(DateTime())
    dateModified = Column(DateTime())
    logo_id = Column(Integer(), ForeignKey('Image.id'))
    logo = relationship("Image", uselist=False, foreign_keys=[logo_id])
    
    
    # ManyToMany
    certificationDocument = relationship( "Document", secondary="Certification_certificationDocument")
    
    
    keyword_rel = relationship( "CertificationKeyword" )
    keyword = association_proxy("keyword_rel", "keyword",
                                  creator=lambda x_: CertificationKeyword(keyword=x_))
    

    def __repr__(self):
        return f"Certification(id={self.id},title={self.title},description={self.description},resourceUrl={self.resourceUrl},dateIssued={self.dateIssued},dateModified={self.dateModified},logo_id={self.logo_id},)"



    
    # Using concrete inheritance: see https://docs.sqlalchemy.org/en/14/orm/inheritance.html
    __mapper_args__ = {
        'concrete': True
    }
    


class Catalogue(Dataset):
    """
    A curated collection of metadata about resources
    """
    __tablename__ = 'Catalogue'

    id = Column(Integer(), primary_key=True, autoincrement=True , nullable=False )
    title = Column(Text(), nullable=False )
    description = Column(Text(), nullable=False )
    version = Column(Text())
    dateIssued = Column(DateTime())
    dateModified = Column(DateTime())
    
    
    keyword_rel = relationship( "CatalogueKeyword" )
    keyword = association_proxy("keyword_rel", "keyword",
                                  creator=lambda x_: CatalogueKeyword(keyword=x_))
    

    def __repr__(self):
        return f"Catalogue(id={self.id},title={self.title},description={self.description},version={self.version},dateIssued={self.dateIssued},dateModified={self.dateModified},)"



    
    # Using concrete inheritance: see https://docs.sqlalchemy.org/en/14/orm/inheritance.html
    __mapper_args__ = {
        'concrete': True
    }
    


class DataProvider(DataService):
    """
    An external API (Application Programming Interface) or Endpoint that permits to retrieve data from other sources
    """
    __tablename__ = 'DataProvider'

    id = Column(Integer(), primary_key=True, autoincrement=True , nullable=False )
    loginRequestMethod = Column(Text())
    loginUrl = Column(Text())
    loginTokenName = Column(Text())
    queryMethod = Column(Text(), nullable=False )
    contentType = Column(Text(), nullable=False )
    weight = Column(Integer(), nullable=False )
    title = Column(Text(), nullable=False )
    description = Column(Text())
    endpointUrl = Column(Text(), nullable=False )
    dateIssued = Column(DateTime())
    dateModified = Column(DateTime())
    license_id = Column(Integer(), ForeignKey('License.id'))
    license = relationship("License", uselist=False, foreign_keys=[license_id])
    
    
    providedEntityType_rel = relationship( "DataProviderProvidedEntityType" )
    providedEntityType = association_proxy("providedEntityType_rel", "providedEntityType",
                                  creator=lambda x_: DataProviderProvidedEntityType(providedEntityType=x_))
    
    
    # ManyToMany
    servesDataset = relationship( "Dataset", secondary="DataProvider_servesDataset")
    
    
    keyword_rel = relationship( "DataProviderKeyword" )
    keyword = association_proxy("keyword_rel", "keyword",
                                  creator=lambda x_: DataProviderKeyword(keyword=x_))
    

    def __repr__(self):
        return f"DataProvider(id={self.id},loginRequestMethod={self.loginRequestMethod},loginUrl={self.loginUrl},loginTokenName={self.loginTokenName},queryMethod={self.queryMethod},contentType={self.contentType},weight={self.weight},title={self.title},description={self.description},endpointUrl={self.endpointUrl},dateIssued={self.dateIssued},dateModified={self.dateModified},license_id={self.license_id},)"



    
    # Using concrete inheritance: see https://docs.sqlalchemy.org/en/14/orm/inheritance.html
    __mapper_args__ = {
        'concrete': True
    }
    


class CommonName(Term):
    """
    Vernacular name that is the name used in everyday language to refer to something like an organism or group of organisms. This name is typically easier to remember and pronounce compared to the scientific or technical name
    """
    __tablename__ = 'CommonName'

    id = Column(Integer(), primary_key=True, autoincrement=True , nullable=False )
    title = Column(Text(), nullable=False )
    description = Column(Text())
    weight = Column(Integer(), nullable=False )
    dateIssued = Column(DateTime())
    dateModified = Column(DateTime())
    inVocabulary_id = Column(Integer(), ForeignKey('Vocabulary.id'), nullable=False )
    inVocabulary = relationship("Vocabulary", uselist=False, foreign_keys=[inVocabulary_id])
    
    
    # ManyToMany
    alternateName = relationship( "AlternateName", secondary="CommonName_alternateName")
    
    
    sourceOfInformation_rel = relationship( "CommonNameSourceOfInformation" )
    sourceOfInformation = association_proxy("sourceOfInformation_rel", "sourceOfInformation",
                                  creator=lambda x_: CommonNameSourceOfInformation(sourceOfInformation=x_))
    
    
    keyword_rel = relationship( "CommonNameKeyword" )
    keyword = association_proxy("keyword_rel", "keyword",
                                  creator=lambda x_: CommonNameKeyword(keyword=x_))
    

    def __repr__(self):
        return f"CommonName(id={self.id},title={self.title},description={self.description},weight={self.weight},dateIssued={self.dateIssued},dateModified={self.dateModified},inVocabulary_id={self.inVocabulary_id},)"



    
    # Using concrete inheritance: see https://docs.sqlalchemy.org/en/14/orm/inheritance.html
    __mapper_args__ = {
        'concrete': True
    }
    


class AlternateName(Term):
    """
    List of other names for things
    """
    __tablename__ = 'AlternateName'

    id = Column(Integer(), primary_key=True, autoincrement=True , nullable=False )
    title = Column(Text(), nullable=False )
    description = Column(Text())
    weight = Column(Integer(), nullable=False )
    dateIssued = Column(DateTime())
    dateModified = Column(DateTime())
    inVocabulary_id = Column(Integer(), ForeignKey('Vocabulary.id'), nullable=False )
    inVocabulary = relationship("Vocabulary", uselist=False, foreign_keys=[inVocabulary_id])
    
    
    # ManyToMany
    alternateName = relationship( "AlternateName", secondary="AlternateName_alternateName")
    
    
    sourceOfInformation_rel = relationship( "AlternateNameSourceOfInformation" )
    sourceOfInformation = association_proxy("sourceOfInformation_rel", "sourceOfInformation",
                                  creator=lambda x_: AlternateNameSourceOfInformation(sourceOfInformation=x_))
    
    
    keyword_rel = relationship( "AlternateNameKeyword" )
    keyword = association_proxy("keyword_rel", "keyword",
                                  creator=lambda x_: AlternateNameKeyword(keyword=x_))
    

    def __repr__(self):
        return f"AlternateName(id={self.id},title={self.title},description={self.description},weight={self.weight},dateIssued={self.dateIssued},dateModified={self.dateModified},inVocabulary_id={self.inVocabulary_id},)"



    
    # Using concrete inheritance: see https://docs.sqlalchemy.org/en/14/orm/inheritance.html
    __mapper_args__ = {
        'concrete': True
    }
    


class RiskGroup(Term):
    """
    Risk group classification guides initial handling of biological agents in labs but doesn't systematically equate to biosafety levels. Actual risk varies with the agent, procedures, and personnel competence
    """
    __tablename__ = 'RiskGroup'

    id = Column(Integer(), primary_key=True, autoincrement=True , nullable=False )
    title = Column(Text(), nullable=False )
    description = Column(Text())
    weight = Column(Integer(), nullable=False )
    dateIssued = Column(DateTime())
    dateModified = Column(DateTime())
    inVocabulary_id = Column(Integer(), ForeignKey('Vocabulary.id'), nullable=False )
    inVocabulary = relationship("Vocabulary", uselist=False, foreign_keys=[inVocabulary_id])
    
    
    keyword_rel = relationship( "RiskGroupKeyword" )
    keyword = association_proxy("keyword_rel", "keyword",
                                  creator=lambda x_: RiskGroupKeyword(keyword=x_))
    

    def __repr__(self):
        return f"RiskGroup(id={self.id},title={self.title},description={self.description},weight={self.weight},dateIssued={self.dateIssued},dateModified={self.dateModified},inVocabulary_id={self.inVocabulary_id},)"



    
    # Using concrete inheritance: see https://docs.sqlalchemy.org/en/14/orm/inheritance.html
    __mapper_args__ = {
        'concrete': True
    }
    


class Doi(Term):
    """
    A unique string identifier assigned to a digital object, providing a permanent link for reliable citation and access.  The Digital Object Identifier (DOI) is a persistent identifier that is an ISO standard
    """
    __tablename__ = 'Doi'

    id = Column(Integer(), primary_key=True, autoincrement=True , nullable=False )
    title = Column(Text(), nullable=False )
    description = Column(Text())
    weight = Column(Integer(), nullable=False )
    dateIssued = Column(DateTime())
    dateModified = Column(DateTime())
    inVocabulary_id = Column(Integer(), ForeignKey('Vocabulary.id'), nullable=False )
    inVocabulary = relationship("Vocabulary", uselist=False, foreign_keys=[inVocabulary_id])
    
    
    keyword_rel = relationship( "DoiKeyword" )
    keyword = association_proxy("keyword_rel", "keyword",
                                  creator=lambda x_: DoiKeyword(keyword=x_))
    

    def __repr__(self):
        return f"Doi(id={self.id},title={self.title},description={self.description},weight={self.weight},dateIssued={self.dateIssued},dateModified={self.dateModified},inVocabulary_id={self.inVocabulary_id},)"



    
    # Using concrete inheritance: see https://docs.sqlalchemy.org/en/14/orm/inheritance.html
    __mapper_args__ = {
        'concrete': True
    }
    


class Journal(Term):
    """
    Periodical journal publishing scientific research
    """
    __tablename__ = 'Journal'

    id = Column(Integer(), primary_key=True, autoincrement=True , nullable=False )
    title = Column(Text(), nullable=False )
    description = Column(Text())
    weight = Column(Integer(), nullable=False )
    dateIssued = Column(DateTime())
    dateModified = Column(DateTime())
    inVocabulary_id = Column(Integer(), ForeignKey('Vocabulary.id'), nullable=False )
    inVocabulary = relationship("Vocabulary", uselist=False, foreign_keys=[inVocabulary_id])
    
    
    keyword_rel = relationship( "JournalKeyword" )
    keyword = association_proxy("keyword_rel", "keyword",
                                  creator=lambda x_: JournalKeyword(keyword=x_))
    

    def __repr__(self):
        return f"Journal(id={self.id},title={self.title},description={self.description},weight={self.weight},dateIssued={self.dateIssued},dateModified={self.dateModified},inVocabulary_id={self.inVocabulary_id},)"



    
    # Using concrete inheritance: see https://docs.sqlalchemy.org/en/14/orm/inheritance.html
    __mapper_args__ = {
        'concrete': True
    }
    


class PdbReference(Term):
    """
    Identifier for 3D structural data as per the PDB (Protein Data Bank) database
    """
    __tablename__ = 'PdbReference'

    id = Column(Integer(), primary_key=True, autoincrement=True , nullable=False )
    title = Column(Text(), nullable=False )
    description = Column(Text())
    weight = Column(Integer(), nullable=False )
    dateIssued = Column(DateTime())
    dateModified = Column(DateTime())
    inVocabulary_id = Column(Integer(), ForeignKey('Vocabulary.id'), nullable=False )
    inVocabulary = relationship("Vocabulary", uselist=False, foreign_keys=[inVocabulary_id])
    
    
    keyword_rel = relationship( "PdbReferenceKeyword" )
    keyword = association_proxy("keyword_rel", "keyword",
                                  creator=lambda x_: PdbReferenceKeyword(keyword=x_))
    

    def __repr__(self):
        return f"PdbReference(id={self.id},title={self.title},description={self.description},weight={self.weight},dateIssued={self.dateIssued},dateModified={self.dateModified},inVocabulary_id={self.inVocabulary_id},)"



    
    # Using concrete inheritance: see https://docs.sqlalchemy.org/en/14/orm/inheritance.html
    __mapper_args__ = {
        'concrete': True
    }
    


class Keyword(Term):
    """
    A term or phrase used to tag and categorize content
    """
    __tablename__ = 'Keyword'

    id = Column(Integer(), primary_key=True, autoincrement=True , nullable=False )
    title = Column(Text(), nullable=False )
    description = Column(Text())
    weight = Column(Integer(), nullable=False )
    dateIssued = Column(DateTime())
    dateModified = Column(DateTime())
    inVocabulary_id = Column(Integer(), ForeignKey('Vocabulary.id'), nullable=False )
    inVocabulary = relationship("Vocabulary", uselist=False, foreign_keys=[inVocabulary_id])
    
    
    keyword_rel = relationship( "KeywordKeyword" )
    keyword = association_proxy("keyword_rel", "keyword",
                                  creator=lambda x_: KeywordKeyword(keyword=x_))
    

    def __repr__(self):
        return f"Keyword(id={self.id},title={self.title},description={self.description},weight={self.weight},dateIssued={self.dateIssued},dateModified={self.dateModified},inVocabulary_id={self.inVocabulary_id},)"



    
    # Using concrete inheritance: see https://docs.sqlalchemy.org/en/14/orm/inheritance.html
    __mapper_args__ = {
        'concrete': True
    }
    


class TagSequence(Term):
    """
    The name of the DNA coding sequence or corresponding peptide/protein sequence fused to a sequence of interest, used to facilitate experimental operations such as purification, detection, localization, tracking, solubility enhancement, or selection. Applicable to both proteins and nucleic acids
    """
    __tablename__ = 'TagSequence'

    id = Column(Integer(), primary_key=True, autoincrement=True , nullable=False )
    title = Column(Text(), nullable=False )
    description = Column(Text())
    weight = Column(Integer(), nullable=False )
    dateIssued = Column(DateTime())
    dateModified = Column(DateTime())
    inVocabulary_id = Column(Integer(), ForeignKey('Vocabulary.id'), nullable=False )
    inVocabulary = relationship("Vocabulary", uselist=False, foreign_keys=[inVocabulary_id])
    
    
    keyword_rel = relationship( "TagSequenceKeyword" )
    keyword = association_proxy("keyword_rel", "keyword",
                                  creator=lambda x_: TagSequenceKeyword(keyword=x_))
    

    def __repr__(self):
        return f"TagSequence(id={self.id},title={self.title},description={self.description},weight={self.weight},dateIssued={self.dateIssued},dateModified={self.dateModified},inVocabulary_id={self.inVocabulary_id},)"



    
    # Using concrete inheritance: see https://docs.sqlalchemy.org/en/14/orm/inheritance.html
    __mapper_args__ = {
        'concrete': True
    }
    


class SpecialFeature(Term):
    """
    Distinctive attributes of a product that set it apart from other similar items e.g., Reference strain, Vaccinal strain, Antiviral resistant strain ...
    """
    __tablename__ = 'SpecialFeature'

    id = Column(Integer(), primary_key=True, autoincrement=True , nullable=False )
    title = Column(Text(), nullable=False )
    description = Column(Text())
    weight = Column(Integer(), nullable=False )
    dateIssued = Column(DateTime())
    dateModified = Column(DateTime())
    inVocabulary_id = Column(Integer(), ForeignKey('Vocabulary.id'), nullable=False )
    inVocabulary = relationship("Vocabulary", uselist=False, foreign_keys=[inVocabulary_id])
    
    
    keyword_rel = relationship( "SpecialFeatureKeyword" )
    keyword = association_proxy("keyword_rel", "keyword",
                                  creator=lambda x_: SpecialFeatureKeyword(keyword=x_))
    

    def __repr__(self):
        return f"SpecialFeature(id={self.id},title={self.title},description={self.description},weight={self.weight},dateIssued={self.dateIssued},dateModified={self.dateModified},inVocabulary_id={self.inVocabulary_id},)"



    
    # Using concrete inheritance: see https://docs.sqlalchemy.org/en/14/orm/inheritance.html
    __mapper_args__ = {
        'concrete': True
    }
    


class ExpressionVector(Term):
    """
    A reference to an expression vector plasmid, typically embedding a resistance marker for inducible protein expression
    """
    __tablename__ = 'ExpressionVector'

    id = Column(Integer(), primary_key=True, autoincrement=True , nullable=False )
    title = Column(Text(), nullable=False )
    description = Column(Text())
    weight = Column(Integer(), nullable=False )
    dateIssued = Column(DateTime())
    dateModified = Column(DateTime())
    inVocabulary_id = Column(Integer(), ForeignKey('Vocabulary.id'), nullable=False )
    inVocabulary = relationship("Vocabulary", uselist=False, foreign_keys=[inVocabulary_id])
    
    
    keyword_rel = relationship( "ExpressionVectorKeyword" )
    keyword = association_proxy("keyword_rel", "keyword",
                                  creator=lambda x_: ExpressionVectorKeyword(keyword=x_))
    

    def __repr__(self):
        return f"ExpressionVector(id={self.id},title={self.title},description={self.description},weight={self.weight},dateIssued={self.dateIssued},dateModified={self.dateModified},inVocabulary_id={self.inVocabulary_id},)"



    
    # Using concrete inheritance: see https://docs.sqlalchemy.org/en/14/orm/inheritance.html
    __mapper_args__ = {
        'concrete': True
    }
    


class PlasmidSelection(Term):
    """
    The process of identifying cells that have successfully incorporated a plasmid, typically using antibiotic resistance markers
    """
    __tablename__ = 'PlasmidSelection'

    id = Column(Integer(), primary_key=True, autoincrement=True , nullable=False )
    title = Column(Text(), nullable=False )
    description = Column(Text())
    weight = Column(Integer(), nullable=False )
    dateIssued = Column(DateTime())
    dateModified = Column(DateTime())
    inVocabulary_id = Column(Integer(), ForeignKey('Vocabulary.id'), nullable=False )
    inVocabulary = relationship("Vocabulary", uselist=False, foreign_keys=[inVocabulary_id])
    
    
    keyword_rel = relationship( "PlasmidSelectionKeyword" )
    keyword = association_proxy("keyword_rel", "keyword",
                                  creator=lambda x_: PlasmidSelectionKeyword(keyword=x_))
    

    def __repr__(self):
        return f"PlasmidSelection(id={self.id},title={self.title},description={self.description},weight={self.weight},dateIssued={self.dateIssued},dateModified={self.dateModified},inVocabulary_id={self.inVocabulary_id},)"



    
    # Using concrete inheritance: see https://docs.sqlalchemy.org/en/14/orm/inheritance.html
    __mapper_args__ = {
        'concrete': True
    }
    


class PropagationHost(Term):
    """
    The organism used to grow and multiply the pathogen under controlled conditions
    """
    __tablename__ = 'PropagationHost'

    id = Column(Integer(), primary_key=True, autoincrement=True , nullable=False )
    title = Column(Text(), nullable=False )
    description = Column(Text())
    weight = Column(Integer(), nullable=False )
    dateIssued = Column(DateTime())
    dateModified = Column(DateTime())
    inVocabulary_id = Column(Integer(), ForeignKey('Vocabulary.id'), nullable=False )
    inVocabulary = relationship("Vocabulary", uselist=False, foreign_keys=[inVocabulary_id])
    
    
    keyword_rel = relationship( "PropagationHostKeyword" )
    keyword = association_proxy("keyword_rel", "keyword",
                                  creator=lambda x_: PropagationHostKeyword(keyword=x_))
    

    def __repr__(self):
        return f"PropagationHost(id={self.id},title={self.title},description={self.description},weight={self.weight},dateIssued={self.dateIssued},dateModified={self.dateModified},inVocabulary_id={self.inVocabulary_id},)"



    
    # Using concrete inheritance: see https://docs.sqlalchemy.org/en/14/orm/inheritance.html
    __mapper_args__ = {
        'concrete': True
    }
    


class TransmissionMethod(Term):
    """
    The process by which the pathogen spreads between hosts
    """
    __tablename__ = 'TransmissionMethod'

    id = Column(Integer(), primary_key=True, autoincrement=True , nullable=False )
    title = Column(Text(), nullable=False )
    description = Column(Text())
    weight = Column(Integer(), nullable=False )
    dateIssued = Column(DateTime())
    dateModified = Column(DateTime())
    inVocabulary_id = Column(Integer(), ForeignKey('Vocabulary.id'), nullable=False )
    inVocabulary = relationship("Vocabulary", uselist=False, foreign_keys=[inVocabulary_id])
    
    
    keyword_rel = relationship( "TransmissionMethodKeyword" )
    keyword = association_proxy("keyword_rel", "keyword",
                                  creator=lambda x_: TransmissionMethodKeyword(keyword=x_))
    

    def __repr__(self):
        return f"TransmissionMethod(id={self.id},title={self.title},description={self.description},weight={self.weight},dateIssued={self.dateIssued},dateModified={self.dateModified},inVocabulary_id={self.inVocabulary_id},)"



    
    # Using concrete inheritance: see https://docs.sqlalchemy.org/en/14/orm/inheritance.html
    __mapper_args__ = {
        'concrete': True
    }
    


class ProductionCellLine(Term):
    """
    A population of cells that originates from a primary culture, adapted to grow and divide under laboratory conditions. Used in biotechnology to consistently produce biological substances
    """
    __tablename__ = 'ProductionCellLine'

    id = Column(Integer(), primary_key=True, autoincrement=True , nullable=False )
    title = Column(Text(), nullable=False )
    description = Column(Text())
    weight = Column(Integer(), nullable=False )
    dateIssued = Column(DateTime())
    dateModified = Column(DateTime())
    inVocabulary_id = Column(Integer(), ForeignKey('Vocabulary.id'), nullable=False )
    inVocabulary = relationship("Vocabulary", uselist=False, foreign_keys=[inVocabulary_id])
    
    
    keyword_rel = relationship( "ProductionCellLineKeyword" )
    keyword = association_proxy("keyword_rel", "keyword",
                                  creator=lambda x_: ProductionCellLineKeyword(keyword=x_))
    

    def __repr__(self):
        return f"ProductionCellLine(id={self.id},title={self.title},description={self.description},weight={self.weight},dateIssued={self.dateIssued},dateModified={self.dateModified},inVocabulary_id={self.inVocabulary_id},)"



    
    # Using concrete inheritance: see https://docs.sqlalchemy.org/en/14/orm/inheritance.html
    __mapper_args__ = {
        'concrete': True
    }
    


class ProductCategory(Term):
    """
    A term used to classify a group of products that share common characteristics or functions, which helps in their organization
    """
    __tablename__ = 'ProductCategory'

    id = Column(Integer(), primary_key=True, autoincrement=True , nullable=False )
    title = Column(Text(), nullable=False )
    description = Column(Text())
    weight = Column(Integer(), nullable=False )
    dateIssued = Column(DateTime())
    dateModified = Column(DateTime())
    parentCategory_id = Column(Integer(), ForeignKey('ProductCategory.id'))
    parentCategory = relationship("ProductCategory", uselist=False, foreign_keys=[parentCategory_id])
    inVocabulary_id = Column(Integer(), ForeignKey('Vocabulary.id'), nullable=False )
    inVocabulary = relationship("Vocabulary", uselist=False, foreign_keys=[inVocabulary_id])
    
    
    keyword_rel = relationship( "ProductCategoryKeyword" )
    keyword = association_proxy("keyword_rel", "keyword",
                                  creator=lambda x_: ProductCategoryKeyword(keyword=x_))
    

    def __repr__(self):
        return f"ProductCategory(id={self.id},title={self.title},description={self.description},weight={self.weight},dateIssued={self.dateIssued},dateModified={self.dateModified},parentCategory_id={self.parentCategory_id},inVocabulary_id={self.inVocabulary_id},)"



    
    # Using concrete inheritance: see https://docs.sqlalchemy.org/en/14/orm/inheritance.html
    __mapper_args__ = {
        'concrete': True
    }
    


class IsolationHost(Term):
    """
    Host organism from which the pathogen was isolated
    """
    __tablename__ = 'IsolationHost'

    id = Column(Integer(), primary_key=True, autoincrement=True , nullable=False )
    title = Column(Text(), nullable=False )
    description = Column(Text())
    weight = Column(Integer(), nullable=False )
    dateIssued = Column(DateTime())
    dateModified = Column(DateTime())
    inVocabulary_id = Column(Integer(), ForeignKey('Vocabulary.id'), nullable=False )
    inVocabulary = relationship("Vocabulary", uselist=False, foreign_keys=[inVocabulary_id])
    
    
    keyword_rel = relationship( "IsolationHostKeyword" )
    keyword = association_proxy("keyword_rel", "keyword",
                                  creator=lambda x_: IsolationHostKeyword(keyword=x_))
    

    def __repr__(self):
        return f"IsolationHost(id={self.id},title={self.title},description={self.description},weight={self.weight},dateIssued={self.dateIssued},dateModified={self.dateModified},inVocabulary_id={self.inVocabulary_id},)"



    
    # Using concrete inheritance: see https://docs.sqlalchemy.org/en/14/orm/inheritance.html
    __mapper_args__ = {
        'concrete': True
    }
    


class GeographicalOrigin(Term):
    """
    The specific location or region where a physical item, originates or is naturally found
    """
    __tablename__ = 'GeographicalOrigin'

    id = Column(Integer(), primary_key=True, autoincrement=True , nullable=False )
    title = Column(Text(), nullable=False )
    description = Column(Text())
    weight = Column(Integer(), nullable=False )
    dateIssued = Column(DateTime())
    dateModified = Column(DateTime())
    inVocabulary_id = Column(Integer(), ForeignKey('Vocabulary.id'), nullable=False )
    inVocabulary = relationship("Vocabulary", uselist=False, foreign_keys=[inVocabulary_id])
    
    
    keyword_rel = relationship( "GeographicalOriginKeyword" )
    keyword = association_proxy("keyword_rel", "keyword",
                                  creator=lambda x_: GeographicalOriginKeyword(keyword=x_))
    

    def __repr__(self):
        return f"GeographicalOrigin(id={self.id},title={self.title},description={self.description},weight={self.weight},dateIssued={self.dateIssued},dateModified={self.dateModified},inVocabulary_id={self.inVocabulary_id},)"



    
    # Using concrete inheritance: see https://docs.sqlalchemy.org/en/14/orm/inheritance.html
    __mapper_args__ = {
        'concrete': True
    }
    


class Country(Term):
    """
    The country as of ISO3166
    """
    __tablename__ = 'Country'

    id = Column(Integer(), primary_key=True, autoincrement=True , nullable=False )
    alpha2Code = Column(Text(), nullable=False )
    title = Column(Text(), nullable=False )
    description = Column(Text())
    weight = Column(Integer(), nullable=False )
    dateIssued = Column(DateTime())
    dateModified = Column(DateTime())
    inVocabulary_id = Column(Integer(), ForeignKey('Vocabulary.id'), nullable=False )
    inVocabulary = relationship("Vocabulary", uselist=False, foreign_keys=[inVocabulary_id])
    
    
    keyword_rel = relationship( "CountryKeyword" )
    keyword = association_proxy("keyword_rel", "keyword",
                                  creator=lambda x_: CountryKeyword(keyword=x_))
    

    def __repr__(self):
        return f"Country(id={self.id},alpha2Code={self.alpha2Code},title={self.title},description={self.description},weight={self.weight},dateIssued={self.dateIssued},dateModified={self.dateModified},inVocabulary_id={self.inVocabulary_id},)"



    
    # Using concrete inheritance: see https://docs.sqlalchemy.org/en/14/orm/inheritance.html
    __mapper_args__ = {
        'concrete': True
    }
    


class IataClassification(Term):
    """
    The corresponding International Air Transport Association (IATA)'s category for dangerous goods that are transported by air
    """
    __tablename__ = 'IataClassification'

    id = Column(Integer(), primary_key=True, autoincrement=True , nullable=False )
    title = Column(Text(), nullable=False )
    description = Column(Text())
    weight = Column(Integer(), nullable=False )
    dateIssued = Column(DateTime())
    dateModified = Column(DateTime())
    inVocabulary_id = Column(Integer(), ForeignKey('Vocabulary.id'), nullable=False )
    inVocabulary = relationship("Vocabulary", uselist=False, foreign_keys=[inVocabulary_id])
    
    
    keyword_rel = relationship( "IataClassificationKeyword" )
    keyword = association_proxy("keyword_rel", "keyword",
                                  creator=lambda x_: IataClassificationKeyword(keyword=x_))
    

    def __repr__(self):
        return f"IataClassification(id={self.id},title={self.title},description={self.description},weight={self.weight},dateIssued={self.dateIssued},dateModified={self.dateModified},inVocabulary_id={self.inVocabulary_id},)"



    
    # Using concrete inheritance: see https://docs.sqlalchemy.org/en/14/orm/inheritance.html
    __mapper_args__ = {
        'concrete': True
    }
    


class TaxonomicRank(Term):
    """
    The possible taxonomic ranks and their description
    """
    __tablename__ = 'TaxonomicRank'

    id = Column(Integer(), primary_key=True, autoincrement=True , nullable=False )
    title = Column(Text(), nullable=False )
    description = Column(Text())
    weight = Column(Integer(), nullable=False )
    dateIssued = Column(DateTime())
    dateModified = Column(DateTime())
    inVocabulary_id = Column(Integer(), ForeignKey('Vocabulary.id'), nullable=False )
    inVocabulary = relationship("Vocabulary", uselist=False, foreign_keys=[inVocabulary_id])
    
    
    # ManyToMany
    taxonomy = relationship( "Taxonomy", secondary="TaxonomicRank_taxonomy")
    
    
    keyword_rel = relationship( "TaxonomicRankKeyword" )
    keyword = association_proxy("keyword_rel", "keyword",
                                  creator=lambda x_: TaxonomicRankKeyword(keyword=x_))
    

    def __repr__(self):
        return f"TaxonomicRank(id={self.id},title={self.title},description={self.description},weight={self.weight},dateIssued={self.dateIssued},dateModified={self.dateModified},inVocabulary_id={self.inVocabulary_id},)"



    
    # Using concrete inheritance: see https://docs.sqlalchemy.org/en/14/orm/inheritance.html
    __mapper_args__ = {
        'concrete': True
    }
    


class Taxon(Term):
    """
    Conceptual entity that groups one or more populations of an organism or organisms, as seen by taxonomists, to form a unit
    """
    __tablename__ = 'Taxon'

    id = Column(Integer(), primary_key=True, autoincrement=True , nullable=False )
    taxonomicId = Column(Text(), nullable=False )
    taxonomicNodeId = Column(Text())
    title = Column(Text(), nullable=False )
    description = Column(Text())
    weight = Column(Integer(), nullable=False )
    dateIssued = Column(DateTime())
    dateModified = Column(DateTime())
    parentTaxon_id = Column(Integer(), ForeignKey('Taxon.id'), nullable=False )
    parentTaxon = relationship("Taxon", uselist=False, foreign_keys=[parentTaxon_id])
    rank_id = Column(Integer(), ForeignKey('TaxonomicRank.id'), nullable=False )
    rank = relationship("TaxonomicRank", uselist=False, foreign_keys=[rank_id])
    inVocabulary_id = Column(Integer(), ForeignKey('Vocabulary.id'), nullable=False )
    inVocabulary = relationship("Vocabulary", uselist=False, foreign_keys=[inVocabulary_id])
    
    
    # ManyToMany
    taxonomy = relationship( "Taxonomy", secondary="Taxon_taxonomy")
    
    
    # ManyToMany
    previouslyKnownAs = relationship( "Taxon", secondary="Taxon_previouslyKnownAs")
    
    
    # ManyToMany
    externalEquivalentTaxon = relationship( "Taxon", secondary="Taxon_externalEquivalentTaxon")
    
    
    keyword_rel = relationship( "TaxonKeyword" )
    keyword = association_proxy("keyword_rel", "keyword",
                                  creator=lambda x_: TaxonKeyword(keyword=x_))
    

    def __repr__(self):
        return f"Taxon(id={self.id},taxonomicId={self.taxonomicId},taxonomicNodeId={self.taxonomicNodeId},title={self.title},description={self.description},weight={self.weight},dateIssued={self.dateIssued},dateModified={self.dateModified},parentTaxon_id={self.parentTaxon_id},rank_id={self.rank_id},inVocabulary_id={self.inVocabulary_id},)"



    
    # Using concrete inheritance: see https://docs.sqlalchemy.org/en/14/orm/inheritance.html
    __mapper_args__ = {
        'concrete': True
    }
    


class Person(PersonOrOrganization):
    """
    An individual
    """
    __tablename__ = 'Person'

    id = Column(Integer(), primary_key=True, autoincrement=True , nullable=False )
    orcidId = Column(Text())
    name = Column(Text(), nullable=False )
    description = Column(Text())
    homePage = Column(Text())
    dateIssued = Column(DateTime())
    dateModified = Column(DateTime())
    contactPoint_id = Column(Integer(), ForeignKey('ContactPoint.id'))
    contactPoint = relationship("ContactPoint", uselist=False, foreign_keys=[contactPoint_id])
    logo_id = Column(Integer(), ForeignKey('Image.id'))
    logo = relationship("Image", uselist=False, foreign_keys=[logo_id])
    
    
    keyword_rel = relationship( "PersonKeyword" )
    keyword = association_proxy("keyword_rel", "keyword",
                                  creator=lambda x_: PersonKeyword(keyword=x_))
    

    def __repr__(self):
        return f"Person(id={self.id},orcidId={self.orcidId},name={self.name},description={self.description},homePage={self.homePage},dateIssued={self.dateIssued},dateModified={self.dateModified},contactPoint_id={self.contactPoint_id},logo_id={self.logo_id},)"



    
    # Using concrete inheritance: see https://docs.sqlalchemy.org/en/14/orm/inheritance.html
    __mapper_args__ = {
        'concrete': True
    }
    


class Organization(PersonOrOrganization):
    """
    A social entity established to meet needs or pursue specific goals
    """
    __tablename__ = 'Organization'

    id = Column(Integer(), primary_key=True, autoincrement=True , nullable=False )
    rorId = Column(Text())
    name = Column(Text(), nullable=False )
    description = Column(Text())
    homePage = Column(Text())
    dateIssued = Column(DateTime())
    dateModified = Column(DateTime())
    country_id = Column(Integer(), ForeignKey('Country.id'))
    country = relationship("Country", uselist=False, foreign_keys=[country_id])
    contactPoint_id = Column(Integer(), ForeignKey('ContactPoint.id'))
    contactPoint = relationship("ContactPoint", uselist=False, foreign_keys=[contactPoint_id])
    logo_id = Column(Integer(), ForeignKey('Image.id'))
    logo = relationship("Image", uselist=False, foreign_keys=[logo_id])
    
    
    # ManyToMany
    alternateName = relationship( "AlternateName", secondary="Organization_alternateName")
    
    
    keyword_rel = relationship( "OrganizationKeyword" )
    keyword = association_proxy("keyword_rel", "keyword",
                                  creator=lambda x_: OrganizationKeyword(keyword=x_))
    

    def __repr__(self):
        return f"Organization(id={self.id},rorId={self.rorId},name={self.name},description={self.description},homePage={self.homePage},dateIssued={self.dateIssued},dateModified={self.dateModified},country_id={self.country_id},contactPoint_id={self.contactPoint_id},logo_id={self.logo_id},)"



    
    # Using concrete inheritance: see https://docs.sqlalchemy.org/en/14/orm/inheritance.html
    __mapper_args__ = {
        'concrete': True
    }
    


class Originator(PersonOrOrganization):
    """
    The individual or organization responsible for the original discovery, isolation, or creation of an item, providing information about the source or origin of the sample
    """
    __tablename__ = 'Originator'

    id = Column(Integer(), primary_key=True, autoincrement=True , nullable=False )
    name = Column(Text(), nullable=False )
    description = Column(Text())
    homePage = Column(Text())
    dateIssued = Column(DateTime())
    dateModified = Column(DateTime())
    contactPoint_id = Column(Integer(), ForeignKey('ContactPoint.id'))
    contactPoint = relationship("ContactPoint", uselist=False, foreign_keys=[contactPoint_id])
    logo_id = Column(Integer(), ForeignKey('Image.id'))
    logo = relationship("Image", uselist=False, foreign_keys=[logo_id])
    
    
    keyword_rel = relationship( "OriginatorKeyword" )
    keyword = association_proxy("keyword_rel", "keyword",
                                  creator=lambda x_: OriginatorKeyword(keyword=x_))
    

    def __repr__(self):
        return f"Originator(id={self.id},name={self.name},description={self.description},homePage={self.homePage},dateIssued={self.dateIssued},dateModified={self.dateModified},contactPoint_id={self.contactPoint_id},logo_id={self.logo_id},)"



    
    # Using concrete inheritance: see https://docs.sqlalchemy.org/en/14/orm/inheritance.html
    __mapper_args__ = {
        'concrete': True
    }
    


class NaturalPartOrigin(BiologicalPartOrigin):
    """
    Information on the origin of a natural part that composes the biological material
    """
    __tablename__ = 'NaturalPartOrigin'

    id = Column(Integer(), primary_key=True, autoincrement=True , nullable=False )
    collectionDate = Column(DateTime(), nullable=False )
    beforeDate = Column(Boolean(), nullable=False )
    permitIdentifierForAbs = Column(Text())
    accessToPhysicalGeneticResource = Column(Boolean(), nullable=False )
    dateIssued = Column(DateTime())
    dateModified = Column(DateTime())
    countryOfCollection_id = Column(Integer(), ForeignKey('Country.id'), nullable=False )
    countryOfCollection = relationship("Country", uselist=False, foreign_keys=[countryOfCollection_id])
    indigenousPeopleAndLocalCommunityOrigin_id = Column(Integer(), ForeignKey('IplcOrigin.id'))
    indigenousPeopleAndLocalCommunityOrigin = relationship("IplcOrigin", uselist=False, foreign_keys=[indigenousPeopleAndLocalCommunityOrigin_id])
    recombinantPartIdentification_id = Column(Integer(), ForeignKey('RecombinantPartIdentification.id'))
    recombinantPartIdentification = relationship("RecombinantPartIdentification", uselist=False, foreign_keys=[recombinantPartIdentification_id])
    
    
    keyword_rel = relationship( "NaturalPartOriginKeyword" )
    keyword = association_proxy("keyword_rel", "keyword",
                                  creator=lambda x_: NaturalPartOriginKeyword(keyword=x_))
    

    def __repr__(self):
        return f"NaturalPartOrigin(id={self.id},collectionDate={self.collectionDate},beforeDate={self.beforeDate},permitIdentifierForAbs={self.permitIdentifierForAbs},accessToPhysicalGeneticResource={self.accessToPhysicalGeneticResource},dateIssued={self.dateIssued},dateModified={self.dateModified},countryOfCollection_id={self.countryOfCollection_id},indigenousPeopleAndLocalCommunityOrigin_id={self.indigenousPeopleAndLocalCommunityOrigin_id},recombinantPartIdentification_id={self.recombinantPartIdentification_id},)"



    
    # Using concrete inheritance: see https://docs.sqlalchemy.org/en/14/orm/inheritance.html
    __mapper_args__ = {
        'concrete': True
    }
    


class SyntheticPartOrigin(BiologicalPartOrigin):
    """
    Information on the origin of a synthetic part that composes the biological material
    """
    __tablename__ = 'SyntheticPartOrigin'

    id = Column(Integer(), primary_key=True, autoincrement=True , nullable=False )
    modificationsFromTheReferenceSequences = Column(Boolean(), nullable=False )
    descriptionOfModificationsMadeFromTheReferenceSequences = Column(Text())
    accessToPhysicalGeneticResource = Column(Boolean(), nullable=False )
    dateIssued = Column(DateTime())
    dateModified = Column(DateTime())
    recombinantPartIdentification_id = Column(Integer(), ForeignKey('RecombinantPartIdentification.id'))
    recombinantPartIdentification = relationship("RecombinantPartIdentification", uselist=False, foreign_keys=[recombinantPartIdentification_id])
    
    
    keyword_rel = relationship( "SyntheticPartOriginKeyword" )
    keyword = association_proxy("keyword_rel", "keyword",
                                  creator=lambda x_: SyntheticPartOriginKeyword(keyword=x_))
    

    def __repr__(self):
        return f"SyntheticPartOrigin(id={self.id},modificationsFromTheReferenceSequences={self.modificationsFromTheReferenceSequences},descriptionOfModificationsMadeFromTheReferenceSequences={self.descriptionOfModificationsMadeFromTheReferenceSequences},accessToPhysicalGeneticResource={self.accessToPhysicalGeneticResource},dateIssued={self.dateIssued},dateModified={self.dateModified},recombinantPartIdentification_id={self.recombinantPartIdentification_id},)"



    
    # Using concrete inheritance: see https://docs.sqlalchemy.org/en/14/orm/inheritance.html
    __mapper_args__ = {
        'concrete': True
    }
    


class ProductOrService(Dataset):
    """
    An offering provided by a provider, which may be tangible (a product) or intangible (a service)
    """
    __tablename__ = 'ProductOrService'

    id = Column(Integer(), primary_key=True, autoincrement=True , nullable=False )
    accessPointUrl = Column(Text(), nullable=False )
    refSku = Column(Text(), nullable=False )
    unitDefinition = Column(Text())
    unitCost = Column(Integer())
    unitCostCurrency = Column(Text())
    unitCostNote = Column(Text())
    qualityGrading = Column(Text())
    biosafetyRestrictions = Column(Text())
    canBeUsedToProduceGmo = Column(Boolean(), nullable=False )
    availability = Column(Text(), nullable=False )
    technicalRecommendation = Column(Text())
    internalReference = Column(Text())
    note = Column(Text())
    title = Column(Text(), nullable=False )
    description = Column(Text(), nullable=False )
    version = Column(Text())
    dateIssued = Column(DateTime())
    dateModified = Column(DateTime())
    category_id = Column(Integer(), ForeignKey('ProductCategory.id'), nullable=False )
    category = relationship("ProductCategory", uselist=False, foreign_keys=[category_id])
    riskGroup_id = Column(Integer(), ForeignKey('RiskGroup.id'))
    riskGroup = relationship("RiskGroup", uselist=False, foreign_keys=[riskGroup_id])
    provider_id = Column(Integer(), ForeignKey('Provider.id'), nullable=False )
    provider = relationship("Provider", uselist=False, foreign_keys=[provider_id])
    contactPoint_id = Column(Integer(), ForeignKey('ContactPoint.id'))
    contactPoint = relationship("ContactPoint", uselist=False, foreign_keys=[contactPoint_id])
    
    
    # ManyToMany
    additionalCategory = relationship( "ProductCategory", secondary="ProductOrService_additionalCategory")
    
    
    # ManyToMany
    pathogenIdentification = relationship( "PathogenIdentification", secondary="ProductOrService_pathogenIdentification")
    
    
    # ManyToMany
    doi = relationship( "Doi", secondary="ProductOrService_doi")
    
    
    # ManyToMany
    collection = relationship( "Collection", secondary="ProductOrService_collection")
    
    
    # ManyToMany
    keywords = relationship( "Keyword", secondary="ProductOrService_keywords")
    
    
    # ManyToMany
    complementaryDocument = relationship( "Document", secondary="ProductOrService_complementaryDocument")
    
    
    # ManyToMany
    productPicture = relationship( "Image", secondary="ProductOrService_productPicture")
    
    
    # ManyToMany
    externalRelatedReference = relationship( "ExternalRelatedReference", secondary="ProductOrService_externalRelatedReference")
    
    
    # ManyToMany
    certification = relationship( "Certification", secondary="ProductOrService_certification")
    
    
    keyword_rel = relationship( "ProductOrServiceKeyword" )
    keyword = association_proxy("keyword_rel", "keyword",
                                  creator=lambda x_: ProductOrServiceKeyword(keyword=x_))
    

    def __repr__(self):
        return f"ProductOrService(id={self.id},accessPointUrl={self.accessPointUrl},refSku={self.refSku},unitDefinition={self.unitDefinition},unitCost={self.unitCost},unitCostCurrency={self.unitCostCurrency},unitCostNote={self.unitCostNote},qualityGrading={self.qualityGrading},biosafetyRestrictions={self.biosafetyRestrictions},canBeUsedToProduceGmo={self.canBeUsedToProduceGmo},availability={self.availability},technicalRecommendation={self.technicalRecommendation},internalReference={self.internalReference},note={self.note},title={self.title},description={self.description},version={self.version},dateIssued={self.dateIssued},dateModified={self.dateModified},category_id={self.category_id},riskGroup_id={self.riskGroup_id},provider_id={self.provider_id},contactPoint_id={self.contactPoint_id},)"



    
    # Using concrete inheritance: see https://docs.sqlalchemy.org/en/14/orm/inheritance.html
    __mapper_args__ = {
        'concrete': True
    }
    


class Data(File):
    """
    Subclass of File representing structured or unstructured datasets, often used for analysis, storage, or transfer of information
    """
    __tablename__ = 'Data'

    id = Column(Integer(), primary_key=True, autoincrement=True , nullable=False )
    name = Column(Text(), nullable=False )
    description = Column(Text())
    contentUrl = Column(Text(), nullable=False )
    format = Column(Text(), nullable=False )
    dateIssued = Column(DateTime())
    dateModified = Column(DateTime())
    license_id = Column(Integer(), ForeignKey('License.id'))
    license = relationship("License", uselist=False, foreign_keys=[license_id])
    
    
    keyword_rel = relationship( "DataKeyword" )
    keyword = association_proxy("keyword_rel", "keyword",
                                  creator=lambda x_: DataKeyword(keyword=x_))
    

    def __repr__(self):
        return f"Data(id={self.id},name={self.name},description={self.description},contentUrl={self.contentUrl},format={self.format},dateIssued={self.dateIssued},dateModified={self.dateModified},license_id={self.license_id},)"



    
    # Using concrete inheritance: see https://docs.sqlalchemy.org/en/14/orm/inheritance.html
    __mapper_args__ = {
        'concrete': True
    }
    


class Document(File):
    """
    Subclass of File representing textual or written files such as reports, manuals, or forms
    """
    __tablename__ = 'Document'

    id = Column(Integer(), primary_key=True, autoincrement=True , nullable=False )
    name = Column(Text(), nullable=False )
    description = Column(Text())
    contentUrl = Column(Text(), nullable=False )
    format = Column(Text(), nullable=False )
    dateIssued = Column(DateTime())
    dateModified = Column(DateTime())
    license_id = Column(Integer(), ForeignKey('License.id'))
    license = relationship("License", uselist=False, foreign_keys=[license_id])
    
    
    keyword_rel = relationship( "DocumentKeyword" )
    keyword = association_proxy("keyword_rel", "keyword",
                                  creator=lambda x_: DocumentKeyword(keyword=x_))
    

    def __repr__(self):
        return f"Document(id={self.id},name={self.name},description={self.description},contentUrl={self.contentUrl},format={self.format},dateIssued={self.dateIssued},dateModified={self.dateModified},license_id={self.license_id},)"



    
    # Using concrete inheritance: see https://docs.sqlalchemy.org/en/14/orm/inheritance.html
    __mapper_args__ = {
        'concrete': True
    }
    


class Audio(File):
    """
    Subclass of File representing sound recordings or audio tracks
    """
    __tablename__ = 'Audio'

    id = Column(Integer(), primary_key=True, autoincrement=True , nullable=False )
    name = Column(Text(), nullable=False )
    description = Column(Text())
    contentUrl = Column(Text(), nullable=False )
    format = Column(Text(), nullable=False )
    dateIssued = Column(DateTime())
    dateModified = Column(DateTime())
    license_id = Column(Integer(), ForeignKey('License.id'))
    license = relationship("License", uselist=False, foreign_keys=[license_id])
    
    
    keyword_rel = relationship( "AudioKeyword" )
    keyword = association_proxy("keyword_rel", "keyword",
                                  creator=lambda x_: AudioKeyword(keyword=x_))
    

    def __repr__(self):
        return f"Audio(id={self.id},name={self.name},description={self.description},contentUrl={self.contentUrl},format={self.format},dateIssued={self.dateIssued},dateModified={self.dateModified},license_id={self.license_id},)"



    
    # Using concrete inheritance: see https://docs.sqlalchemy.org/en/14/orm/inheritance.html
    __mapper_args__ = {
        'concrete': True
    }
    


class Video(File):
    """
    Subclass of File representing moving visual media, such as recordings, presentations, or movies
    """
    __tablename__ = 'Video'

    id = Column(Integer(), primary_key=True, autoincrement=True , nullable=False )
    name = Column(Text(), nullable=False )
    description = Column(Text())
    contentUrl = Column(Text(), nullable=False )
    format = Column(Text(), nullable=False )
    dateIssued = Column(DateTime())
    dateModified = Column(DateTime())
    license_id = Column(Integer(), ForeignKey('License.id'))
    license = relationship("License", uselist=False, foreign_keys=[license_id])
    
    
    keyword_rel = relationship( "VideoKeyword" )
    keyword = association_proxy("keyword_rel", "keyword",
                                  creator=lambda x_: VideoKeyword(keyword=x_))
    

    def __repr__(self):
        return f"Video(id={self.id},name={self.name},description={self.description},contentUrl={self.contentUrl},format={self.format},dateIssued={self.dateIssued},dateModified={self.dateModified},license_id={self.license_id},)"



    
    # Using concrete inheritance: see https://docs.sqlalchemy.org/en/14/orm/inheritance.html
    __mapper_args__ = {
        'concrete': True
    }
    


class Image(File):
    """
    Subclass of File representing visual content such as pictures, diagrams, or illustrations
    """
    __tablename__ = 'Image'

    id = Column(Integer(), primary_key=True, autoincrement=True , nullable=False )
    altText = Column(Text())
    name = Column(Text(), nullable=False )
    description = Column(Text())
    contentUrl = Column(Text(), nullable=False )
    format = Column(Text(), nullable=False )
    dateIssued = Column(DateTime())
    dateModified = Column(DateTime())
    license_id = Column(Integer(), ForeignKey('License.id'))
    license = relationship("License", uselist=False, foreign_keys=[license_id])
    
    
    keyword_rel = relationship( "ImageKeyword" )
    keyword = association_proxy("keyword_rel", "keyword",
                                  creator=lambda x_: ImageKeyword(keyword=x_))
    

    def __repr__(self):
        return f"Image(id={self.id},altText={self.altText},name={self.name},description={self.description},contentUrl={self.contentUrl},format={self.format},dateIssued={self.dateIssued},dateModified={self.dateModified},license_id={self.license_id},)"



    
    # Using concrete inheritance: see https://docs.sqlalchemy.org/en/14/orm/inheritance.html
    __mapper_args__ = {
        'concrete': True
    }
    


class Taxonomy(Catalogue):
    """
    A structured representation of data about the classification and naming of biological organisms into groups according to shared characteristics
    """
    __tablename__ = 'Taxonomy'

    id = Column(Integer(), primary_key=True, autoincrement=True , nullable=False )
    version = Column(Text(), nullable=False )
    title = Column(Text(), nullable=False )
    description = Column(Text(), nullable=False )
    dateIssued = Column(DateTime())
    dateModified = Column(DateTime())
    taxonDataProvider_id = Column(Integer(), ForeignKey('DataProvider.id'))
    taxonDataProvider = relationship("DataProvider", uselist=False, foreign_keys=[taxonDataProvider_id])
    versionDataProvider_id = Column(Integer(), ForeignKey('DataProvider.id'), nullable=False )
    versionDataProvider = relationship("DataProvider", uselist=False, foreign_keys=[versionDataProvider_id])
    rankDataProvider_id = Column(Integer(), ForeignKey('DataProvider.id'))
    rankDataProvider = relationship("DataProvider", uselist=False, foreign_keys=[rankDataProvider_id])
    
    
    # ManyToMany
    taxon = relationship( "Taxon", secondary="Taxonomy_taxon")
    
    
    # ManyToMany
    rank = relationship( "TaxonomicRank", secondary="Taxonomy_rank")
    
    
    keyword_rel = relationship( "TaxonomyKeyword" )
    keyword = association_proxy("keyword_rel", "keyword",
                                  creator=lambda x_: TaxonomyKeyword(keyword=x_))
    

    def __repr__(self):
        return f"Taxonomy(id={self.id},version={self.version},title={self.title},description={self.description},dateIssued={self.dateIssued},dateModified={self.dateModified},taxonDataProvider_id={self.taxonDataProvider_id},versionDataProvider_id={self.versionDataProvider_id},rankDataProvider_id={self.rankDataProvider_id},)"



    
    # Using concrete inheritance: see https://docs.sqlalchemy.org/en/14/orm/inheritance.html
    __mapper_args__ = {
        'concrete': True
    }
    


class Vocabulary(Catalogue):
    """
    A subset of words or phrases specific to a particular subject or field
    """
    __tablename__ = 'Vocabulary'

    id = Column(Integer(), primary_key=True, autoincrement=True , nullable=False )
    title = Column(Text(), nullable=False )
    description = Column(Text(), nullable=False )
    version = Column(Text())
    dateIssued = Column(DateTime())
    dateModified = Column(DateTime())
    termDataProvider_id = Column(Integer(), ForeignKey('DataProvider.id'))
    termDataProvider = relationship("DataProvider", uselist=False, foreign_keys=[termDataProvider_id])
    
    
    # ManyToMany
    term = relationship( "Term", secondary="Vocabulary_term")
    
    
    keyword_rel = relationship( "VocabularyKeyword" )
    keyword = association_proxy("keyword_rel", "keyword",
                                  creator=lambda x_: VocabularyKeyword(keyword=x_))
    

    def __repr__(self):
        return f"Vocabulary(id={self.id},title={self.title},description={self.description},version={self.version},dateIssued={self.dateIssued},dateModified={self.dateModified},termDataProvider_id={self.termDataProvider_id},)"



    
    # Using concrete inheritance: see https://docs.sqlalchemy.org/en/14/orm/inheritance.html
    __mapper_args__ = {
        'concrete': True
    }
    


class VirusName(CommonName):
    """
    A virus vernacular name or a name that describes a group of viruses
    """
    __tablename__ = 'VirusName'

    id = Column(Integer(), primary_key=True, autoincrement=True , nullable=False )
    title = Column(Text(), nullable=False )
    description = Column(Text())
    weight = Column(Integer(), nullable=False )
    dateIssued = Column(DateTime())
    dateModified = Column(DateTime())
    inVocabulary_id = Column(Integer(), ForeignKey('Vocabulary.id'), nullable=False )
    inVocabulary = relationship("Vocabulary", uselist=False, foreign_keys=[inVocabulary_id])
    
    
    # ManyToMany
    alternateName = relationship( "AlternateName", secondary="VirusName_alternateName")
    
    
    sourceOfInformation_rel = relationship( "VirusNameSourceOfInformation" )
    sourceOfInformation = association_proxy("sourceOfInformation_rel", "sourceOfInformation",
                                  creator=lambda x_: VirusNameSourceOfInformation(sourceOfInformation=x_))
    
    
    keyword_rel = relationship( "VirusNameKeyword" )
    keyword = association_proxy("keyword_rel", "keyword",
                                  creator=lambda x_: VirusNameKeyword(keyword=x_))
    

    def __repr__(self):
        return f"VirusName(id={self.id},title={self.title},description={self.description},weight={self.weight},dateIssued={self.dateIssued},dateModified={self.dateModified},inVocabulary_id={self.inVocabulary_id},)"



    
    # Using concrete inheritance: see https://docs.sqlalchemy.org/en/14/orm/inheritance.html
    __mapper_args__ = {
        'concrete': True
    }
    


class IplcOrigin(GeographicalOrigin):
    """
    The IPLC area (Indigenous People and Local Communities) from which a physical item originates
    """
    __tablename__ = 'IplcOrigin'

    id = Column(Integer(), primary_key=True, autoincrement=True , nullable=False )
    title = Column(Text(), nullable=False )
    description = Column(Text())
    weight = Column(Integer(), nullable=False )
    dateIssued = Column(DateTime())
    dateModified = Column(DateTime())
    inVocabulary_id = Column(Integer(), ForeignKey('Vocabulary.id'), nullable=False )
    inVocabulary = relationship("Vocabulary", uselist=False, foreign_keys=[inVocabulary_id])
    
    
    keyword_rel = relationship( "IplcOriginKeyword" )
    keyword = association_proxy("keyword_rel", "keyword",
                                  creator=lambda x_: IplcOriginKeyword(keyword=x_))
    

    def __repr__(self):
        return f"IplcOrigin(id={self.id},title={self.title},description={self.description},weight={self.weight},dateIssued={self.dateIssued},dateModified={self.dateModified},inVocabulary_id={self.inVocabulary_id},)"



    
    # Using concrete inheritance: see https://docs.sqlalchemy.org/en/14/orm/inheritance.html
    __mapper_args__ = {
        'concrete': True
    }
    


class Variant(CommonName):
    """
    An organism with one or more new mutations is referred to as a “variant” of the original organism if not sufficiently different to be termed a distinct strain
    """
    __tablename__ = 'Variant'

    id = Column(Integer(), primary_key=True, autoincrement=True , nullable=False )
    title = Column(Text(), nullable=False )
    description = Column(Text())
    weight = Column(Integer(), nullable=False )
    dateIssued = Column(DateTime())
    dateModified = Column(DateTime())
    inVocabulary_id = Column(Integer(), ForeignKey('Vocabulary.id'), nullable=False )
    inVocabulary = relationship("Vocabulary", uselist=False, foreign_keys=[inVocabulary_id])
    
    
    # ManyToMany
    alternateName = relationship( "AlternateName", secondary="Variant_alternateName")
    
    
    sourceOfInformation_rel = relationship( "VariantSourceOfInformation" )
    sourceOfInformation = association_proxy("sourceOfInformation_rel", "sourceOfInformation",
                                  creator=lambda x_: VariantSourceOfInformation(sourceOfInformation=x_))
    
    
    keyword_rel = relationship( "VariantKeyword" )
    keyword = association_proxy("keyword_rel", "keyword",
                                  creator=lambda x_: VariantKeyword(keyword=x_))
    

    def __repr__(self):
        return f"Variant(id={self.id},title={self.title},description={self.description},weight={self.weight},dateIssued={self.dateIssued},dateModified={self.dateModified},inVocabulary_id={self.inVocabulary_id},)"



    
    # Using concrete inheritance: see https://docs.sqlalchemy.org/en/14/orm/inheritance.html
    __mapper_args__ = {
        'concrete': True
    }
    


class ReasearchInfrastructure(Organization):
    """
    A research infrastructure (RI)
    """
    __tablename__ = 'ReasearchInfrastructure'

    id = Column(Integer(), primary_key=True, autoincrement=True , nullable=False )
    rorId = Column(Text())
    name = Column(Text(), nullable=False )
    description = Column(Text())
    homePage = Column(Text())
    dateIssued = Column(DateTime())
    dateModified = Column(DateTime())
    country_id = Column(Integer(), ForeignKey('Country.id'))
    country = relationship("Country", uselist=False, foreign_keys=[country_id])
    contactPoint_id = Column(Integer(), ForeignKey('ContactPoint.id'))
    contactPoint = relationship("ContactPoint", uselist=False, foreign_keys=[contactPoint_id])
    logo_id = Column(Integer(), ForeignKey('Image.id'))
    logo = relationship("Image", uselist=False, foreign_keys=[logo_id])
    
    
    # ManyToMany
    alternateName = relationship( "AlternateName", secondary="ReasearchInfrastructure_alternateName")
    
    
    keyword_rel = relationship( "ReasearchInfrastructureKeyword" )
    keyword = association_proxy("keyword_rel", "keyword",
                                  creator=lambda x_: ReasearchInfrastructureKeyword(keyword=x_))
    

    def __repr__(self):
        return f"ReasearchInfrastructure(id={self.id},rorId={self.rorId},name={self.name},description={self.description},homePage={self.homePage},dateIssued={self.dateIssued},dateModified={self.dateModified},country_id={self.country_id},contactPoint_id={self.contactPoint_id},logo_id={self.logo_id},)"



    
    # Using concrete inheritance: see https://docs.sqlalchemy.org/en/14/orm/inheritance.html
    __mapper_args__ = {
        'concrete': True
    }
    


class Provider(Organization):
    """
    A provider of products or services, as a specific organization
    """
    __tablename__ = 'Provider'

    id = Column(Integer(), primary_key=True, autoincrement=True , nullable=False )
    rorId = Column(Text())
    name = Column(Text(), nullable=False )
    description = Column(Text())
    homePage = Column(Text())
    dateIssued = Column(DateTime())
    dateModified = Column(DateTime())
    country_id = Column(Integer(), ForeignKey('Country.id'))
    country = relationship("Country", uselist=False, foreign_keys=[country_id])
    contactPoint_id = Column(Integer(), ForeignKey('ContactPoint.id'))
    contactPoint = relationship("ContactPoint", uselist=False, foreign_keys=[contactPoint_id])
    logo_id = Column(Integer(), ForeignKey('Image.id'))
    logo = relationship("Image", uselist=False, foreign_keys=[logo_id])
    
    
    # ManyToMany
    memberOfRi = relationship( "ReasearchInfrastructure", secondary="Provider_memberOfRi")
    
    
    # ManyToMany
    alternateName = relationship( "AlternateName", secondary="Provider_alternateName")
    
    
    keyword_rel = relationship( "ProviderKeyword" )
    keyword = association_proxy("keyword_rel", "keyword",
                                  creator=lambda x_: ProviderKeyword(keyword=x_))
    

    def __repr__(self):
        return f"Provider(id={self.id},rorId={self.rorId},name={self.name},description={self.description},homePage={self.homePage},dateIssued={self.dateIssued},dateModified={self.dateModified},country_id={self.country_id},contactPoint_id={self.contactPoint_id},logo_id={self.logo_id},)"



    
    # Using concrete inheritance: see https://docs.sqlalchemy.org/en/14/orm/inheritance.html
    __mapper_args__ = {
        'concrete': True
    }
    


class Collection(Catalogue):
    """
    Set of products and services with some common characteristics
    """
    __tablename__ = 'Collection'

    id = Column(Integer(), primary_key=True, autoincrement=True , nullable=False )
    title = Column(Text(), nullable=False )
    description = Column(Text(), nullable=False )
    version = Column(Text())
    dateIssued = Column(DateTime())
    dateModified = Column(DateTime())
    collectionDataProvider_id = Column(Integer(), ForeignKey('DataProvider.id'))
    collectionDataProvider = relationship("DataProvider", uselist=False, foreign_keys=[collectionDataProvider_id])
    
    
    # ManyToMany
    collectionItem = relationship( "ProductOrService", secondary="Collection_collectionItem")
    
    
    keyword_rel = relationship( "CollectionKeyword" )
    keyword = association_proxy("keyword_rel", "keyword",
                                  creator=lambda x_: CollectionKeyword(keyword=x_))
    

    def __repr__(self):
        return f"Collection(id={self.id},title={self.title},description={self.description},version={self.version},dateIssued={self.dateIssued},dateModified={self.dateModified},collectionDataProvider_id={self.collectionDataProvider_id},)"



    
    # Using concrete inheritance: see https://docs.sqlalchemy.org/en/14/orm/inheritance.html
    __mapper_args__ = {
        'concrete': True
    }
    


class Service(ProductOrService):
    """
    An intangible offering characterized by an activity, performance, or facilitation carried out by a provider to fulfill a user’s need
    """
    __tablename__ = 'Service'

    id = Column(Integer(), primary_key=True, autoincrement=True , nullable=False )
    modelSpecies = Column(Text())
    modelType = Column(Text())
    accessPointUrl = Column(Text(), nullable=False )
    refSku = Column(Text(), nullable=False )
    unitDefinition = Column(Text())
    unitCost = Column(Integer())
    unitCostCurrency = Column(Text())
    unitCostNote = Column(Text())
    qualityGrading = Column(Text())
    biosafetyRestrictions = Column(Text())
    canBeUsedToProduceGmo = Column(Boolean(), nullable=False )
    availability = Column(Text(), nullable=False )
    technicalRecommendation = Column(Text())
    internalReference = Column(Text())
    note = Column(Text())
    title = Column(Text(), nullable=False )
    description = Column(Text(), nullable=False )
    version = Column(Text())
    dateIssued = Column(DateTime())
    dateModified = Column(DateTime())
    category_id = Column(Integer(), ForeignKey('ProductCategory.id'), nullable=False )
    category = relationship("ProductCategory", uselist=False, foreign_keys=[category_id])
    riskGroup_id = Column(Integer(), ForeignKey('RiskGroup.id'))
    riskGroup = relationship("RiskGroup", uselist=False, foreign_keys=[riskGroup_id])
    provider_id = Column(Integer(), ForeignKey('Provider.id'), nullable=False )
    provider = relationship("Provider", uselist=False, foreign_keys=[provider_id])
    contactPoint_id = Column(Integer(), ForeignKey('ContactPoint.id'))
    contactPoint = relationship("ContactPoint", uselist=False, foreign_keys=[contactPoint_id])
    
    
    # ManyToMany
    additionalCategory = relationship( "ProductCategory", secondary="Service_additionalCategory")
    
    
    # ManyToMany
    pathogenIdentification = relationship( "PathogenIdentification", secondary="Service_pathogenIdentification")
    
    
    # ManyToMany
    doi = relationship( "Doi", secondary="Service_doi")
    
    
    # ManyToMany
    collection = relationship( "Collection", secondary="Service_collection")
    
    
    # ManyToMany
    keywords = relationship( "Keyword", secondary="Service_keywords")
    
    
    # ManyToMany
    complementaryDocument = relationship( "Document", secondary="Service_complementaryDocument")
    
    
    # ManyToMany
    productPicture = relationship( "Image", secondary="Service_productPicture")
    
    
    # ManyToMany
    externalRelatedReference = relationship( "ExternalRelatedReference", secondary="Service_externalRelatedReference")
    
    
    # ManyToMany
    certification = relationship( "Certification", secondary="Service_certification")
    
    
    keyword_rel = relationship( "ServiceKeyword" )
    keyword = association_proxy("keyword_rel", "keyword",
                                  creator=lambda x_: ServiceKeyword(keyword=x_))
    

    def __repr__(self):
        return f"Service(id={self.id},modelSpecies={self.modelSpecies},modelType={self.modelType},accessPointUrl={self.accessPointUrl},refSku={self.refSku},unitDefinition={self.unitDefinition},unitCost={self.unitCost},unitCostCurrency={self.unitCostCurrency},unitCostNote={self.unitCostNote},qualityGrading={self.qualityGrading},biosafetyRestrictions={self.biosafetyRestrictions},canBeUsedToProduceGmo={self.canBeUsedToProduceGmo},availability={self.availability},technicalRecommendation={self.technicalRecommendation},internalReference={self.internalReference},note={self.note},title={self.title},description={self.description},version={self.version},dateIssued={self.dateIssued},dateModified={self.dateModified},category_id={self.category_id},riskGroup_id={self.riskGroup_id},provider_id={self.provider_id},contactPoint_id={self.contactPoint_id},)"



    
    # Using concrete inheritance: see https://docs.sqlalchemy.org/en/14/orm/inheritance.html
    __mapper_args__ = {
        'concrete': True
    }
    


class Product(ProductOrService):
    """
    A tangible, physical item made available by a provider for use, consumption, or ownership transfer
    """
    __tablename__ = 'Product'

    id = Column(Integer(), primary_key=True, autoincrement=True , nullable=False )
    shippingConditions = Column(Text(), nullable=False )
    storageConditions = Column(Text(), nullable=False )
    thirdPartyDistributionConsent = Column(Boolean())
    usageRestrictions = Column(Text())
    accessPointUrl = Column(Text(), nullable=False )
    refSku = Column(Text(), nullable=False )
    unitDefinition = Column(Text())
    unitCost = Column(Integer())
    unitCostCurrency = Column(Text())
    unitCostNote = Column(Text())
    qualityGrading = Column(Text())
    biosafetyRestrictions = Column(Text())
    canBeUsedToProduceGmo = Column(Boolean(), nullable=False )
    availability = Column(Text(), nullable=False )
    technicalRecommendation = Column(Text())
    internalReference = Column(Text())
    note = Column(Text())
    title = Column(Text(), nullable=False )
    description = Column(Text(), nullable=False )
    version = Column(Text())
    dateIssued = Column(DateTime())
    dateModified = Column(DateTime())
    iataClassification_id = Column(Integer(), ForeignKey('IataClassification.id'), nullable=False )
    iataClassification = relationship("IataClassification", uselist=False, foreign_keys=[iataClassification_id])
    materialSafetyDataSheet_id = Column(Integer(), ForeignKey('ReasearchInfrastructure.id'))
    materialSafetyDataSheet = relationship("ReasearchInfrastructure", uselist=False, foreign_keys=[materialSafetyDataSheet_id])
    originator_id = Column(Integer(), ForeignKey('Originator.id'))
    originator = relationship("Originator", uselist=False, foreign_keys=[originator_id])
    category_id = Column(Integer(), ForeignKey('ProductCategory.id'), nullable=False )
    category = relationship("ProductCategory", uselist=False, foreign_keys=[category_id])
    riskGroup_id = Column(Integer(), ForeignKey('RiskGroup.id'))
    riskGroup = relationship("RiskGroup", uselist=False, foreign_keys=[riskGroup_id])
    provider_id = Column(Integer(), ForeignKey('Provider.id'), nullable=False )
    provider = relationship("Provider", uselist=False, foreign_keys=[provider_id])
    contactPoint_id = Column(Integer(), ForeignKey('ContactPoint.id'))
    contactPoint = relationship("ContactPoint", uselist=False, foreign_keys=[contactPoint_id])
    
    
    # ManyToMany
    additionalCategory = relationship( "ProductCategory", secondary="Product_additionalCategory")
    
    
    # ManyToMany
    pathogenIdentification = relationship( "PathogenIdentification", secondary="Product_pathogenIdentification")
    
    
    # ManyToMany
    doi = relationship( "Doi", secondary="Product_doi")
    
    
    # ManyToMany
    collection = relationship( "Collection", secondary="Product_collection")
    
    
    # ManyToMany
    keywords = relationship( "Keyword", secondary="Product_keywords")
    
    
    # ManyToMany
    complementaryDocument = relationship( "Document", secondary="Product_complementaryDocument")
    
    
    # ManyToMany
    productPicture = relationship( "Image", secondary="Product_productPicture")
    
    
    # ManyToMany
    externalRelatedReference = relationship( "ExternalRelatedReference", secondary="Product_externalRelatedReference")
    
    
    # ManyToMany
    certification = relationship( "Certification", secondary="Product_certification")
    
    
    keyword_rel = relationship( "ProductKeyword" )
    keyword = association_proxy("keyword_rel", "keyword",
                                  creator=lambda x_: ProductKeyword(keyword=x_))
    

    def __repr__(self):
        return f"Product(id={self.id},shippingConditions={self.shippingConditions},storageConditions={self.storageConditions},thirdPartyDistributionConsent={self.thirdPartyDistributionConsent},usageRestrictions={self.usageRestrictions},accessPointUrl={self.accessPointUrl},refSku={self.refSku},unitDefinition={self.unitDefinition},unitCost={self.unitCost},unitCostCurrency={self.unitCostCurrency},unitCostNote={self.unitCostNote},qualityGrading={self.qualityGrading},biosafetyRestrictions={self.biosafetyRestrictions},canBeUsedToProduceGmo={self.canBeUsedToProduceGmo},availability={self.availability},technicalRecommendation={self.technicalRecommendation},internalReference={self.internalReference},note={self.note},title={self.title},description={self.description},version={self.version},dateIssued={self.dateIssued},dateModified={self.dateModified},iataClassification_id={self.iataClassification_id},materialSafetyDataSheet_id={self.materialSafetyDataSheet_id},originator_id={self.originator_id},category_id={self.category_id},riskGroup_id={self.riskGroup_id},provider_id={self.provider_id},contactPoint_id={self.contactPoint_id},)"



    
    # Using concrete inheritance: see https://docs.sqlalchemy.org/en/14/orm/inheritance.html
    __mapper_args__ = {
        'concrete': True
    }
    


class Antibody(Product):
    """
    Protein that can bind to certain types of foreign bodies, such as pathogens
    """
    __tablename__ = 'Antibody'

    id = Column(Integer(), primary_key=True, autoincrement=True , nullable=False )
    productionSystem = Column(Text())
    antibodyPurifiedByAffinity = Column(Boolean(), nullable=False )
    specificityDocumented = Column(Boolean(), nullable=False )
    targetedAntigen = Column(Text(), nullable=False )
    shippingConditions = Column(Text(), nullable=False )
    storageConditions = Column(Text(), nullable=False )
    thirdPartyDistributionConsent = Column(Boolean())
    usageRestrictions = Column(Text())
    accessPointUrl = Column(Text(), nullable=False )
    refSku = Column(Text(), nullable=False )
    unitDefinition = Column(Text())
    unitCost = Column(Integer())
    unitCostCurrency = Column(Text())
    unitCostNote = Column(Text())
    qualityGrading = Column(Text())
    biosafetyRestrictions = Column(Text())
    canBeUsedToProduceGmo = Column(Boolean(), nullable=False )
    availability = Column(Text(), nullable=False )
    technicalRecommendation = Column(Text())
    internalReference = Column(Text())
    note = Column(Text())
    title = Column(Text(), nullable=False )
    description = Column(Text(), nullable=False )
    version = Column(Text())
    dateIssued = Column(DateTime())
    dateModified = Column(DateTime())
    iataClassification_id = Column(Integer(), ForeignKey('IataClassification.id'), nullable=False )
    iataClassification = relationship("IataClassification", uselist=False, foreign_keys=[iataClassification_id])
    materialSafetyDataSheet_id = Column(Integer(), ForeignKey('ReasearchInfrastructure.id'))
    materialSafetyDataSheet = relationship("ReasearchInfrastructure", uselist=False, foreign_keys=[materialSafetyDataSheet_id])
    originator_id = Column(Integer(), ForeignKey('Originator.id'))
    originator = relationship("Originator", uselist=False, foreign_keys=[originator_id])
    category_id = Column(Integer(), ForeignKey('ProductCategory.id'), nullable=False )
    category = relationship("ProductCategory", uselist=False, foreign_keys=[category_id])
    riskGroup_id = Column(Integer(), ForeignKey('RiskGroup.id'))
    riskGroup = relationship("RiskGroup", uselist=False, foreign_keys=[riskGroup_id])
    provider_id = Column(Integer(), ForeignKey('Provider.id'), nullable=False )
    provider = relationship("Provider", uselist=False, foreign_keys=[provider_id])
    contactPoint_id = Column(Integer(), ForeignKey('ContactPoint.id'))
    contactPoint = relationship("ContactPoint", uselist=False, foreign_keys=[contactPoint_id])
    
    
    # ManyToMany
    sequenceReference = relationship( "SequenceReference", secondary="Antibody_sequenceReference")
    
    
    # ManyToMany
    additionalCategory = relationship( "ProductCategory", secondary="Antibody_additionalCategory")
    
    
    # ManyToMany
    pathogenIdentification = relationship( "PathogenIdentification", secondary="Antibody_pathogenIdentification")
    
    
    # ManyToMany
    doi = relationship( "Doi", secondary="Antibody_doi")
    
    
    # ManyToMany
    collection = relationship( "Collection", secondary="Antibody_collection")
    
    
    # ManyToMany
    keywords = relationship( "Keyword", secondary="Antibody_keywords")
    
    
    # ManyToMany
    complementaryDocument = relationship( "Document", secondary="Antibody_complementaryDocument")
    
    
    # ManyToMany
    productPicture = relationship( "Image", secondary="Antibody_productPicture")
    
    
    # ManyToMany
    externalRelatedReference = relationship( "ExternalRelatedReference", secondary="Antibody_externalRelatedReference")
    
    
    # ManyToMany
    certification = relationship( "Certification", secondary="Antibody_certification")
    
    
    keyword_rel = relationship( "AntibodyKeyword" )
    keyword = association_proxy("keyword_rel", "keyword",
                                  creator=lambda x_: AntibodyKeyword(keyword=x_))
    

    def __repr__(self):
        return f"Antibody(id={self.id},productionSystem={self.productionSystem},antibodyPurifiedByAffinity={self.antibodyPurifiedByAffinity},specificityDocumented={self.specificityDocumented},targetedAntigen={self.targetedAntigen},shippingConditions={self.shippingConditions},storageConditions={self.storageConditions},thirdPartyDistributionConsent={self.thirdPartyDistributionConsent},usageRestrictions={self.usageRestrictions},accessPointUrl={self.accessPointUrl},refSku={self.refSku},unitDefinition={self.unitDefinition},unitCost={self.unitCost},unitCostCurrency={self.unitCostCurrency},unitCostNote={self.unitCostNote},qualityGrading={self.qualityGrading},biosafetyRestrictions={self.biosafetyRestrictions},canBeUsedToProduceGmo={self.canBeUsedToProduceGmo},availability={self.availability},technicalRecommendation={self.technicalRecommendation},internalReference={self.internalReference},note={self.note},title={self.title},description={self.description},version={self.version},dateIssued={self.dateIssued},dateModified={self.dateModified},iataClassification_id={self.iataClassification_id},materialSafetyDataSheet_id={self.materialSafetyDataSheet_id},originator_id={self.originator_id},category_id={self.category_id},riskGroup_id={self.riskGroup_id},provider_id={self.provider_id},contactPoint_id={self.contactPoint_id},)"



    
    # Using concrete inheritance: see https://docs.sqlalchemy.org/en/14/orm/inheritance.html
    __mapper_args__ = {
        'concrete': True
    }
    


class Protein(Product):
    """
    A protein as a derived product from a pathogen
    """
    __tablename__ = 'Protein'

    id = Column(Integer(), primary_key=True, autoincrement=True , nullable=False )
    shippingConditions = Column(Text(), nullable=False )
    storageConditions = Column(Text(), nullable=False )
    thirdPartyDistributionConsent = Column(Boolean())
    usageRestrictions = Column(Text())
    accessPointUrl = Column(Text(), nullable=False )
    refSku = Column(Text(), nullable=False )
    unitDefinition = Column(Text())
    unitCost = Column(Integer())
    unitCostCurrency = Column(Text())
    unitCostNote = Column(Text())
    qualityGrading = Column(Text())
    biosafetyRestrictions = Column(Text())
    canBeUsedToProduceGmo = Column(Boolean(), nullable=False )
    availability = Column(Text(), nullable=False )
    technicalRecommendation = Column(Text())
    internalReference = Column(Text())
    note = Column(Text())
    title = Column(Text(), nullable=False )
    description = Column(Text(), nullable=False )
    version = Column(Text())
    dateIssued = Column(DateTime())
    dateModified = Column(DateTime())
    biologicalMaterialOrigin_id = Column(Integer(), ForeignKey('BiologicalMaterialOrigin.id'), nullable=False )
    biologicalMaterialOrigin = relationship("BiologicalMaterialOrigin", uselist=False, foreign_keys=[biologicalMaterialOrigin_id])
    iataClassification_id = Column(Integer(), ForeignKey('IataClassification.id'), nullable=False )
    iataClassification = relationship("IataClassification", uselist=False, foreign_keys=[iataClassification_id])
    materialSafetyDataSheet_id = Column(Integer(), ForeignKey('ReasearchInfrastructure.id'))
    materialSafetyDataSheet = relationship("ReasearchInfrastructure", uselist=False, foreign_keys=[materialSafetyDataSheet_id])
    originator_id = Column(Integer(), ForeignKey('Originator.id'))
    originator = relationship("Originator", uselist=False, foreign_keys=[originator_id])
    category_id = Column(Integer(), ForeignKey('ProductCategory.id'), nullable=False )
    category = relationship("ProductCategory", uselist=False, foreign_keys=[category_id])
    riskGroup_id = Column(Integer(), ForeignKey('RiskGroup.id'))
    riskGroup = relationship("RiskGroup", uselist=False, foreign_keys=[riskGroup_id])
    provider_id = Column(Integer(), ForeignKey('Provider.id'), nullable=False )
    provider = relationship("Provider", uselist=False, foreign_keys=[provider_id])
    contactPoint_id = Column(Integer(), ForeignKey('ContactPoint.id'))
    contactPoint = relationship("ContactPoint", uselist=False, foreign_keys=[contactPoint_id])
    
    
    # ManyToMany
    sequence = relationship( "Sequence", secondary="Protein_sequence")
    
    
    # ManyToMany
    relatedPdb = relationship( "PdbReference", secondary="Protein_relatedPdb")
    
    
    # ManyToMany
    specialFeature = relationship( "SpecialFeature", secondary="Protein_specialFeature")
    
    
    # ManyToMany
    tagSequence = relationship( "TagSequence", secondary="Protein_tagSequence")
    
    
    domain_rel = relationship( "ProteinDomain" )
    domain = association_proxy("domain_rel", "domain",
                                  creator=lambda x_: ProteinDomain(domain=x_))
    
    
    expressedAs_rel = relationship( "ProteinExpressedAs" )
    expressedAs = association_proxy("expressedAs_rel", "expressedAs",
                                  creator=lambda x_: ProteinExpressedAs(expressedAs=x_))
    
    
    inclusionBodiesType_rel = relationship( "ProteinInclusionBodiesType" )
    inclusionBodiesType = association_proxy("inclusionBodiesType_rel", "inclusionBodiesType",
                                  creator=lambda x_: ProteinInclusionBodiesType(inclusionBodiesType=x_))
    
    
    expressionSystem_rel = relationship( "ProteinExpressionSystem" )
    expressionSystem = association_proxy("expressionSystem_rel", "expressionSystem",
                                  creator=lambda x_: ProteinExpressionSystem(expressionSystem=x_))
    
    
    functionalCharacterization_rel = relationship( "ProteinFunctionalCharacterization" )
    functionalCharacterization = association_proxy("functionalCharacterization_rel", "functionalCharacterization",
                                  creator=lambda x_: ProteinFunctionalCharacterization(functionalCharacterization=x_))
    
    
    functionalAndTechnicalDescription_rel = relationship( "ProteinFunctionalAndTechnicalDescription" )
    functionalAndTechnicalDescription = association_proxy("functionalAndTechnicalDescription_rel", "functionalAndTechnicalDescription",
                                  creator=lambda x_: ProteinFunctionalAndTechnicalDescription(functionalAndTechnicalDescription=x_))
    
    
    proteinPurification_rel = relationship( "ProteinProteinPurification" )
    proteinPurification = association_proxy("proteinPurification_rel", "proteinPurification",
                                  creator=lambda x_: ProteinProteinPurification(proteinPurification=x_))
    
    
    tagStatusOfTheSolubilizedProtein_rel = relationship( "ProteinTagStatusOfTheSolubilizedProtein" )
    tagStatusOfTheSolubilizedProtein = association_proxy("tagStatusOfTheSolubilizedProtein_rel", "tagStatusOfTheSolubilizedProtein",
                                  creator=lambda x_: ProteinTagStatusOfTheSolubilizedProtein(tagStatusOfTheSolubilizedProtein=x_))
    
    
    typeOfFunctionalCharacterization_rel = relationship( "ProteinTypeOfFunctionalCharacterization" )
    typeOfFunctionalCharacterization = association_proxy("typeOfFunctionalCharacterization_rel", "typeOfFunctionalCharacterization",
                                  creator=lambda x_: ProteinTypeOfFunctionalCharacterization(typeOfFunctionalCharacterization=x_))
    
    
    # ManyToMany
    additionalCategory = relationship( "ProductCategory", secondary="Protein_additionalCategory")
    
    
    # ManyToMany
    pathogenIdentification = relationship( "PathogenIdentification", secondary="Protein_pathogenIdentification")
    
    
    # ManyToMany
    doi = relationship( "Doi", secondary="Protein_doi")
    
    
    # ManyToMany
    collection = relationship( "Collection", secondary="Protein_collection")
    
    
    # ManyToMany
    keywords = relationship( "Keyword", secondary="Protein_keywords")
    
    
    # ManyToMany
    complementaryDocument = relationship( "Document", secondary="Protein_complementaryDocument")
    
    
    # ManyToMany
    productPicture = relationship( "Image", secondary="Protein_productPicture")
    
    
    # ManyToMany
    externalRelatedReference = relationship( "ExternalRelatedReference", secondary="Protein_externalRelatedReference")
    
    
    # ManyToMany
    certification = relationship( "Certification", secondary="Protein_certification")
    
    
    keyword_rel = relationship( "ProteinKeyword" )
    keyword = association_proxy("keyword_rel", "keyword",
                                  creator=lambda x_: ProteinKeyword(keyword=x_))
    

    def __repr__(self):
        return f"Protein(id={self.id},shippingConditions={self.shippingConditions},storageConditions={self.storageConditions},thirdPartyDistributionConsent={self.thirdPartyDistributionConsent},usageRestrictions={self.usageRestrictions},accessPointUrl={self.accessPointUrl},refSku={self.refSku},unitDefinition={self.unitDefinition},unitCost={self.unitCost},unitCostCurrency={self.unitCostCurrency},unitCostNote={self.unitCostNote},qualityGrading={self.qualityGrading},biosafetyRestrictions={self.biosafetyRestrictions},canBeUsedToProduceGmo={self.canBeUsedToProduceGmo},availability={self.availability},technicalRecommendation={self.technicalRecommendation},internalReference={self.internalReference},note={self.note},title={self.title},description={self.description},version={self.version},dateIssued={self.dateIssued},dateModified={self.dateModified},biologicalMaterialOrigin_id={self.biologicalMaterialOrigin_id},iataClassification_id={self.iataClassification_id},materialSafetyDataSheet_id={self.materialSafetyDataSheet_id},originator_id={self.originator_id},category_id={self.category_id},riskGroup_id={self.riskGroup_id},provider_id={self.provider_id},contactPoint_id={self.contactPoint_id},)"



    
    # Using concrete inheritance: see https://docs.sqlalchemy.org/en/14/orm/inheritance.html
    __mapper_args__ = {
        'concrete': True
    }
    


class NucleicAcid(Product):
    """
    Nucleic acid related to a pathogen. It can be extracted or synthetic
    """
    __tablename__ = 'NucleicAcid'

    id = Column(Integer(), primary_key=True, autoincrement=True , nullable=False )
    clonedNucleicAcid = Column(Boolean(), nullable=False )
    regionEncompassedInThisProduct = Column(Text(), nullable=False )
    mutationObserved = Column(Boolean(), nullable=False )
    observedMutations = Column(Text())
    identificationTechnique = Column(Text())
    sequencing = Column(Text(), nullable=False )
    titer = Column(Text())
    sequenceChecked = Column(Boolean(), nullable=False )
    shippingConditions = Column(Text(), nullable=False )
    storageConditions = Column(Text(), nullable=False )
    thirdPartyDistributionConsent = Column(Boolean())
    usageRestrictions = Column(Text())
    accessPointUrl = Column(Text(), nullable=False )
    refSku = Column(Text(), nullable=False )
    unitDefinition = Column(Text())
    unitCost = Column(Integer())
    unitCostCurrency = Column(Text())
    unitCostNote = Column(Text())
    qualityGrading = Column(Text())
    biosafetyRestrictions = Column(Text())
    canBeUsedToProduceGmo = Column(Boolean(), nullable=False )
    availability = Column(Text(), nullable=False )
    technicalRecommendation = Column(Text())
    internalReference = Column(Text())
    note = Column(Text())
    title = Column(Text(), nullable=False )
    description = Column(Text(), nullable=False )
    version = Column(Text())
    dateIssued = Column(DateTime())
    dateModified = Column(DateTime())
    biologicalMaterialOrigin_id = Column(Integer(), ForeignKey('BiologicalMaterialOrigin.id'), nullable=False )
    biologicalMaterialOrigin = relationship("BiologicalMaterialOrigin", uselist=False, foreign_keys=[biologicalMaterialOrigin_id])
    clonedIntoPlasmid_id = Column(Integer(), ForeignKey('ExpressionVector.id'))
    clonedIntoPlasmid = relationship("ExpressionVector", uselist=False, foreign_keys=[clonedIntoPlasmid_id])
    tagSequence_id = Column(Integer(), ForeignKey('TagSequence.id'), nullable=False )
    tagSequence = relationship("TagSequence", uselist=False, foreign_keys=[tagSequence_id])
    iataClassification_id = Column(Integer(), ForeignKey('IataClassification.id'), nullable=False )
    iataClassification = relationship("IataClassification", uselist=False, foreign_keys=[iataClassification_id])
    materialSafetyDataSheet_id = Column(Integer(), ForeignKey('ReasearchInfrastructure.id'))
    materialSafetyDataSheet = relationship("ReasearchInfrastructure", uselist=False, foreign_keys=[materialSafetyDataSheet_id])
    originator_id = Column(Integer(), ForeignKey('Originator.id'))
    originator = relationship("Originator", uselist=False, foreign_keys=[originator_id])
    category_id = Column(Integer(), ForeignKey('ProductCategory.id'), nullable=False )
    category = relationship("ProductCategory", uselist=False, foreign_keys=[category_id])
    riskGroup_id = Column(Integer(), ForeignKey('RiskGroup.id'))
    riskGroup = relationship("RiskGroup", uselist=False, foreign_keys=[riskGroup_id])
    provider_id = Column(Integer(), ForeignKey('Provider.id'), nullable=False )
    provider = relationship("Provider", uselist=False, foreign_keys=[provider_id])
    contactPoint_id = Column(Integer(), ForeignKey('ContactPoint.id'))
    contactPoint = relationship("ContactPoint", uselist=False, foreign_keys=[contactPoint_id])
    
    
    # ManyToMany
    genBankFileOfTheConstruct = relationship( "Data", secondary="NucleicAcid_genBankFileOfTheConstruct")
    
    
    # ManyToMany
    sequence = relationship( "Sequence", secondary="NucleicAcid_sequence")
    
    
    # ManyToMany
    plasmidSelection = relationship( "PlasmidSelection", secondary="NucleicAcid_plasmidSelection")
    
    
    # ManyToMany
    additionalCategory = relationship( "ProductCategory", secondary="NucleicAcid_additionalCategory")
    
    
    # ManyToMany
    pathogenIdentification = relationship( "PathogenIdentification", secondary="NucleicAcid_pathogenIdentification")
    
    
    # ManyToMany
    doi = relationship( "Doi", secondary="NucleicAcid_doi")
    
    
    # ManyToMany
    collection = relationship( "Collection", secondary="NucleicAcid_collection")
    
    
    # ManyToMany
    keywords = relationship( "Keyword", secondary="NucleicAcid_keywords")
    
    
    # ManyToMany
    complementaryDocument = relationship( "Document", secondary="NucleicAcid_complementaryDocument")
    
    
    # ManyToMany
    productPicture = relationship( "Image", secondary="NucleicAcid_productPicture")
    
    
    # ManyToMany
    externalRelatedReference = relationship( "ExternalRelatedReference", secondary="NucleicAcid_externalRelatedReference")
    
    
    # ManyToMany
    certification = relationship( "Certification", secondary="NucleicAcid_certification")
    
    
    keyword_rel = relationship( "NucleicAcidKeyword" )
    keyword = association_proxy("keyword_rel", "keyword",
                                  creator=lambda x_: NucleicAcidKeyword(keyword=x_))
    

    def __repr__(self):
        return f"NucleicAcid(id={self.id},clonedNucleicAcid={self.clonedNucleicAcid},regionEncompassedInThisProduct={self.regionEncompassedInThisProduct},mutationObserved={self.mutationObserved},observedMutations={self.observedMutations},identificationTechnique={self.identificationTechnique},sequencing={self.sequencing},titer={self.titer},sequenceChecked={self.sequenceChecked},shippingConditions={self.shippingConditions},storageConditions={self.storageConditions},thirdPartyDistributionConsent={self.thirdPartyDistributionConsent},usageRestrictions={self.usageRestrictions},accessPointUrl={self.accessPointUrl},refSku={self.refSku},unitDefinition={self.unitDefinition},unitCost={self.unitCost},unitCostCurrency={self.unitCostCurrency},unitCostNote={self.unitCostNote},qualityGrading={self.qualityGrading},biosafetyRestrictions={self.biosafetyRestrictions},canBeUsedToProduceGmo={self.canBeUsedToProduceGmo},availability={self.availability},technicalRecommendation={self.technicalRecommendation},internalReference={self.internalReference},note={self.note},title={self.title},description={self.description},version={self.version},dateIssued={self.dateIssued},dateModified={self.dateModified},biologicalMaterialOrigin_id={self.biologicalMaterialOrigin_id},clonedIntoPlasmid_id={self.clonedIntoPlasmid_id},tagSequence_id={self.tagSequence_id},iataClassification_id={self.iataClassification_id},materialSafetyDataSheet_id={self.materialSafetyDataSheet_id},originator_id={self.originator_id},category_id={self.category_id},riskGroup_id={self.riskGroup_id},provider_id={self.provider_id},contactPoint_id={self.contactPoint_id},)"



    
    # Using concrete inheritance: see https://docs.sqlalchemy.org/en/14/orm/inheritance.html
    __mapper_args__ = {
        'concrete': True
    }
    


class DetectionKit(Product):
    """
    A detection kit for specific pathogens
    """
    __tablename__ = 'DetectionKit'

    id = Column(Integer(), primary_key=True, autoincrement=True , nullable=False )
    specificityDocumented = Column(Boolean(), nullable=False )
    specificity = Column(Text())
    targetedRegion = Column(Text())
    shippingConditions = Column(Text(), nullable=False )
    storageConditions = Column(Text(), nullable=False )
    thirdPartyDistributionConsent = Column(Boolean())
    usageRestrictions = Column(Text())
    accessPointUrl = Column(Text(), nullable=False )
    refSku = Column(Text(), nullable=False )
    unitDefinition = Column(Text())
    unitCost = Column(Integer())
    unitCostCurrency = Column(Text())
    unitCostNote = Column(Text())
    qualityGrading = Column(Text())
    biosafetyRestrictions = Column(Text())
    canBeUsedToProduceGmo = Column(Boolean(), nullable=False )
    availability = Column(Text(), nullable=False )
    technicalRecommendation = Column(Text())
    internalReference = Column(Text())
    note = Column(Text())
    title = Column(Text(), nullable=False )
    description = Column(Text(), nullable=False )
    version = Column(Text())
    dateIssued = Column(DateTime())
    dateModified = Column(DateTime())
    iataClassification_id = Column(Integer(), ForeignKey('IataClassification.id'), nullable=False )
    iataClassification = relationship("IataClassification", uselist=False, foreign_keys=[iataClassification_id])
    materialSafetyDataSheet_id = Column(Integer(), ForeignKey('ReasearchInfrastructure.id'))
    materialSafetyDataSheet = relationship("ReasearchInfrastructure", uselist=False, foreign_keys=[materialSafetyDataSheet_id])
    originator_id = Column(Integer(), ForeignKey('Originator.id'))
    originator = relationship("Originator", uselist=False, foreign_keys=[originator_id])
    category_id = Column(Integer(), ForeignKey('ProductCategory.id'), nullable=False )
    category = relationship("ProductCategory", uselist=False, foreign_keys=[category_id])
    riskGroup_id = Column(Integer(), ForeignKey('RiskGroup.id'))
    riskGroup = relationship("RiskGroup", uselist=False, foreign_keys=[riskGroup_id])
    provider_id = Column(Integer(), ForeignKey('Provider.id'), nullable=False )
    provider = relationship("Provider", uselist=False, foreign_keys=[provider_id])
    contactPoint_id = Column(Integer(), ForeignKey('ContactPoint.id'))
    contactPoint = relationship("ContactPoint", uselist=False, foreign_keys=[contactPoint_id])
    
    
    # ManyToMany
    standardOperatingProcedureFile = relationship( "File", secondary="DetectionKit_standardOperatingProcedureFile")
    
    
    # ManyToMany
    additionalCategory = relationship( "ProductCategory", secondary="DetectionKit_additionalCategory")
    
    
    # ManyToMany
    pathogenIdentification = relationship( "PathogenIdentification", secondary="DetectionKit_pathogenIdentification")
    
    
    # ManyToMany
    doi = relationship( "Doi", secondary="DetectionKit_doi")
    
    
    # ManyToMany
    collection = relationship( "Collection", secondary="DetectionKit_collection")
    
    
    # ManyToMany
    keywords = relationship( "Keyword", secondary="DetectionKit_keywords")
    
    
    # ManyToMany
    complementaryDocument = relationship( "Document", secondary="DetectionKit_complementaryDocument")
    
    
    # ManyToMany
    productPicture = relationship( "Image", secondary="DetectionKit_productPicture")
    
    
    # ManyToMany
    externalRelatedReference = relationship( "ExternalRelatedReference", secondary="DetectionKit_externalRelatedReference")
    
    
    # ManyToMany
    certification = relationship( "Certification", secondary="DetectionKit_certification")
    
    
    keyword_rel = relationship( "DetectionKitKeyword" )
    keyword = association_proxy("keyword_rel", "keyword",
                                  creator=lambda x_: DetectionKitKeyword(keyword=x_))
    

    def __repr__(self):
        return f"DetectionKit(id={self.id},specificityDocumented={self.specificityDocumented},specificity={self.specificity},targetedRegion={self.targetedRegion},shippingConditions={self.shippingConditions},storageConditions={self.storageConditions},thirdPartyDistributionConsent={self.thirdPartyDistributionConsent},usageRestrictions={self.usageRestrictions},accessPointUrl={self.accessPointUrl},refSku={self.refSku},unitDefinition={self.unitDefinition},unitCost={self.unitCost},unitCostCurrency={self.unitCostCurrency},unitCostNote={self.unitCostNote},qualityGrading={self.qualityGrading},biosafetyRestrictions={self.biosafetyRestrictions},canBeUsedToProduceGmo={self.canBeUsedToProduceGmo},availability={self.availability},technicalRecommendation={self.technicalRecommendation},internalReference={self.internalReference},note={self.note},title={self.title},description={self.description},version={self.version},dateIssued={self.dateIssued},dateModified={self.dateModified},iataClassification_id={self.iataClassification_id},materialSafetyDataSheet_id={self.materialSafetyDataSheet_id},originator_id={self.originator_id},category_id={self.category_id},riskGroup_id={self.riskGroup_id},provider_id={self.provider_id},contactPoint_id={self.contactPoint_id},)"



    
    # Using concrete inheritance: see https://docs.sqlalchemy.org/en/14/orm/inheritance.html
    __mapper_args__ = {
        'concrete': True
    }
    


class Bundle(Product):
    """
    A grouping of products and/or services intentionally combined into a single offering, typically to provide added value, convenience, or specific experimental utility
    """
    __tablename__ = 'Bundle'

    id = Column(Integer(), primary_key=True, autoincrement=True , nullable=False )
    shippingConditions = Column(Text(), nullable=False )
    storageConditions = Column(Text(), nullable=False )
    thirdPartyDistributionConsent = Column(Boolean())
    usageRestrictions = Column(Text())
    accessPointUrl = Column(Text(), nullable=False )
    refSku = Column(Text(), nullable=False )
    unitDefinition = Column(Text())
    unitCost = Column(Integer())
    unitCostCurrency = Column(Text())
    unitCostNote = Column(Text())
    qualityGrading = Column(Text())
    biosafetyRestrictions = Column(Text())
    canBeUsedToProduceGmo = Column(Boolean(), nullable=False )
    availability = Column(Text(), nullable=False )
    technicalRecommendation = Column(Text())
    internalReference = Column(Text())
    note = Column(Text())
    title = Column(Text(), nullable=False )
    description = Column(Text(), nullable=False )
    version = Column(Text())
    dateIssued = Column(DateTime())
    dateModified = Column(DateTime())
    iataClassification_id = Column(Integer(), ForeignKey('IataClassification.id'), nullable=False )
    iataClassification = relationship("IataClassification", uselist=False, foreign_keys=[iataClassification_id])
    materialSafetyDataSheet_id = Column(Integer(), ForeignKey('ReasearchInfrastructure.id'))
    materialSafetyDataSheet = relationship("ReasearchInfrastructure", uselist=False, foreign_keys=[materialSafetyDataSheet_id])
    originator_id = Column(Integer(), ForeignKey('Originator.id'))
    originator = relationship("Originator", uselist=False, foreign_keys=[originator_id])
    category_id = Column(Integer(), ForeignKey('ProductCategory.id'), nullable=False )
    category = relationship("ProductCategory", uselist=False, foreign_keys=[category_id])
    riskGroup_id = Column(Integer(), ForeignKey('RiskGroup.id'))
    riskGroup = relationship("RiskGroup", uselist=False, foreign_keys=[riskGroup_id])
    provider_id = Column(Integer(), ForeignKey('Provider.id'), nullable=False )
    provider = relationship("Provider", uselist=False, foreign_keys=[provider_id])
    contactPoint_id = Column(Integer(), ForeignKey('ContactPoint.id'))
    contactPoint = relationship("ContactPoint", uselist=False, foreign_keys=[contactPoint_id])
    
    
    # ManyToMany
    itemsOfTheBundle = relationship( "Product", secondary="Bundle_itemsOfTheBundle")
    
    
    # ManyToMany
    additionalCategory = relationship( "ProductCategory", secondary="Bundle_additionalCategory")
    
    
    # ManyToMany
    pathogenIdentification = relationship( "PathogenIdentification", secondary="Bundle_pathogenIdentification")
    
    
    # ManyToMany
    doi = relationship( "Doi", secondary="Bundle_doi")
    
    
    # ManyToMany
    collection = relationship( "Collection", secondary="Bundle_collection")
    
    
    # ManyToMany
    keywords = relationship( "Keyword", secondary="Bundle_keywords")
    
    
    # ManyToMany
    complementaryDocument = relationship( "Document", secondary="Bundle_complementaryDocument")
    
    
    # ManyToMany
    productPicture = relationship( "Image", secondary="Bundle_productPicture")
    
    
    # ManyToMany
    externalRelatedReference = relationship( "ExternalRelatedReference", secondary="Bundle_externalRelatedReference")
    
    
    # ManyToMany
    certification = relationship( "Certification", secondary="Bundle_certification")
    
    
    keyword_rel = relationship( "BundleKeyword" )
    keyword = association_proxy("keyword_rel", "keyword",
                                  creator=lambda x_: BundleKeyword(keyword=x_))
    

    def __repr__(self):
        return f"Bundle(id={self.id},shippingConditions={self.shippingConditions},storageConditions={self.storageConditions},thirdPartyDistributionConsent={self.thirdPartyDistributionConsent},usageRestrictions={self.usageRestrictions},accessPointUrl={self.accessPointUrl},refSku={self.refSku},unitDefinition={self.unitDefinition},unitCost={self.unitCost},unitCostCurrency={self.unitCostCurrency},unitCostNote={self.unitCostNote},qualityGrading={self.qualityGrading},biosafetyRestrictions={self.biosafetyRestrictions},canBeUsedToProduceGmo={self.canBeUsedToProduceGmo},availability={self.availability},technicalRecommendation={self.technicalRecommendation},internalReference={self.internalReference},note={self.note},title={self.title},description={self.description},version={self.version},dateIssued={self.dateIssued},dateModified={self.dateModified},iataClassification_id={self.iataClassification_id},materialSafetyDataSheet_id={self.materialSafetyDataSheet_id},originator_id={self.originator_id},category_id={self.category_id},riskGroup_id={self.riskGroup_id},provider_id={self.provider_id},contactPoint_id={self.contactPoint_id},)"



    
    # Using concrete inheritance: see https://docs.sqlalchemy.org/en/14/orm/inheritance.html
    __mapper_args__ = {
        'concrete': True
    }
    


class Pathogen(Product):
    """
    Biological entity that causes disease in its host, which is typically an infectious microorganism or agent, such as a virus, bacterium, protozoan, prion, viroid, or fungus
    """
    __tablename__ = 'Pathogen'

    id = Column(Integer(), primary_key=True, autoincrement=True , nullable=False )
    cultivability = Column(Text(), nullable=False )
    clinicalInformation = Column(Text())
    identificationTechnique = Column(Text())
    infectivity = Column(Text(), nullable=False )
    infectivityTest = Column(Text())
    isolationTechnique = Column(Text())
    isolationConditions = Column(Text())
    letterOfAuthority = Column(Text(), nullable=False )
    passage = Column(Text())
    genomeSequencing = Column(Text(), nullable=False )
    titer = Column(Text(), nullable=False )
    shippingConditions = Column(Text(), nullable=False )
    storageConditions = Column(Text(), nullable=False )
    thirdPartyDistributionConsent = Column(Boolean())
    usageRestrictions = Column(Text())
    accessPointUrl = Column(Text(), nullable=False )
    refSku = Column(Text(), nullable=False )
    unitDefinition = Column(Text())
    unitCost = Column(Integer())
    unitCostCurrency = Column(Text())
    unitCostNote = Column(Text())
    qualityGrading = Column(Text())
    biosafetyRestrictions = Column(Text())
    canBeUsedToProduceGmo = Column(Boolean(), nullable=False )
    availability = Column(Text(), nullable=False )
    technicalRecommendation = Column(Text())
    internalReference = Column(Text())
    note = Column(Text())
    title = Column(Text(), nullable=False )
    description = Column(Text(), nullable=False )
    version = Column(Text())
    dateIssued = Column(DateTime())
    dateModified = Column(DateTime())
    biologicalMaterialOrigin_id = Column(Integer(), ForeignKey('BiologicalMaterialOrigin.id'), nullable=False )
    biologicalMaterialOrigin = relationship("BiologicalMaterialOrigin", uselist=False, foreign_keys=[biologicalMaterialOrigin_id])
    iataClassification_id = Column(Integer(), ForeignKey('IataClassification.id'), nullable=False )
    iataClassification = relationship("IataClassification", uselist=False, foreign_keys=[iataClassification_id])
    materialSafetyDataSheet_id = Column(Integer(), ForeignKey('ReasearchInfrastructure.id'))
    materialSafetyDataSheet = relationship("ReasearchInfrastructure", uselist=False, foreign_keys=[materialSafetyDataSheet_id])
    originator_id = Column(Integer(), ForeignKey('Originator.id'))
    originator = relationship("Originator", uselist=False, foreign_keys=[originator_id])
    category_id = Column(Integer(), ForeignKey('ProductCategory.id'), nullable=False )
    category = relationship("ProductCategory", uselist=False, foreign_keys=[category_id])
    riskGroup_id = Column(Integer(), ForeignKey('RiskGroup.id'))
    riskGroup = relationship("RiskGroup", uselist=False, foreign_keys=[riskGroup_id])
    provider_id = Column(Integer(), ForeignKey('Provider.id'), nullable=False )
    provider = relationship("Provider", uselist=False, foreign_keys=[provider_id])
    contactPoint_id = Column(Integer(), ForeignKey('ContactPoint.id'))
    contactPoint = relationship("ContactPoint", uselist=False, foreign_keys=[contactPoint_id])
    
    
    # ManyToMany
    suspectedEpidemiologicalOrigin = relationship( "GeographicalOrigin", secondary="Pathogen_suspectedEpidemiologicalOrigin")
    
    
    # ManyToMany
    isolationHost = relationship( "IsolationHost", secondary="Pathogen_isolationHost")
    
    
    # ManyToMany
    productionCellLine = relationship( "ProductionCellLine", secondary="Pathogen_productionCellLine")
    
    
    # ManyToMany
    propagationHost = relationship( "PropagationHost", secondary="Pathogen_propagationHost")
    
    
    # ManyToMany
    transmissionMethod = relationship( "TransmissionMethod", secondary="Pathogen_transmissionMethod")
    
    
    # ManyToMany
    sequence = relationship( "Sequence", secondary="Pathogen_sequence")
    
    
    # ManyToMany
    additionalCategory = relationship( "ProductCategory", secondary="Pathogen_additionalCategory")
    
    
    # ManyToMany
    pathogenIdentification = relationship( "PathogenIdentification", secondary="Pathogen_pathogenIdentification")
    
    
    # ManyToMany
    doi = relationship( "Doi", secondary="Pathogen_doi")
    
    
    # ManyToMany
    collection = relationship( "Collection", secondary="Pathogen_collection")
    
    
    # ManyToMany
    keywords = relationship( "Keyword", secondary="Pathogen_keywords")
    
    
    # ManyToMany
    complementaryDocument = relationship( "Document", secondary="Pathogen_complementaryDocument")
    
    
    # ManyToMany
    productPicture = relationship( "Image", secondary="Pathogen_productPicture")
    
    
    # ManyToMany
    externalRelatedReference = relationship( "ExternalRelatedReference", secondary="Pathogen_externalRelatedReference")
    
    
    # ManyToMany
    certification = relationship( "Certification", secondary="Pathogen_certification")
    
    
    keyword_rel = relationship( "PathogenKeyword" )
    keyword = association_proxy("keyword_rel", "keyword",
                                  creator=lambda x_: PathogenKeyword(keyword=x_))
    

    def __repr__(self):
        return f"Pathogen(id={self.id},cultivability={self.cultivability},clinicalInformation={self.clinicalInformation},identificationTechnique={self.identificationTechnique},infectivity={self.infectivity},infectivityTest={self.infectivityTest},isolationTechnique={self.isolationTechnique},isolationConditions={self.isolationConditions},letterOfAuthority={self.letterOfAuthority},passage={self.passage},genomeSequencing={self.genomeSequencing},titer={self.titer},shippingConditions={self.shippingConditions},storageConditions={self.storageConditions},thirdPartyDistributionConsent={self.thirdPartyDistributionConsent},usageRestrictions={self.usageRestrictions},accessPointUrl={self.accessPointUrl},refSku={self.refSku},unitDefinition={self.unitDefinition},unitCost={self.unitCost},unitCostCurrency={self.unitCostCurrency},unitCostNote={self.unitCostNote},qualityGrading={self.qualityGrading},biosafetyRestrictions={self.biosafetyRestrictions},canBeUsedToProduceGmo={self.canBeUsedToProduceGmo},availability={self.availability},technicalRecommendation={self.technicalRecommendation},internalReference={self.internalReference},note={self.note},title={self.title},description={self.description},version={self.version},dateIssued={self.dateIssued},dateModified={self.dateModified},biologicalMaterialOrigin_id={self.biologicalMaterialOrigin_id},iataClassification_id={self.iataClassification_id},materialSafetyDataSheet_id={self.materialSafetyDataSheet_id},originator_id={self.originator_id},category_id={self.category_id},riskGroup_id={self.riskGroup_id},provider_id={self.provider_id},contactPoint_id={self.contactPoint_id},)"



    
    # Using concrete inheritance: see https://docs.sqlalchemy.org/en/14/orm/inheritance.html
    __mapper_args__ = {
        'concrete': True
    }
    


class Hybridoma(Antibody):
    """
    An hybridoma that provides antibodies that can be related to a pathogen
    """
    __tablename__ = 'Hybridoma'

    id = Column(Integer(), primary_key=True, autoincrement=True , nullable=False )
    hybridomaDescription = Column(Text(), nullable=False )
    productionSystem = Column(Text())
    antibodyPurifiedByAffinity = Column(Boolean(), nullable=False )
    specificityDocumented = Column(Boolean(), nullable=False )
    targetedAntigen = Column(Text(), nullable=False )
    shippingConditions = Column(Text(), nullable=False )
    storageConditions = Column(Text(), nullable=False )
    thirdPartyDistributionConsent = Column(Boolean())
    usageRestrictions = Column(Text())
    accessPointUrl = Column(Text(), nullable=False )
    refSku = Column(Text(), nullable=False )
    unitDefinition = Column(Text())
    unitCost = Column(Integer())
    unitCostCurrency = Column(Text())
    unitCostNote = Column(Text())
    qualityGrading = Column(Text())
    biosafetyRestrictions = Column(Text())
    canBeUsedToProduceGmo = Column(Boolean(), nullable=False )
    availability = Column(Text(), nullable=False )
    technicalRecommendation = Column(Text())
    internalReference = Column(Text())
    note = Column(Text())
    title = Column(Text(), nullable=False )
    description = Column(Text(), nullable=False )
    version = Column(Text())
    dateIssued = Column(DateTime())
    dateModified = Column(DateTime())
    iataClassification_id = Column(Integer(), ForeignKey('IataClassification.id'), nullable=False )
    iataClassification = relationship("IataClassification", uselist=False, foreign_keys=[iataClassification_id])
    materialSafetyDataSheet_id = Column(Integer(), ForeignKey('ReasearchInfrastructure.id'))
    materialSafetyDataSheet = relationship("ReasearchInfrastructure", uselist=False, foreign_keys=[materialSafetyDataSheet_id])
    originator_id = Column(Integer(), ForeignKey('Originator.id'))
    originator = relationship("Originator", uselist=False, foreign_keys=[originator_id])
    category_id = Column(Integer(), ForeignKey('ProductCategory.id'), nullable=False )
    category = relationship("ProductCategory", uselist=False, foreign_keys=[category_id])
    riskGroup_id = Column(Integer(), ForeignKey('RiskGroup.id'))
    riskGroup = relationship("RiskGroup", uselist=False, foreign_keys=[riskGroup_id])
    provider_id = Column(Integer(), ForeignKey('Provider.id'), nullable=False )
    provider = relationship("Provider", uselist=False, foreign_keys=[provider_id])
    contactPoint_id = Column(Integer(), ForeignKey('ContactPoint.id'))
    contactPoint = relationship("ContactPoint", uselist=False, foreign_keys=[contactPoint_id])
    
    
    # ManyToMany
    sequenceReference = relationship( "SequenceReference", secondary="Hybridoma_sequenceReference")
    
    
    # ManyToMany
    additionalCategory = relationship( "ProductCategory", secondary="Hybridoma_additionalCategory")
    
    
    # ManyToMany
    pathogenIdentification = relationship( "PathogenIdentification", secondary="Hybridoma_pathogenIdentification")
    
    
    # ManyToMany
    doi = relationship( "Doi", secondary="Hybridoma_doi")
    
    
    # ManyToMany
    collection = relationship( "Collection", secondary="Hybridoma_collection")
    
    
    # ManyToMany
    keywords = relationship( "Keyword", secondary="Hybridoma_keywords")
    
    
    # ManyToMany
    complementaryDocument = relationship( "Document", secondary="Hybridoma_complementaryDocument")
    
    
    # ManyToMany
    productPicture = relationship( "Image", secondary="Hybridoma_productPicture")
    
    
    # ManyToMany
    externalRelatedReference = relationship( "ExternalRelatedReference", secondary="Hybridoma_externalRelatedReference")
    
    
    # ManyToMany
    certification = relationship( "Certification", secondary="Hybridoma_certification")
    
    
    keyword_rel = relationship( "HybridomaKeyword" )
    keyword = association_proxy("keyword_rel", "keyword",
                                  creator=lambda x_: HybridomaKeyword(keyword=x_))
    

    def __repr__(self):
        return f"Hybridoma(id={self.id},hybridomaDescription={self.hybridomaDescription},productionSystem={self.productionSystem},antibodyPurifiedByAffinity={self.antibodyPurifiedByAffinity},specificityDocumented={self.specificityDocumented},targetedAntigen={self.targetedAntigen},shippingConditions={self.shippingConditions},storageConditions={self.storageConditions},thirdPartyDistributionConsent={self.thirdPartyDistributionConsent},usageRestrictions={self.usageRestrictions},accessPointUrl={self.accessPointUrl},refSku={self.refSku},unitDefinition={self.unitDefinition},unitCost={self.unitCost},unitCostCurrency={self.unitCostCurrency},unitCostNote={self.unitCostNote},qualityGrading={self.qualityGrading},biosafetyRestrictions={self.biosafetyRestrictions},canBeUsedToProduceGmo={self.canBeUsedToProduceGmo},availability={self.availability},technicalRecommendation={self.technicalRecommendation},internalReference={self.internalReference},note={self.note},title={self.title},description={self.description},version={self.version},dateIssued={self.dateIssued},dateModified={self.dateModified},iataClassification_id={self.iataClassification_id},materialSafetyDataSheet_id={self.materialSafetyDataSheet_id},originator_id={self.originator_id},category_id={self.category_id},riskGroup_id={self.riskGroup_id},provider_id={self.provider_id},contactPoint_id={self.contactPoint_id},)"



    
    # Using concrete inheritance: see https://docs.sqlalchemy.org/en/14/orm/inheritance.html
    __mapper_args__ = {
        'concrete': True
    }
    


class Virus(Pathogen):
    """
    The virus as a biological material
    """
    __tablename__ = 'Virus'

    id = Column(Integer(), primary_key=True, autoincrement=True , nullable=False )
    contaminationWithCoInfectingViruses = Column(Boolean(), nullable=False )
    mycoplasmicContent = Column(Boolean(), nullable=False )
    cultivability = Column(Text(), nullable=False )
    clinicalInformation = Column(Text())
    identificationTechnique = Column(Text())
    infectivity = Column(Text(), nullable=False )
    infectivityTest = Column(Text())
    isolationTechnique = Column(Text())
    isolationConditions = Column(Text())
    letterOfAuthority = Column(Text(), nullable=False )
    passage = Column(Text())
    genomeSequencing = Column(Text(), nullable=False )
    titer = Column(Text(), nullable=False )
    shippingConditions = Column(Text(), nullable=False )
    storageConditions = Column(Text(), nullable=False )
    thirdPartyDistributionConsent = Column(Boolean())
    usageRestrictions = Column(Text())
    accessPointUrl = Column(Text(), nullable=False )
    refSku = Column(Text(), nullable=False )
    unitDefinition = Column(Text())
    unitCost = Column(Integer())
    unitCostCurrency = Column(Text())
    unitCostNote = Column(Text())
    qualityGrading = Column(Text())
    biosafetyRestrictions = Column(Text())
    canBeUsedToProduceGmo = Column(Boolean(), nullable=False )
    availability = Column(Text(), nullable=False )
    technicalRecommendation = Column(Text())
    internalReference = Column(Text())
    note = Column(Text())
    title = Column(Text(), nullable=False )
    description = Column(Text(), nullable=False )
    version = Column(Text())
    dateIssued = Column(DateTime())
    dateModified = Column(DateTime())
    biologicalMaterialOrigin_id = Column(Integer(), ForeignKey('BiologicalMaterialOrigin.id'), nullable=False )
    biologicalMaterialOrigin = relationship("BiologicalMaterialOrigin", uselist=False, foreign_keys=[biologicalMaterialOrigin_id])
    iataClassification_id = Column(Integer(), ForeignKey('IataClassification.id'), nullable=False )
    iataClassification = relationship("IataClassification", uselist=False, foreign_keys=[iataClassification_id])
    materialSafetyDataSheet_id = Column(Integer(), ForeignKey('ReasearchInfrastructure.id'))
    materialSafetyDataSheet = relationship("ReasearchInfrastructure", uselist=False, foreign_keys=[materialSafetyDataSheet_id])
    originator_id = Column(Integer(), ForeignKey('Originator.id'))
    originator = relationship("Originator", uselist=False, foreign_keys=[originator_id])
    category_id = Column(Integer(), ForeignKey('ProductCategory.id'), nullable=False )
    category = relationship("ProductCategory", uselist=False, foreign_keys=[category_id])
    riskGroup_id = Column(Integer(), ForeignKey('RiskGroup.id'))
    riskGroup = relationship("RiskGroup", uselist=False, foreign_keys=[riskGroup_id])
    provider_id = Column(Integer(), ForeignKey('Provider.id'), nullable=False )
    provider = relationship("Provider", uselist=False, foreign_keys=[provider_id])
    contactPoint_id = Column(Integer(), ForeignKey('ContactPoint.id'))
    contactPoint = relationship("ContactPoint", uselist=False, foreign_keys=[contactPoint_id])
    
    
    # ManyToMany
    coInfectingViruses = relationship( "VirusName", secondary="Virus_coInfectingViruses")
    
    
    # ManyToMany
    suspectedEpidemiologicalOrigin = relationship( "GeographicalOrigin", secondary="Virus_suspectedEpidemiologicalOrigin")
    
    
    # ManyToMany
    isolationHost = relationship( "IsolationHost", secondary="Virus_isolationHost")
    
    
    # ManyToMany
    productionCellLine = relationship( "ProductionCellLine", secondary="Virus_productionCellLine")
    
    
    # ManyToMany
    propagationHost = relationship( "PropagationHost", secondary="Virus_propagationHost")
    
    
    # ManyToMany
    transmissionMethod = relationship( "TransmissionMethod", secondary="Virus_transmissionMethod")
    
    
    # ManyToMany
    sequence = relationship( "Sequence", secondary="Virus_sequence")
    
    
    # ManyToMany
    additionalCategory = relationship( "ProductCategory", secondary="Virus_additionalCategory")
    
    
    # ManyToMany
    pathogenIdentification = relationship( "PathogenIdentification", secondary="Virus_pathogenIdentification")
    
    
    # ManyToMany
    doi = relationship( "Doi", secondary="Virus_doi")
    
    
    # ManyToMany
    collection = relationship( "Collection", secondary="Virus_collection")
    
    
    # ManyToMany
    keywords = relationship( "Keyword", secondary="Virus_keywords")
    
    
    # ManyToMany
    complementaryDocument = relationship( "Document", secondary="Virus_complementaryDocument")
    
    
    # ManyToMany
    productPicture = relationship( "Image", secondary="Virus_productPicture")
    
    
    # ManyToMany
    externalRelatedReference = relationship( "ExternalRelatedReference", secondary="Virus_externalRelatedReference")
    
    
    # ManyToMany
    certification = relationship( "Certification", secondary="Virus_certification")
    
    
    keyword_rel = relationship( "VirusKeyword" )
    keyword = association_proxy("keyword_rel", "keyword",
                                  creator=lambda x_: VirusKeyword(keyword=x_))
    

    def __repr__(self):
        return f"Virus(id={self.id},contaminationWithCoInfectingViruses={self.contaminationWithCoInfectingViruses},mycoplasmicContent={self.mycoplasmicContent},cultivability={self.cultivability},clinicalInformation={self.clinicalInformation},identificationTechnique={self.identificationTechnique},infectivity={self.infectivity},infectivityTest={self.infectivityTest},isolationTechnique={self.isolationTechnique},isolationConditions={self.isolationConditions},letterOfAuthority={self.letterOfAuthority},passage={self.passage},genomeSequencing={self.genomeSequencing},titer={self.titer},shippingConditions={self.shippingConditions},storageConditions={self.storageConditions},thirdPartyDistributionConsent={self.thirdPartyDistributionConsent},usageRestrictions={self.usageRestrictions},accessPointUrl={self.accessPointUrl},refSku={self.refSku},unitDefinition={self.unitDefinition},unitCost={self.unitCost},unitCostCurrency={self.unitCostCurrency},unitCostNote={self.unitCostNote},qualityGrading={self.qualityGrading},biosafetyRestrictions={self.biosafetyRestrictions},canBeUsedToProduceGmo={self.canBeUsedToProduceGmo},availability={self.availability},technicalRecommendation={self.technicalRecommendation},internalReference={self.internalReference},note={self.note},title={self.title},description={self.description},version={self.version},dateIssued={self.dateIssued},dateModified={self.dateModified},biologicalMaterialOrigin_id={self.biologicalMaterialOrigin_id},iataClassification_id={self.iataClassification_id},materialSafetyDataSheet_id={self.materialSafetyDataSheet_id},originator_id={self.originator_id},category_id={self.category_id},riskGroup_id={self.riskGroup_id},provider_id={self.provider_id},contactPoint_id={self.contactPoint_id},)"



    
    # Using concrete inheritance: see https://docs.sqlalchemy.org/en/14/orm/inheritance.html
    __mapper_args__ = {
        'concrete': True
    }
    


class Bacterium(Pathogen):
    """
    The bacterium as a biological material
    """
    __tablename__ = 'Bacterium'

    id = Column(Integer(), primary_key=True, autoincrement=True , nullable=False )
    cultivability = Column(Text(), nullable=False )
    clinicalInformation = Column(Text())
    identificationTechnique = Column(Text())
    infectivity = Column(Text(), nullable=False )
    infectivityTest = Column(Text())
    isolationTechnique = Column(Text())
    isolationConditions = Column(Text())
    letterOfAuthority = Column(Text(), nullable=False )
    passage = Column(Text())
    genomeSequencing = Column(Text(), nullable=False )
    titer = Column(Text(), nullable=False )
    shippingConditions = Column(Text(), nullable=False )
    storageConditions = Column(Text(), nullable=False )
    thirdPartyDistributionConsent = Column(Boolean())
    usageRestrictions = Column(Text())
    accessPointUrl = Column(Text(), nullable=False )
    refSku = Column(Text(), nullable=False )
    unitDefinition = Column(Text())
    unitCost = Column(Integer())
    unitCostCurrency = Column(Text())
    unitCostNote = Column(Text())
    qualityGrading = Column(Text())
    biosafetyRestrictions = Column(Text())
    canBeUsedToProduceGmo = Column(Boolean(), nullable=False )
    availability = Column(Text(), nullable=False )
    technicalRecommendation = Column(Text())
    internalReference = Column(Text())
    note = Column(Text())
    title = Column(Text(), nullable=False )
    description = Column(Text(), nullable=False )
    version = Column(Text())
    dateIssued = Column(DateTime())
    dateModified = Column(DateTime())
    biologicalMaterialOrigin_id = Column(Integer(), ForeignKey('BiologicalMaterialOrigin.id'), nullable=False )
    biologicalMaterialOrigin = relationship("BiologicalMaterialOrigin", uselist=False, foreign_keys=[biologicalMaterialOrigin_id])
    iataClassification_id = Column(Integer(), ForeignKey('IataClassification.id'), nullable=False )
    iataClassification = relationship("IataClassification", uselist=False, foreign_keys=[iataClassification_id])
    materialSafetyDataSheet_id = Column(Integer(), ForeignKey('ReasearchInfrastructure.id'))
    materialSafetyDataSheet = relationship("ReasearchInfrastructure", uselist=False, foreign_keys=[materialSafetyDataSheet_id])
    originator_id = Column(Integer(), ForeignKey('Originator.id'))
    originator = relationship("Originator", uselist=False, foreign_keys=[originator_id])
    category_id = Column(Integer(), ForeignKey('ProductCategory.id'), nullable=False )
    category = relationship("ProductCategory", uselist=False, foreign_keys=[category_id])
    riskGroup_id = Column(Integer(), ForeignKey('RiskGroup.id'))
    riskGroup = relationship("RiskGroup", uselist=False, foreign_keys=[riskGroup_id])
    provider_id = Column(Integer(), ForeignKey('Provider.id'), nullable=False )
    provider = relationship("Provider", uselist=False, foreign_keys=[provider_id])
    contactPoint_id = Column(Integer(), ForeignKey('ContactPoint.id'))
    contactPoint = relationship("ContactPoint", uselist=False, foreign_keys=[contactPoint_id])
    
    
    # ManyToMany
    suspectedEpidemiologicalOrigin = relationship( "GeographicalOrigin", secondary="Bacterium_suspectedEpidemiologicalOrigin")
    
    
    # ManyToMany
    isolationHost = relationship( "IsolationHost", secondary="Bacterium_isolationHost")
    
    
    # ManyToMany
    productionCellLine = relationship( "ProductionCellLine", secondary="Bacterium_productionCellLine")
    
    
    # ManyToMany
    propagationHost = relationship( "PropagationHost", secondary="Bacterium_propagationHost")
    
    
    # ManyToMany
    transmissionMethod = relationship( "TransmissionMethod", secondary="Bacterium_transmissionMethod")
    
    
    # ManyToMany
    sequence = relationship( "Sequence", secondary="Bacterium_sequence")
    
    
    # ManyToMany
    additionalCategory = relationship( "ProductCategory", secondary="Bacterium_additionalCategory")
    
    
    # ManyToMany
    pathogenIdentification = relationship( "PathogenIdentification", secondary="Bacterium_pathogenIdentification")
    
    
    # ManyToMany
    doi = relationship( "Doi", secondary="Bacterium_doi")
    
    
    # ManyToMany
    collection = relationship( "Collection", secondary="Bacterium_collection")
    
    
    # ManyToMany
    keywords = relationship( "Keyword", secondary="Bacterium_keywords")
    
    
    # ManyToMany
    complementaryDocument = relationship( "Document", secondary="Bacterium_complementaryDocument")
    
    
    # ManyToMany
    productPicture = relationship( "Image", secondary="Bacterium_productPicture")
    
    
    # ManyToMany
    externalRelatedReference = relationship( "ExternalRelatedReference", secondary="Bacterium_externalRelatedReference")
    
    
    # ManyToMany
    certification = relationship( "Certification", secondary="Bacterium_certification")
    
    
    keyword_rel = relationship( "BacteriumKeyword" )
    keyword = association_proxy("keyword_rel", "keyword",
                                  creator=lambda x_: BacteriumKeyword(keyword=x_))
    

    def __repr__(self):
        return f"Bacterium(id={self.id},cultivability={self.cultivability},clinicalInformation={self.clinicalInformation},identificationTechnique={self.identificationTechnique},infectivity={self.infectivity},infectivityTest={self.infectivityTest},isolationTechnique={self.isolationTechnique},isolationConditions={self.isolationConditions},letterOfAuthority={self.letterOfAuthority},passage={self.passage},genomeSequencing={self.genomeSequencing},titer={self.titer},shippingConditions={self.shippingConditions},storageConditions={self.storageConditions},thirdPartyDistributionConsent={self.thirdPartyDistributionConsent},usageRestrictions={self.usageRestrictions},accessPointUrl={self.accessPointUrl},refSku={self.refSku},unitDefinition={self.unitDefinition},unitCost={self.unitCost},unitCostCurrency={self.unitCostCurrency},unitCostNote={self.unitCostNote},qualityGrading={self.qualityGrading},biosafetyRestrictions={self.biosafetyRestrictions},canBeUsedToProduceGmo={self.canBeUsedToProduceGmo},availability={self.availability},technicalRecommendation={self.technicalRecommendation},internalReference={self.internalReference},note={self.note},title={self.title},description={self.description},version={self.version},dateIssued={self.dateIssued},dateModified={self.dateModified},biologicalMaterialOrigin_id={self.biologicalMaterialOrigin_id},iataClassification_id={self.iataClassification_id},materialSafetyDataSheet_id={self.materialSafetyDataSheet_id},originator_id={self.originator_id},category_id={self.category_id},riskGroup_id={self.riskGroup_id},provider_id={self.provider_id},contactPoint_id={self.contactPoint_id},)"



    
    # Using concrete inheritance: see https://docs.sqlalchemy.org/en/14/orm/inheritance.html
    __mapper_args__ = {
        'concrete': True
    }
    


class Fungus(Pathogen):
    """
    The fungus as a biological material
    """
    __tablename__ = 'Fungus'

    id = Column(Integer(), primary_key=True, autoincrement=True , nullable=False )
    cultivability = Column(Text(), nullable=False )
    clinicalInformation = Column(Text())
    identificationTechnique = Column(Text())
    infectivity = Column(Text(), nullable=False )
    infectivityTest = Column(Text())
    isolationTechnique = Column(Text())
    isolationConditions = Column(Text())
    letterOfAuthority = Column(Text(), nullable=False )
    passage = Column(Text())
    genomeSequencing = Column(Text(), nullable=False )
    titer = Column(Text(), nullable=False )
    shippingConditions = Column(Text(), nullable=False )
    storageConditions = Column(Text(), nullable=False )
    thirdPartyDistributionConsent = Column(Boolean())
    usageRestrictions = Column(Text())
    accessPointUrl = Column(Text(), nullable=False )
    refSku = Column(Text(), nullable=False )
    unitDefinition = Column(Text())
    unitCost = Column(Integer())
    unitCostCurrency = Column(Text())
    unitCostNote = Column(Text())
    qualityGrading = Column(Text())
    biosafetyRestrictions = Column(Text())
    canBeUsedToProduceGmo = Column(Boolean(), nullable=False )
    availability = Column(Text(), nullable=False )
    technicalRecommendation = Column(Text())
    internalReference = Column(Text())
    note = Column(Text())
    title = Column(Text(), nullable=False )
    description = Column(Text(), nullable=False )
    version = Column(Text())
    dateIssued = Column(DateTime())
    dateModified = Column(DateTime())
    biologicalMaterialOrigin_id = Column(Integer(), ForeignKey('BiologicalMaterialOrigin.id'), nullable=False )
    biologicalMaterialOrigin = relationship("BiologicalMaterialOrigin", uselist=False, foreign_keys=[biologicalMaterialOrigin_id])
    iataClassification_id = Column(Integer(), ForeignKey('IataClassification.id'), nullable=False )
    iataClassification = relationship("IataClassification", uselist=False, foreign_keys=[iataClassification_id])
    materialSafetyDataSheet_id = Column(Integer(), ForeignKey('ReasearchInfrastructure.id'))
    materialSafetyDataSheet = relationship("ReasearchInfrastructure", uselist=False, foreign_keys=[materialSafetyDataSheet_id])
    originator_id = Column(Integer(), ForeignKey('Originator.id'))
    originator = relationship("Originator", uselist=False, foreign_keys=[originator_id])
    category_id = Column(Integer(), ForeignKey('ProductCategory.id'), nullable=False )
    category = relationship("ProductCategory", uselist=False, foreign_keys=[category_id])
    riskGroup_id = Column(Integer(), ForeignKey('RiskGroup.id'))
    riskGroup = relationship("RiskGroup", uselist=False, foreign_keys=[riskGroup_id])
    provider_id = Column(Integer(), ForeignKey('Provider.id'), nullable=False )
    provider = relationship("Provider", uselist=False, foreign_keys=[provider_id])
    contactPoint_id = Column(Integer(), ForeignKey('ContactPoint.id'))
    contactPoint = relationship("ContactPoint", uselist=False, foreign_keys=[contactPoint_id])
    
    
    # ManyToMany
    suspectedEpidemiologicalOrigin = relationship( "GeographicalOrigin", secondary="Fungus_suspectedEpidemiologicalOrigin")
    
    
    # ManyToMany
    isolationHost = relationship( "IsolationHost", secondary="Fungus_isolationHost")
    
    
    # ManyToMany
    productionCellLine = relationship( "ProductionCellLine", secondary="Fungus_productionCellLine")
    
    
    # ManyToMany
    propagationHost = relationship( "PropagationHost", secondary="Fungus_propagationHost")
    
    
    # ManyToMany
    transmissionMethod = relationship( "TransmissionMethod", secondary="Fungus_transmissionMethod")
    
    
    # ManyToMany
    sequence = relationship( "Sequence", secondary="Fungus_sequence")
    
    
    # ManyToMany
    additionalCategory = relationship( "ProductCategory", secondary="Fungus_additionalCategory")
    
    
    # ManyToMany
    pathogenIdentification = relationship( "PathogenIdentification", secondary="Fungus_pathogenIdentification")
    
    
    # ManyToMany
    doi = relationship( "Doi", secondary="Fungus_doi")
    
    
    # ManyToMany
    collection = relationship( "Collection", secondary="Fungus_collection")
    
    
    # ManyToMany
    keywords = relationship( "Keyword", secondary="Fungus_keywords")
    
    
    # ManyToMany
    complementaryDocument = relationship( "Document", secondary="Fungus_complementaryDocument")
    
    
    # ManyToMany
    productPicture = relationship( "Image", secondary="Fungus_productPicture")
    
    
    # ManyToMany
    externalRelatedReference = relationship( "ExternalRelatedReference", secondary="Fungus_externalRelatedReference")
    
    
    # ManyToMany
    certification = relationship( "Certification", secondary="Fungus_certification")
    
    
    keyword_rel = relationship( "FungusKeyword" )
    keyword = association_proxy("keyword_rel", "keyword",
                                  creator=lambda x_: FungusKeyword(keyword=x_))
    

    def __repr__(self):
        return f"Fungus(id={self.id},cultivability={self.cultivability},clinicalInformation={self.clinicalInformation},identificationTechnique={self.identificationTechnique},infectivity={self.infectivity},infectivityTest={self.infectivityTest},isolationTechnique={self.isolationTechnique},isolationConditions={self.isolationConditions},letterOfAuthority={self.letterOfAuthority},passage={self.passage},genomeSequencing={self.genomeSequencing},titer={self.titer},shippingConditions={self.shippingConditions},storageConditions={self.storageConditions},thirdPartyDistributionConsent={self.thirdPartyDistributionConsent},usageRestrictions={self.usageRestrictions},accessPointUrl={self.accessPointUrl},refSku={self.refSku},unitDefinition={self.unitDefinition},unitCost={self.unitCost},unitCostCurrency={self.unitCostCurrency},unitCostNote={self.unitCostNote},qualityGrading={self.qualityGrading},biosafetyRestrictions={self.biosafetyRestrictions},canBeUsedToProduceGmo={self.canBeUsedToProduceGmo},availability={self.availability},technicalRecommendation={self.technicalRecommendation},internalReference={self.internalReference},note={self.note},title={self.title},description={self.description},version={self.version},dateIssued={self.dateIssued},dateModified={self.dateModified},biologicalMaterialOrigin_id={self.biologicalMaterialOrigin_id},iataClassification_id={self.iataClassification_id},materialSafetyDataSheet_id={self.materialSafetyDataSheet_id},originator_id={self.originator_id},category_id={self.category_id},riskGroup_id={self.riskGroup_id},provider_id={self.provider_id},contactPoint_id={self.contactPoint_id},)"



    
    # Using concrete inheritance: see https://docs.sqlalchemy.org/en/14/orm/inheritance.html
    __mapper_args__ = {
        'concrete': True
    }
    


class Protozoan(Pathogen):
    """
    The protozoan as a biological material
    """
    __tablename__ = 'Protozoan'

    id = Column(Integer(), primary_key=True, autoincrement=True , nullable=False )
    cultivability = Column(Text(), nullable=False )
    clinicalInformation = Column(Text())
    identificationTechnique = Column(Text())
    infectivity = Column(Text(), nullable=False )
    infectivityTest = Column(Text())
    isolationTechnique = Column(Text())
    isolationConditions = Column(Text())
    letterOfAuthority = Column(Text(), nullable=False )
    passage = Column(Text())
    genomeSequencing = Column(Text(), nullable=False )
    titer = Column(Text(), nullable=False )
    shippingConditions = Column(Text(), nullable=False )
    storageConditions = Column(Text(), nullable=False )
    thirdPartyDistributionConsent = Column(Boolean())
    usageRestrictions = Column(Text())
    accessPointUrl = Column(Text(), nullable=False )
    refSku = Column(Text(), nullable=False )
    unitDefinition = Column(Text())
    unitCost = Column(Integer())
    unitCostCurrency = Column(Text())
    unitCostNote = Column(Text())
    qualityGrading = Column(Text())
    biosafetyRestrictions = Column(Text())
    canBeUsedToProduceGmo = Column(Boolean(), nullable=False )
    availability = Column(Text(), nullable=False )
    technicalRecommendation = Column(Text())
    internalReference = Column(Text())
    note = Column(Text())
    title = Column(Text(), nullable=False )
    description = Column(Text(), nullable=False )
    version = Column(Text())
    dateIssued = Column(DateTime())
    dateModified = Column(DateTime())
    biologicalMaterialOrigin_id = Column(Integer(), ForeignKey('BiologicalMaterialOrigin.id'), nullable=False )
    biologicalMaterialOrigin = relationship("BiologicalMaterialOrigin", uselist=False, foreign_keys=[biologicalMaterialOrigin_id])
    iataClassification_id = Column(Integer(), ForeignKey('IataClassification.id'), nullable=False )
    iataClassification = relationship("IataClassification", uselist=False, foreign_keys=[iataClassification_id])
    materialSafetyDataSheet_id = Column(Integer(), ForeignKey('ReasearchInfrastructure.id'))
    materialSafetyDataSheet = relationship("ReasearchInfrastructure", uselist=False, foreign_keys=[materialSafetyDataSheet_id])
    originator_id = Column(Integer(), ForeignKey('Originator.id'))
    originator = relationship("Originator", uselist=False, foreign_keys=[originator_id])
    category_id = Column(Integer(), ForeignKey('ProductCategory.id'), nullable=False )
    category = relationship("ProductCategory", uselist=False, foreign_keys=[category_id])
    riskGroup_id = Column(Integer(), ForeignKey('RiskGroup.id'))
    riskGroup = relationship("RiskGroup", uselist=False, foreign_keys=[riskGroup_id])
    provider_id = Column(Integer(), ForeignKey('Provider.id'), nullable=False )
    provider = relationship("Provider", uselist=False, foreign_keys=[provider_id])
    contactPoint_id = Column(Integer(), ForeignKey('ContactPoint.id'))
    contactPoint = relationship("ContactPoint", uselist=False, foreign_keys=[contactPoint_id])
    
    
    # ManyToMany
    suspectedEpidemiologicalOrigin = relationship( "GeographicalOrigin", secondary="Protozoan_suspectedEpidemiologicalOrigin")
    
    
    # ManyToMany
    isolationHost = relationship( "IsolationHost", secondary="Protozoan_isolationHost")
    
    
    # ManyToMany
    productionCellLine = relationship( "ProductionCellLine", secondary="Protozoan_productionCellLine")
    
    
    # ManyToMany
    propagationHost = relationship( "PropagationHost", secondary="Protozoan_propagationHost")
    
    
    # ManyToMany
    transmissionMethod = relationship( "TransmissionMethod", secondary="Protozoan_transmissionMethod")
    
    
    # ManyToMany
    sequence = relationship( "Sequence", secondary="Protozoan_sequence")
    
    
    # ManyToMany
    additionalCategory = relationship( "ProductCategory", secondary="Protozoan_additionalCategory")
    
    
    # ManyToMany
    pathogenIdentification = relationship( "PathogenIdentification", secondary="Protozoan_pathogenIdentification")
    
    
    # ManyToMany
    doi = relationship( "Doi", secondary="Protozoan_doi")
    
    
    # ManyToMany
    collection = relationship( "Collection", secondary="Protozoan_collection")
    
    
    # ManyToMany
    keywords = relationship( "Keyword", secondary="Protozoan_keywords")
    
    
    # ManyToMany
    complementaryDocument = relationship( "Document", secondary="Protozoan_complementaryDocument")
    
    
    # ManyToMany
    productPicture = relationship( "Image", secondary="Protozoan_productPicture")
    
    
    # ManyToMany
    externalRelatedReference = relationship( "ExternalRelatedReference", secondary="Protozoan_externalRelatedReference")
    
    
    # ManyToMany
    certification = relationship( "Certification", secondary="Protozoan_certification")
    
    
    keyword_rel = relationship( "ProtozoanKeyword" )
    keyword = association_proxy("keyword_rel", "keyword",
                                  creator=lambda x_: ProtozoanKeyword(keyword=x_))
    

    def __repr__(self):
        return f"Protozoan(id={self.id},cultivability={self.cultivability},clinicalInformation={self.clinicalInformation},identificationTechnique={self.identificationTechnique},infectivity={self.infectivity},infectivityTest={self.infectivityTest},isolationTechnique={self.isolationTechnique},isolationConditions={self.isolationConditions},letterOfAuthority={self.letterOfAuthority},passage={self.passage},genomeSequencing={self.genomeSequencing},titer={self.titer},shippingConditions={self.shippingConditions},storageConditions={self.storageConditions},thirdPartyDistributionConsent={self.thirdPartyDistributionConsent},usageRestrictions={self.usageRestrictions},accessPointUrl={self.accessPointUrl},refSku={self.refSku},unitDefinition={self.unitDefinition},unitCost={self.unitCost},unitCostCurrency={self.unitCostCurrency},unitCostNote={self.unitCostNote},qualityGrading={self.qualityGrading},biosafetyRestrictions={self.biosafetyRestrictions},canBeUsedToProduceGmo={self.canBeUsedToProduceGmo},availability={self.availability},technicalRecommendation={self.technicalRecommendation},internalReference={self.internalReference},note={self.note},title={self.title},description={self.description},version={self.version},dateIssued={self.dateIssued},dateModified={self.dateModified},biologicalMaterialOrigin_id={self.biologicalMaterialOrigin_id},iataClassification_id={self.iataClassification_id},materialSafetyDataSheet_id={self.materialSafetyDataSheet_id},originator_id={self.originator_id},category_id={self.category_id},riskGroup_id={self.riskGroup_id},provider_id={self.provider_id},contactPoint_id={self.contactPoint_id},)"



    
    # Using concrete inheritance: see https://docs.sqlalchemy.org/en/14/orm/inheritance.html
    __mapper_args__ = {
        'concrete': True
    }
    


class Viroid(Pathogen):
    """
    The viroid as a biological material
    """
    __tablename__ = 'Viroid'

    id = Column(Integer(), primary_key=True, autoincrement=True , nullable=False )
    cultivability = Column(Text(), nullable=False )
    clinicalInformation = Column(Text())
    identificationTechnique = Column(Text())
    infectivity = Column(Text(), nullable=False )
    infectivityTest = Column(Text())
    isolationTechnique = Column(Text())
    isolationConditions = Column(Text())
    letterOfAuthority = Column(Text(), nullable=False )
    passage = Column(Text())
    genomeSequencing = Column(Text(), nullable=False )
    titer = Column(Text(), nullable=False )
    shippingConditions = Column(Text(), nullable=False )
    storageConditions = Column(Text(), nullable=False )
    thirdPartyDistributionConsent = Column(Boolean())
    usageRestrictions = Column(Text())
    accessPointUrl = Column(Text(), nullable=False )
    refSku = Column(Text(), nullable=False )
    unitDefinition = Column(Text())
    unitCost = Column(Integer())
    unitCostCurrency = Column(Text())
    unitCostNote = Column(Text())
    qualityGrading = Column(Text())
    biosafetyRestrictions = Column(Text())
    canBeUsedToProduceGmo = Column(Boolean(), nullable=False )
    availability = Column(Text(), nullable=False )
    technicalRecommendation = Column(Text())
    internalReference = Column(Text())
    note = Column(Text())
    title = Column(Text(), nullable=False )
    description = Column(Text(), nullable=False )
    version = Column(Text())
    dateIssued = Column(DateTime())
    dateModified = Column(DateTime())
    biologicalMaterialOrigin_id = Column(Integer(), ForeignKey('BiologicalMaterialOrigin.id'), nullable=False )
    biologicalMaterialOrigin = relationship("BiologicalMaterialOrigin", uselist=False, foreign_keys=[biologicalMaterialOrigin_id])
    iataClassification_id = Column(Integer(), ForeignKey('IataClassification.id'), nullable=False )
    iataClassification = relationship("IataClassification", uselist=False, foreign_keys=[iataClassification_id])
    materialSafetyDataSheet_id = Column(Integer(), ForeignKey('ReasearchInfrastructure.id'))
    materialSafetyDataSheet = relationship("ReasearchInfrastructure", uselist=False, foreign_keys=[materialSafetyDataSheet_id])
    originator_id = Column(Integer(), ForeignKey('Originator.id'))
    originator = relationship("Originator", uselist=False, foreign_keys=[originator_id])
    category_id = Column(Integer(), ForeignKey('ProductCategory.id'), nullable=False )
    category = relationship("ProductCategory", uselist=False, foreign_keys=[category_id])
    riskGroup_id = Column(Integer(), ForeignKey('RiskGroup.id'))
    riskGroup = relationship("RiskGroup", uselist=False, foreign_keys=[riskGroup_id])
    provider_id = Column(Integer(), ForeignKey('Provider.id'), nullable=False )
    provider = relationship("Provider", uselist=False, foreign_keys=[provider_id])
    contactPoint_id = Column(Integer(), ForeignKey('ContactPoint.id'))
    contactPoint = relationship("ContactPoint", uselist=False, foreign_keys=[contactPoint_id])
    
    
    # ManyToMany
    suspectedEpidemiologicalOrigin = relationship( "GeographicalOrigin", secondary="Viroid_suspectedEpidemiologicalOrigin")
    
    
    # ManyToMany
    isolationHost = relationship( "IsolationHost", secondary="Viroid_isolationHost")
    
    
    # ManyToMany
    productionCellLine = relationship( "ProductionCellLine", secondary="Viroid_productionCellLine")
    
    
    # ManyToMany
    propagationHost = relationship( "PropagationHost", secondary="Viroid_propagationHost")
    
    
    # ManyToMany
    transmissionMethod = relationship( "TransmissionMethod", secondary="Viroid_transmissionMethod")
    
    
    # ManyToMany
    sequence = relationship( "Sequence", secondary="Viroid_sequence")
    
    
    # ManyToMany
    additionalCategory = relationship( "ProductCategory", secondary="Viroid_additionalCategory")
    
    
    # ManyToMany
    pathogenIdentification = relationship( "PathogenIdentification", secondary="Viroid_pathogenIdentification")
    
    
    # ManyToMany
    doi = relationship( "Doi", secondary="Viroid_doi")
    
    
    # ManyToMany
    collection = relationship( "Collection", secondary="Viroid_collection")
    
    
    # ManyToMany
    keywords = relationship( "Keyword", secondary="Viroid_keywords")
    
    
    # ManyToMany
    complementaryDocument = relationship( "Document", secondary="Viroid_complementaryDocument")
    
    
    # ManyToMany
    productPicture = relationship( "Image", secondary="Viroid_productPicture")
    
    
    # ManyToMany
    externalRelatedReference = relationship( "ExternalRelatedReference", secondary="Viroid_externalRelatedReference")
    
    
    # ManyToMany
    certification = relationship( "Certification", secondary="Viroid_certification")
    
    
    keyword_rel = relationship( "ViroidKeyword" )
    keyword = association_proxy("keyword_rel", "keyword",
                                  creator=lambda x_: ViroidKeyword(keyword=x_))
    

    def __repr__(self):
        return f"Viroid(id={self.id},cultivability={self.cultivability},clinicalInformation={self.clinicalInformation},identificationTechnique={self.identificationTechnique},infectivity={self.infectivity},infectivityTest={self.infectivityTest},isolationTechnique={self.isolationTechnique},isolationConditions={self.isolationConditions},letterOfAuthority={self.letterOfAuthority},passage={self.passage},genomeSequencing={self.genomeSequencing},titer={self.titer},shippingConditions={self.shippingConditions},storageConditions={self.storageConditions},thirdPartyDistributionConsent={self.thirdPartyDistributionConsent},usageRestrictions={self.usageRestrictions},accessPointUrl={self.accessPointUrl},refSku={self.refSku},unitDefinition={self.unitDefinition},unitCost={self.unitCost},unitCostCurrency={self.unitCostCurrency},unitCostNote={self.unitCostNote},qualityGrading={self.qualityGrading},biosafetyRestrictions={self.biosafetyRestrictions},canBeUsedToProduceGmo={self.canBeUsedToProduceGmo},availability={self.availability},technicalRecommendation={self.technicalRecommendation},internalReference={self.internalReference},note={self.note},title={self.title},description={self.description},version={self.version},dateIssued={self.dateIssued},dateModified={self.dateModified},biologicalMaterialOrigin_id={self.biologicalMaterialOrigin_id},iataClassification_id={self.iataClassification_id},materialSafetyDataSheet_id={self.materialSafetyDataSheet_id},originator_id={self.originator_id},category_id={self.category_id},riskGroup_id={self.riskGroup_id},provider_id={self.provider_id},contactPoint_id={self.contactPoint_id},)"



    
    # Using concrete inheritance: see https://docs.sqlalchemy.org/en/14/orm/inheritance.html
    __mapper_args__ = {
        'concrete': True
    }
    


class Prion(Pathogen):
    """
    The prion as a biological material
    """
    __tablename__ = 'Prion'

    id = Column(Integer(), primary_key=True, autoincrement=True , nullable=False )
    cultivability = Column(Text(), nullable=False )
    clinicalInformation = Column(Text())
    identificationTechnique = Column(Text())
    infectivity = Column(Text(), nullable=False )
    infectivityTest = Column(Text())
    isolationTechnique = Column(Text())
    isolationConditions = Column(Text())
    letterOfAuthority = Column(Text(), nullable=False )
    passage = Column(Text())
    genomeSequencing = Column(Text(), nullable=False )
    titer = Column(Text(), nullable=False )
    shippingConditions = Column(Text(), nullable=False )
    storageConditions = Column(Text(), nullable=False )
    thirdPartyDistributionConsent = Column(Boolean())
    usageRestrictions = Column(Text())
    accessPointUrl = Column(Text(), nullable=False )
    refSku = Column(Text(), nullable=False )
    unitDefinition = Column(Text())
    unitCost = Column(Integer())
    unitCostCurrency = Column(Text())
    unitCostNote = Column(Text())
    qualityGrading = Column(Text())
    biosafetyRestrictions = Column(Text())
    canBeUsedToProduceGmo = Column(Boolean(), nullable=False )
    availability = Column(Text(), nullable=False )
    technicalRecommendation = Column(Text())
    internalReference = Column(Text())
    note = Column(Text())
    title = Column(Text(), nullable=False )
    description = Column(Text(), nullable=False )
    version = Column(Text())
    dateIssued = Column(DateTime())
    dateModified = Column(DateTime())
    biologicalMaterialOrigin_id = Column(Integer(), ForeignKey('BiologicalMaterialOrigin.id'), nullable=False )
    biologicalMaterialOrigin = relationship("BiologicalMaterialOrigin", uselist=False, foreign_keys=[biologicalMaterialOrigin_id])
    iataClassification_id = Column(Integer(), ForeignKey('IataClassification.id'), nullable=False )
    iataClassification = relationship("IataClassification", uselist=False, foreign_keys=[iataClassification_id])
    materialSafetyDataSheet_id = Column(Integer(), ForeignKey('ReasearchInfrastructure.id'))
    materialSafetyDataSheet = relationship("ReasearchInfrastructure", uselist=False, foreign_keys=[materialSafetyDataSheet_id])
    originator_id = Column(Integer(), ForeignKey('Originator.id'))
    originator = relationship("Originator", uselist=False, foreign_keys=[originator_id])
    category_id = Column(Integer(), ForeignKey('ProductCategory.id'), nullable=False )
    category = relationship("ProductCategory", uselist=False, foreign_keys=[category_id])
    riskGroup_id = Column(Integer(), ForeignKey('RiskGroup.id'))
    riskGroup = relationship("RiskGroup", uselist=False, foreign_keys=[riskGroup_id])
    provider_id = Column(Integer(), ForeignKey('Provider.id'), nullable=False )
    provider = relationship("Provider", uselist=False, foreign_keys=[provider_id])
    contactPoint_id = Column(Integer(), ForeignKey('ContactPoint.id'))
    contactPoint = relationship("ContactPoint", uselist=False, foreign_keys=[contactPoint_id])
    
    
    # ManyToMany
    suspectedEpidemiologicalOrigin = relationship( "GeographicalOrigin", secondary="Prion_suspectedEpidemiologicalOrigin")
    
    
    # ManyToMany
    isolationHost = relationship( "IsolationHost", secondary="Prion_isolationHost")
    
    
    # ManyToMany
    productionCellLine = relationship( "ProductionCellLine", secondary="Prion_productionCellLine")
    
    
    # ManyToMany
    propagationHost = relationship( "PropagationHost", secondary="Prion_propagationHost")
    
    
    # ManyToMany
    transmissionMethod = relationship( "TransmissionMethod", secondary="Prion_transmissionMethod")
    
    
    # ManyToMany
    sequence = relationship( "Sequence", secondary="Prion_sequence")
    
    
    # ManyToMany
    additionalCategory = relationship( "ProductCategory", secondary="Prion_additionalCategory")
    
    
    # ManyToMany
    pathogenIdentification = relationship( "PathogenIdentification", secondary="Prion_pathogenIdentification")
    
    
    # ManyToMany
    doi = relationship( "Doi", secondary="Prion_doi")
    
    
    # ManyToMany
    collection = relationship( "Collection", secondary="Prion_collection")
    
    
    # ManyToMany
    keywords = relationship( "Keyword", secondary="Prion_keywords")
    
    
    # ManyToMany
    complementaryDocument = relationship( "Document", secondary="Prion_complementaryDocument")
    
    
    # ManyToMany
    productPicture = relationship( "Image", secondary="Prion_productPicture")
    
    
    # ManyToMany
    externalRelatedReference = relationship( "ExternalRelatedReference", secondary="Prion_externalRelatedReference")
    
    
    # ManyToMany
    certification = relationship( "Certification", secondary="Prion_certification")
    
    
    keyword_rel = relationship( "PrionKeyword" )
    keyword = association_proxy("keyword_rel", "keyword",
                                  creator=lambda x_: PrionKeyword(keyword=x_))
    

    def __repr__(self):
        return f"Prion(id={self.id},cultivability={self.cultivability},clinicalInformation={self.clinicalInformation},identificationTechnique={self.identificationTechnique},infectivity={self.infectivity},infectivityTest={self.infectivityTest},isolationTechnique={self.isolationTechnique},isolationConditions={self.isolationConditions},letterOfAuthority={self.letterOfAuthority},passage={self.passage},genomeSequencing={self.genomeSequencing},titer={self.titer},shippingConditions={self.shippingConditions},storageConditions={self.storageConditions},thirdPartyDistributionConsent={self.thirdPartyDistributionConsent},usageRestrictions={self.usageRestrictions},accessPointUrl={self.accessPointUrl},refSku={self.refSku},unitDefinition={self.unitDefinition},unitCost={self.unitCost},unitCostCurrency={self.unitCostCurrency},unitCostNote={self.unitCostNote},qualityGrading={self.qualityGrading},biosafetyRestrictions={self.biosafetyRestrictions},canBeUsedToProduceGmo={self.canBeUsedToProduceGmo},availability={self.availability},technicalRecommendation={self.technicalRecommendation},internalReference={self.internalReference},note={self.note},title={self.title},description={self.description},version={self.version},dateIssued={self.dateIssued},dateModified={self.dateModified},biologicalMaterialOrigin_id={self.biologicalMaterialOrigin_id},iataClassification_id={self.iataClassification_id},materialSafetyDataSheet_id={self.materialSafetyDataSheet_id},originator_id={self.originator_id},category_id={self.category_id},riskGroup_id={self.riskGroup_id},provider_id={self.provider_id},contactPoint_id={self.contactPoint_id},)"



    
    # Using concrete inheritance: see https://docs.sqlalchemy.org/en/14/orm/inheritance.html
    __mapper_args__ = {
        'concrete': True
    }
    


